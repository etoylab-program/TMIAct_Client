




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace GlobalC2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReqPingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqPingDelegate ReqPing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqLogOnCreditKeyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Guid _creditKey);  
		public ReqLogOnCreditKeyDelegate ReqLogOnCreditKey = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Guid _creditKey)
		{ 
			return false;
		};
		public delegate bool ReqLogOutDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqLogOutDelegate ReqLogOut = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqGetTotlaRelocateCntToNotCompleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqGetTotlaRelocateCntToNotCompleteDelegate ReqGetTotlaRelocateCntToNotComplete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqRelocateUserInfoSetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt);  
		public ReqRelocateUserInfoSetDelegate ReqRelocateUserInfoSet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRelocateUserComplateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt);  
		public ReqRelocateUserComplateDelegate ReqRelocateUserComplate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRefrashUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqRefrashUserInfoDelegate ReqRefrashUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqReConnectUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoReconnectUserInfoReq _pkt);  
		public ReqReConnectUserInfoDelegate ReqReConnectUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoReconnectUserInfoReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAccountCodeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqAccountCodeDelegate ReqAccountCode = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqAccountSetPasswordDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public ReqAccountSetPasswordDelegate ReqAccountSetPassword = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAccountCodeRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqAccountCodeRewardDelegate ReqAccountCodeReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqAccountLinkRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqAccountLinkRewardDelegate ReqAccountLinkReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqLinkAccountListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqLinkAccountListDelegate ReqLinkAccountList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqAddLinkAccountAuthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkInfo _pkt);  
		public ReqAddLinkAccountAuthDelegate ReqAddLinkAccountAuth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkInfo _pkt)
		{ 
			return false;
		};
		public delegate bool ReqGetUserInfoFromAccountLinkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserInfoFromLinkReq _pkt);  
		public ReqGetUserInfoFromAccountLinkDelegate ReqGetUserInfoFromAccountLink = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserInfoFromLinkReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqPushNotifiTokenSetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPushNotiSetToken _pkt);  
		public ReqPushNotifiTokenSetDelegate ReqPushNotifiTokenSet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPushNotiSetToken _pkt)
		{ 
			return false;
		};
		public delegate bool ReqReflashLoginBonusDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqReflashLoginBonusDelegate ReqReflashLoginBonus = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqRewardTakeAchieveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqRewardTakeAchieveDelegate ReqRewardTakeAchieve = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardTakeAchieveEventDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqRewardTakeAchieveEventDelegate ReqRewardTakeAchieveEvent = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardDailyMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdDailyMissionReq _pkt);  
		public ReqRewardDailyMissionDelegate ReqRewardDailyMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdDailyMissionReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardWeekMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComRwd _pkt);  
		public ReqRewardWeekMissionDelegate ReqRewardWeekMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComRwd _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardInfluMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComRwd _pkt);  
		public ReqRewardInfluMissionDelegate ReqRewardInfluMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComRwd _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUpdateGllaMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateGllaMission _pkt);  
		public ReqUpdateGllaMissionDelegate ReqUpdateGllaMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateGllaMission _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardGllaMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdGllaMission _pkt);  
		public ReqRewardGllaMissionDelegate ReqRewardGllaMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdGllaMission _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardPassMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassMission _pkt);  
		public ReqRewardPassMissionDelegate ReqRewardPassMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassMission _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRewardPassDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassReq _pkt);  
		public ReqRewardPassDelegate ReqRewardPass = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqEventRewardResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _eventID);  
		public ReqEventRewardResetDelegate ReqEventRewardReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _eventID)
		{ 
			return false;
		};
		public delegate bool ReqEventRewardTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardReq _pkt);  
		public ReqEventRewardTakeDelegate ReqEventRewardTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqEventLgnRewardTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEvtLgnRwdReq _pkt);  
		public ReqEventLgnRewardTakeDelegate ReqEventLgnRewardTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEvtLgnRwdReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetTutorialValDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tutoVal);  
		public ReqSetTutorialValDelegate ReqSetTutorialVal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tutoVal)
		{ 
			return false;
		};
		public delegate bool ReqSetTutorialFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _tutoFlag);  
		public ReqSetTutorialFlagDelegate ReqSetTutorialFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _tutoFlag)
		{ 
			return false;
		};
		public delegate bool ReqAddCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _charTID);  
		public ReqAddCharacterDelegate ReqAddCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _charTID)
		{ 
			return false;
		};
		public delegate bool ReqChangePreferenceNumDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt);  
		public ReqChangePreferenceNumDelegate ReqChangePreferenceNum = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqChangeMainCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt);  
		public ReqChangeMainCharDelegate ReqChangeMainChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqGradeUpCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _cuid);  
		public ReqGradeUpCharDelegate ReqGradeUpChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _cuid)
		{ 
			return false;
		};
		public delegate bool ReqSetMainCostumeCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSetMainCostumeReq _pkt);  
		public ReqSetMainCostumeCharDelegate ReqSetMainCostumeChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSetMainCostumeReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRandomCostumeDyeingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _costumeID);  
		public ReqRandomCostumeDyeingDelegate ReqRandomCostumeDyeing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _costumeID)
		{ 
			return false;
		};
		public delegate bool ReqSetCostumeDyeingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSetCostumeDyeingReq _pkt);  
		public ReqSetCostumeDyeingDelegate ReqSetCostumeDyeing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSetCostumeDyeingReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCostumeDyeingLockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostumeDyeingLock _pkt);  
		public ReqCostumeDyeingLockDelegate ReqCostumeDyeingLock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostumeDyeingLock _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserCostumeColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _costumeID);  
		public ReqUserCostumeColorDelegate ReqUserCostumeColor = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _costumeID)
		{ 
			return false;
		};
		public delegate bool ReqEquipWeaponCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharEquipWeapon _pkt);  
		public ReqEquipWeaponCharDelegate ReqEquipWeaponChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharEquipWeapon _pkt)
		{ 
			return false;
		};
		public delegate bool ReqApplySkillInCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSlotSkill _pkt);  
		public ReqApplySkillInCharDelegate ReqApplySkillInChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSlotSkill _pkt)
		{ 
			return false;
		};
		public delegate bool ReqLvUpSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSkillLvUpReq _pkt);  
		public ReqLvUpSkillDelegate ReqLvUpSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSkillLvUpReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqLvUpUserSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklLvUpReq _pkt);  
		public ReqLvUpUserSkillDelegate ReqLvUpUserSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklLvUpReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqResetUserSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqResetUserSkillDelegate ReqResetUserSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqGivePresentCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGivePresentCharReq _pkt);  
		public ReqGivePresentCharDelegate ReqGivePresentChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGivePresentCharReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqResetSecretCntCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt);  
		public ReqResetSecretCntCharDelegate ReqResetSecretCntChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRaidHPRestoreDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRestoreHPReq _pkt);  
		public ReqRaidHPRestoreDelegate ReqRaidHPRestore = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRestoreHPReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStageStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameStartReq _pkt);  
		public ReqStageStartDelegate ReqStageStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameStartReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStageEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameResultReq _pkt);  
		public ReqStageEndDelegate ReqStageEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameResultReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStageEndFailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameEndFail _pkt);  
		public ReqStageEndFailDelegate ReqStageEndFail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameEndFail _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStageContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqStageContinueDelegate ReqStageContinue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqRaidStageDropDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStageDrop _pkt);  
		public ReqRaidStageDropDelegate ReqRaidStageDrop = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStageDrop _pkt)
		{ 
			return false;
		};
		public delegate bool ReqBookNewConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookNewConfirm _pkt);  
		public ReqBookNewConfirmDelegate ReqBookNewConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookNewConfirm _pkt)
		{ 
			return false;
		};
		public delegate bool ReqTimeAtkRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankingHeader _pkt);  
		public ReqTimeAtkRankingListDelegate ReqTimeAtkRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankingHeader _pkt)
		{ 
			return false;
		};
		public delegate bool ReqTimeAtkRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankerDetailReq _pkt);  
		public ReqTimeAtkRankerDetailDelegate ReqTimeAtkRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankerDetailReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqInitRaidSeasonDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqInitRaidSeasonDataDelegate ReqInitRaidSeasonData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqRaidRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankingHeader _pkt);  
		public ReqRaidRankingListDelegate ReqRaidRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankingHeader _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRaidRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailReq _pkt);  
		public ReqRaidRankerDetailDelegate ReqRaidRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRaidFirstRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankingHeader _pkt);  
		public ReqRaidFirstRankingListDelegate ReqRaidFirstRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankingHeader _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRaidFirstRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailReq _pkt);  
		public ReqRaidFirstRankerDetailDelegate ReqRaidFirstRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetRaidTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRaidTeam _pkt);  
		public ReqSetRaidTeamDelegate ReqSetRaidTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRaidTeam _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaSeasonPlayDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqArenaSeasonPlayDelegate ReqArenaSeasonPlay = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqSetArenaTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt);  
		public ReqSetArenaTeamDelegate ReqSetArenaTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameStartReq _pkt);  
		public ReqArenaGameStartDelegate ReqArenaGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameStartReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameEndReq _pkt);  
		public ReqArenaGameEndDelegate ReqArenaGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameEndReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaEnemySearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqArenaEnemySearchDelegate ReqArenaEnemySearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqArenaRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _updateTM);  
		public ReqArenaRankingListDelegate ReqArenaRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _updateTM)
		{ 
			return false;
		};
		public delegate bool ReqArenaRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uuid);  
		public ReqArenaRankerDetailDelegate ReqArenaRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uuid)
		{ 
			return false;
		};
		public delegate bool ReqSetArenaTowerTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt);  
		public ReqSetArenaTowerTeamDelegate ReqSetArenaTowerTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaTowerGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameStartReq _pkt);  
		public ReqArenaTowerGameStartDelegate ReqArenaTowerGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameStartReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqArenaTowerGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameEndReq _pkt);  
		public ReqArenaTowerGameEndDelegate ReqArenaTowerGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameEndReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUnexpectedPackageDailyRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackageDailyRewardReq _pkt);  
		public ReqUnexpectedPackageDailyRewardDelegate ReqUnexpectedPackageDailyReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackageDailyRewardReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCharLvUnexpectedPackageHardOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _cuid);  
		public ReqCharLvUnexpectedPackageHardOpenDelegate ReqCharLvUnexpectedPackageHardOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _cuid)
		{ 
			return false;
		};
		public delegate bool ReqAccountDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqAccountDeleteDelegate ReqAccountDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqGetUserPresetListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt);  
		public ReqGetUserPresetListDelegate ReqGetUserPresetList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAddOrUpdateUserPresetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktAddOrUpdatePreset _pkt);  
		public ReqAddOrUpdateUserPresetDelegate ReqAddOrUpdateUserPreset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktAddOrUpdatePreset _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserPresetLoadDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt);  
		public ReqUserPresetLoadDelegate ReqUserPresetLoad = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserPresetChangeNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt);  
		public ReqUserPresetChangeNameDelegate ReqUserPresetChangeName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPresetCommon _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleOpenReq _pkt);  
		public ReqCircleOpenDelegate ReqCircleOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleOpenReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSuggestCircleListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _lang);  
		public ReqSuggestCircleListDelegate ReqSuggestCircleList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _lang)
		{ 
			return false;
		};
		public delegate bool ReqCircleJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleJoinReq _pkt);  
		public ReqCircleJoinDelegate ReqCircleJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleJoinReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleJoinCancelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _circleID);  
		public ReqCircleJoinCancelDelegate ReqCircleJoinCancel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _circleID)
		{ 
			return false;
		};
		public delegate bool ReqCircleLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleLobbyInfoDelegate ReqCircleLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCircleWithdrawalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleWithdrawalDelegate ReqCircleWithdrawal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCircleDisperseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleDisperseDelegate ReqCircleDisperse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqGetCircleUserListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqGetCircleUserListDelegate ReqGetCircleUserList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeStateJoinWaitUserDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoChangeStateJoinWaitUser _pkt);  
		public ReqCircleChangeStateJoinWaitUserDelegate ReqCircleChangeStateJoinWaitUser = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoChangeStateJoinWaitUser _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleUserKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uuid);  
		public ReqCircleUserKickDelegate ReqCircleUserKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uuid)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeAuthLevelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeAuthority _pkt);  
		public ReqCircleChangeAuthLevelDelegate ReqCircleChangeAuthLevel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeAuthority _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeMarkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleMarkSet _pkt);  
		public ReqCircleChangeMarkDelegate ReqCircleChangeMark = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleMarkSet _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeName _pkt);  
		public ReqCircleChangeNameDelegate ReqCircleChangeName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeName _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeCommentDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public ReqCircleChangeCommentDelegate ReqCircleChangeComment = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeMainLanguageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _changeLang);  
		public ReqCircleChangeMainLanguageDelegate ReqCircleChangeMainLanguage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _changeLang)
		{ 
			return false;
		};
		public delegate bool ReqCircleChangeSuggestAnotherLangOptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool _state);  
		public ReqCircleChangeSuggestAnotherLangOptDelegate ReqCircleChangeSuggestAnotherLangOpt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool _state)
		{ 
			return false;
		};
		public delegate bool ReqCircleAttendanceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleAttendanceDelegate ReqCircleAttendance = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCircleBuyMarkItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid);  
		public ReqCircleBuyMarkItemDelegate ReqCircleBuyMarkItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid)
		{ 
			return false;
		};
		public delegate bool ReqCircleChatSendDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat.Piece _pkt);  
		public ReqCircleChatSendDelegate ReqCircleChatSend = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleGetMarkListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleGetMarkListDelegate ReqCircleGetMarkList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCircleSearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleSearch _pkt);  
		public ReqCircleSearchDelegate ReqCircleSearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleSearch _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCircleChatListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCircleChatListDelegate ReqCircleChatList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReqPing:
            ProcessReceivedMessage_ReqPing(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLogOnCreditKey:
            ProcessReceivedMessage_ReqLogOnCreditKey(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLogOut:
            ProcessReceivedMessage_ReqLogOut(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetTotlaRelocateCntToNotComplete:
            ProcessReceivedMessage_ReqGetTotlaRelocateCntToNotComplete(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRelocateUserInfoSet:
            ProcessReceivedMessage_ReqRelocateUserInfoSet(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRelocateUserComplate:
            ProcessReceivedMessage_ReqRelocateUserComplate(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRefrashUserInfo:
            ProcessReceivedMessage_ReqRefrashUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqReConnectUserInfo:
            ProcessReceivedMessage_ReqReConnectUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountCode:
            ProcessReceivedMessage_ReqAccountCode(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountSetPassword:
            ProcessReceivedMessage_ReqAccountSetPassword(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountCodeReward:
            ProcessReceivedMessage_ReqAccountCodeReward(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountLinkReward:
            ProcessReceivedMessage_ReqAccountLinkReward(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLinkAccountList:
            ProcessReceivedMessage_ReqLinkAccountList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAddLinkAccountAuth:
            ProcessReceivedMessage_ReqAddLinkAccountAuth(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetUserInfoFromAccountLink:
            ProcessReceivedMessage_ReqGetUserInfoFromAccountLink(__msg, pa, hostTag, remote);
            break;
        case Common.ReqPushNotifiTokenSet:
            ProcessReceivedMessage_ReqPushNotifiTokenSet(__msg, pa, hostTag, remote);
            break;
        case Common.ReqReflashLoginBonus:
            ProcessReceivedMessage_ReqReflashLoginBonus(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardTakeAchieve:
            ProcessReceivedMessage_ReqRewardTakeAchieve(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardTakeAchieveEvent:
            ProcessReceivedMessage_ReqRewardTakeAchieveEvent(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardDailyMission:
            ProcessReceivedMessage_ReqRewardDailyMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardWeekMission:
            ProcessReceivedMessage_ReqRewardWeekMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardInfluMission:
            ProcessReceivedMessage_ReqRewardInfluMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUpdateGllaMission:
            ProcessReceivedMessage_ReqUpdateGllaMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardGllaMission:
            ProcessReceivedMessage_ReqRewardGllaMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardPassMission:
            ProcessReceivedMessage_ReqRewardPassMission(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRewardPass:
            ProcessReceivedMessage_ReqRewardPass(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEventRewardReset:
            ProcessReceivedMessage_ReqEventRewardReset(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEventRewardTake:
            ProcessReceivedMessage_ReqEventRewardTake(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEventLgnRewardTake:
            ProcessReceivedMessage_ReqEventLgnRewardTake(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetTutorialVal:
            ProcessReceivedMessage_ReqSetTutorialVal(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetTutorialFlag:
            ProcessReceivedMessage_ReqSetTutorialFlag(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAddCharacter:
            ProcessReceivedMessage_ReqAddCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.ReqChangePreferenceNum:
            ProcessReceivedMessage_ReqChangePreferenceNum(__msg, pa, hostTag, remote);
            break;
        case Common.ReqChangeMainChar:
            ProcessReceivedMessage_ReqChangeMainChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGradeUpChar:
            ProcessReceivedMessage_ReqGradeUpChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetMainCostumeChar:
            ProcessReceivedMessage_ReqSetMainCostumeChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRandomCostumeDyeing:
            ProcessReceivedMessage_ReqRandomCostumeDyeing(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetCostumeDyeing:
            ProcessReceivedMessage_ReqSetCostumeDyeing(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCostumeDyeingLock:
            ProcessReceivedMessage_ReqCostumeDyeingLock(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserCostumeColor:
            ProcessReceivedMessage_ReqUserCostumeColor(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEquipWeaponChar:
            ProcessReceivedMessage_ReqEquipWeaponChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplySkillInChar:
            ProcessReceivedMessage_ReqApplySkillInChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLvUpSkill:
            ProcessReceivedMessage_ReqLvUpSkill(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLvUpUserSkill:
            ProcessReceivedMessage_ReqLvUpUserSkill(__msg, pa, hostTag, remote);
            break;
        case Common.ReqResetUserSkill:
            ProcessReceivedMessage_ReqResetUserSkill(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGivePresentChar:
            ProcessReceivedMessage_ReqGivePresentChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqResetSecretCntChar:
            ProcessReceivedMessage_ReqResetSecretCntChar(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidHPRestore:
            ProcessReceivedMessage_ReqRaidHPRestore(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStageStart:
            ProcessReceivedMessage_ReqStageStart(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStageEnd:
            ProcessReceivedMessage_ReqStageEnd(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStageEndFail:
            ProcessReceivedMessage_ReqStageEndFail(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStageContinue:
            ProcessReceivedMessage_ReqStageContinue(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidStageDrop:
            ProcessReceivedMessage_ReqRaidStageDrop(__msg, pa, hostTag, remote);
            break;
        case Common.ReqBookNewConfirm:
            ProcessReceivedMessage_ReqBookNewConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.ReqTimeAtkRankingList:
            ProcessReceivedMessage_ReqTimeAtkRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqTimeAtkRankerDetail:
            ProcessReceivedMessage_ReqTimeAtkRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.ReqInitRaidSeasonData:
            ProcessReceivedMessage_ReqInitRaidSeasonData(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidRankingList:
            ProcessReceivedMessage_ReqRaidRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidRankerDetail:
            ProcessReceivedMessage_ReqRaidRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidFirstRankingList:
            ProcessReceivedMessage_ReqRaidFirstRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidFirstRankerDetail:
            ProcessReceivedMessage_ReqRaidFirstRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetRaidTeam:
            ProcessReceivedMessage_ReqSetRaidTeam(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaSeasonPlay:
            ProcessReceivedMessage_ReqArenaSeasonPlay(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetArenaTeam:
            ProcessReceivedMessage_ReqSetArenaTeam(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaGameStart:
            ProcessReceivedMessage_ReqArenaGameStart(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaGameEnd:
            ProcessReceivedMessage_ReqArenaGameEnd(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaEnemySearch:
            ProcessReceivedMessage_ReqArenaEnemySearch(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaRankingList:
            ProcessReceivedMessage_ReqArenaRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaRankerDetail:
            ProcessReceivedMessage_ReqArenaRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetArenaTowerTeam:
            ProcessReceivedMessage_ReqSetArenaTowerTeam(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaTowerGameStart:
            ProcessReceivedMessage_ReqArenaTowerGameStart(__msg, pa, hostTag, remote);
            break;
        case Common.ReqArenaTowerGameEnd:
            ProcessReceivedMessage_ReqArenaTowerGameEnd(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUnexpectedPackageDailyReward:
            ProcessReceivedMessage_ReqUnexpectedPackageDailyReward(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCharLvUnexpectedPackageHardOpen:
            ProcessReceivedMessage_ReqCharLvUnexpectedPackageHardOpen(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountDelete:
            ProcessReceivedMessage_ReqAccountDelete(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetUserPresetList:
            ProcessReceivedMessage_ReqGetUserPresetList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAddOrUpdateUserPreset:
            ProcessReceivedMessage_ReqAddOrUpdateUserPreset(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserPresetLoad:
            ProcessReceivedMessage_ReqUserPresetLoad(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserPresetChangeName:
            ProcessReceivedMessage_ReqUserPresetChangeName(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleOpen:
            ProcessReceivedMessage_ReqCircleOpen(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSuggestCircleList:
            ProcessReceivedMessage_ReqSuggestCircleList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleJoin:
            ProcessReceivedMessage_ReqCircleJoin(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleJoinCancel:
            ProcessReceivedMessage_ReqCircleJoinCancel(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleLobbyInfo:
            ProcessReceivedMessage_ReqCircleLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleWithdrawal:
            ProcessReceivedMessage_ReqCircleWithdrawal(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleDisperse:
            ProcessReceivedMessage_ReqCircleDisperse(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetCircleUserList:
            ProcessReceivedMessage_ReqGetCircleUserList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeStateJoinWaitUser:
            ProcessReceivedMessage_ReqCircleChangeStateJoinWaitUser(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleUserKick:
            ProcessReceivedMessage_ReqCircleUserKick(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeAuthLevel:
            ProcessReceivedMessage_ReqCircleChangeAuthLevel(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeMark:
            ProcessReceivedMessage_ReqCircleChangeMark(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeName:
            ProcessReceivedMessage_ReqCircleChangeName(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeComment:
            ProcessReceivedMessage_ReqCircleChangeComment(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeMainLanguage:
            ProcessReceivedMessage_ReqCircleChangeMainLanguage(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChangeSuggestAnotherLangOpt:
            ProcessReceivedMessage_ReqCircleChangeSuggestAnotherLangOpt(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleAttendance:
            ProcessReceivedMessage_ReqCircleAttendance(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleBuyMarkItem:
            ProcessReceivedMessage_ReqCircleBuyMarkItem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChatSend:
            ProcessReceivedMessage_ReqCircleChatSend(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleGetMarkList:
            ProcessReceivedMessage_ReqCircleGetMarkList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleSearch:
            ProcessReceivedMessage_ReqCircleSearch(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCircleChatList:
            ProcessReceivedMessage_ReqCircleChatList(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReqPing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqPing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqPing, RmiName_ReqPing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqPing;
        summary.rmiName = RmiName_ReqPing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqPing (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqPing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqPing;
        summary.rmiName = RmiName_ReqPing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLogOnCreditKey(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Guid _creditKey; PN_MarshalerEx.Read(__msg,out _creditKey);	
core.PostCheckReadMessage(__msg, RmiName_ReqLogOnCreditKey);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_creditKey.ToString()+",";
        NotifyCallFromStub(Common.ReqLogOnCreditKey, RmiName_ReqLogOnCreditKey,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLogOnCreditKey;
        summary.rmiName = RmiName_ReqLogOnCreditKey;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLogOnCreditKey (remote,ctx , _creditKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLogOnCreditKey);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLogOnCreditKey;
        summary.rmiName = RmiName_ReqLogOnCreditKey;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLogOut(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqLogOut);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqLogOut, RmiName_ReqLogOut,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLogOut;
        summary.rmiName = RmiName_ReqLogOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLogOut (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLogOut);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLogOut;
        summary.rmiName = RmiName_ReqLogOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetTotlaRelocateCntToNotComplete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqGetTotlaRelocateCntToNotComplete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqGetTotlaRelocateCntToNotComplete, RmiName_ReqGetTotlaRelocateCntToNotComplete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetTotlaRelocateCntToNotComplete;
        summary.rmiName = RmiName_ReqGetTotlaRelocateCntToNotComplete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetTotlaRelocateCntToNotComplete (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetTotlaRelocateCntToNotComplete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetTotlaRelocateCntToNotComplete;
        summary.rmiName = RmiName_ReqGetTotlaRelocateCntToNotComplete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRelocateUserInfoSet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRelocateUser _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRelocateUserInfoSet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRelocateUserInfoSet, RmiName_ReqRelocateUserInfoSet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRelocateUserInfoSet;
        summary.rmiName = RmiName_ReqRelocateUserInfoSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRelocateUserInfoSet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRelocateUserInfoSet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRelocateUserInfoSet;
        summary.rmiName = RmiName_ReqRelocateUserInfoSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRelocateUserComplate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRelocateUser _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRelocateUserComplate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRelocateUserComplate, RmiName_ReqRelocateUserComplate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRelocateUserComplate;
        summary.rmiName = RmiName_ReqRelocateUserComplate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRelocateUserComplate (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRelocateUserComplate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRelocateUserComplate;
        summary.rmiName = RmiName_ReqRelocateUserComplate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRefrashUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqRefrashUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqRefrashUserInfo, RmiName_ReqRefrashUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRefrashUserInfo;
        summary.rmiName = RmiName_ReqRefrashUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRefrashUserInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRefrashUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRefrashUserInfo;
        summary.rmiName = RmiName_ReqRefrashUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqReConnectUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoReconnectUserInfoReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqReConnectUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqReConnectUserInfo, RmiName_ReqReConnectUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqReConnectUserInfo;
        summary.rmiName = RmiName_ReqReConnectUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqReConnectUserInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqReConnectUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqReConnectUserInfo;
        summary.rmiName = RmiName_ReqReConnectUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountCode(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqAccountCode);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqAccountCode, RmiName_ReqAccountCode,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountCode;
        summary.rmiName = RmiName_ReqAccountCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountCode (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountCode);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountCode;
        summary.rmiName = RmiName_ReqAccountCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountSetPassword(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAccountSetPassword);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqAccountSetPassword, RmiName_ReqAccountSetPassword,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountSetPassword;
        summary.rmiName = RmiName_ReqAccountSetPassword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountSetPassword (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountSetPassword);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountSetPassword;
        summary.rmiName = RmiName_ReqAccountSetPassword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountCodeReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqAccountCodeReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqAccountCodeReward, RmiName_ReqAccountCodeReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountCodeReward;
        summary.rmiName = RmiName_ReqAccountCodeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountCodeReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountCodeReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountCodeReward;
        summary.rmiName = RmiName_ReqAccountCodeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountLinkReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqAccountLinkReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqAccountLinkReward, RmiName_ReqAccountLinkReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountLinkReward;
        summary.rmiName = RmiName_ReqAccountLinkReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountLinkReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountLinkReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountLinkReward;
        summary.rmiName = RmiName_ReqAccountLinkReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLinkAccountList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqLinkAccountList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqLinkAccountList, RmiName_ReqLinkAccountList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLinkAccountList;
        summary.rmiName = RmiName_ReqLinkAccountList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLinkAccountList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLinkAccountList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLinkAccountList;
        summary.rmiName = RmiName_ReqLinkAccountList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAddLinkAccountAuth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAccountLinkInfo _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAddLinkAccountAuth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqAddLinkAccountAuth, RmiName_ReqAddLinkAccountAuth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAddLinkAccountAuth;
        summary.rmiName = RmiName_ReqAddLinkAccountAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAddLinkAccountAuth (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAddLinkAccountAuth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAddLinkAccountAuth;
        summary.rmiName = RmiName_ReqAddLinkAccountAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetUserInfoFromAccountLink(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserInfoFromLinkReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqGetUserInfoFromAccountLink);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqGetUserInfoFromAccountLink, RmiName_ReqGetUserInfoFromAccountLink,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetUserInfoFromAccountLink;
        summary.rmiName = RmiName_ReqGetUserInfoFromAccountLink;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetUserInfoFromAccountLink (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetUserInfoFromAccountLink);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetUserInfoFromAccountLink;
        summary.rmiName = RmiName_ReqGetUserInfoFromAccountLink;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqPushNotifiTokenSet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPushNotiSetToken _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqPushNotifiTokenSet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqPushNotifiTokenSet, RmiName_ReqPushNotifiTokenSet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqPushNotifiTokenSet;
        summary.rmiName = RmiName_ReqPushNotifiTokenSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqPushNotifiTokenSet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqPushNotifiTokenSet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqPushNotifiTokenSet;
        summary.rmiName = RmiName_ReqPushNotifiTokenSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqReflashLoginBonus(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqReflashLoginBonus);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqReflashLoginBonus, RmiName_ReqReflashLoginBonus,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqReflashLoginBonus;
        summary.rmiName = RmiName_ReqReflashLoginBonus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqReflashLoginBonus (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqReflashLoginBonus);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqReflashLoginBonus;
        summary.rmiName = RmiName_ReqReflashLoginBonus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardTakeAchieve(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardTakeAchieve);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardTakeAchieve, RmiName_ReqRewardTakeAchieve,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardTakeAchieve;
        summary.rmiName = RmiName_ReqRewardTakeAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardTakeAchieve (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardTakeAchieve);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardTakeAchieve;
        summary.rmiName = RmiName_ReqRewardTakeAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardTakeAchieveEvent(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardTakeAchieveEvent);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardTakeAchieveEvent, RmiName_ReqRewardTakeAchieveEvent,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardTakeAchieveEvent;
        summary.rmiName = RmiName_ReqRewardTakeAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardTakeAchieveEvent (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardTakeAchieveEvent);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardTakeAchieveEvent;
        summary.rmiName = RmiName_ReqRewardTakeAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardDailyMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdDailyMissionReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardDailyMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardDailyMission, RmiName_ReqRewardDailyMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardDailyMission;
        summary.rmiName = RmiName_ReqRewardDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardDailyMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardDailyMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardDailyMission;
        summary.rmiName = RmiName_ReqRewardDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardWeekMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoComRwd _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardWeekMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardWeekMission, RmiName_ReqRewardWeekMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardWeekMission;
        summary.rmiName = RmiName_ReqRewardWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardWeekMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardWeekMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardWeekMission;
        summary.rmiName = RmiName_ReqRewardWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardInfluMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoComRwd _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardInfluMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardInfluMission, RmiName_ReqRewardInfluMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardInfluMission;
        summary.rmiName = RmiName_ReqRewardInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardInfluMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardInfluMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardInfluMission;
        summary.rmiName = RmiName_ReqRewardInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUpdateGllaMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUpdateGllaMission _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUpdateGllaMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUpdateGllaMission, RmiName_ReqUpdateGllaMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUpdateGllaMission;
        summary.rmiName = RmiName_ReqUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUpdateGllaMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUpdateGllaMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUpdateGllaMission;
        summary.rmiName = RmiName_ReqUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardGllaMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdGllaMission _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardGllaMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardGllaMission, RmiName_ReqRewardGllaMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardGllaMission;
        summary.rmiName = RmiName_ReqRewardGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardGllaMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardGllaMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardGllaMission;
        summary.rmiName = RmiName_ReqRewardGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardPassMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdPassMission _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardPassMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardPassMission, RmiName_ReqRewardPassMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardPassMission;
        summary.rmiName = RmiName_ReqRewardPassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardPassMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardPassMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardPassMission;
        summary.rmiName = RmiName_ReqRewardPassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRewardPass(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdPassReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRewardPass);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRewardPass, RmiName_ReqRewardPass,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRewardPass;
        summary.rmiName = RmiName_ReqRewardPass;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRewardPass (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRewardPass);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRewardPass;
        summary.rmiName = RmiName_ReqRewardPass;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEventRewardReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _eventID; PN_MarshalerEx.Read(__msg,out _eventID);	
core.PostCheckReadMessage(__msg, RmiName_ReqEventRewardReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_eventID.ToString()+",";
        NotifyCallFromStub(Common.ReqEventRewardReset, RmiName_ReqEventRewardReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEventRewardReset;
        summary.rmiName = RmiName_ReqEventRewardReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEventRewardReset (remote,ctx , _eventID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEventRewardReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEventRewardReset;
        summary.rmiName = RmiName_ReqEventRewardReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEventRewardTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEventRewardReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEventRewardTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEventRewardTake, RmiName_ReqEventRewardTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEventRewardTake;
        summary.rmiName = RmiName_ReqEventRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEventRewardTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEventRewardTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEventRewardTake;
        summary.rmiName = RmiName_ReqEventRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEventLgnRewardTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEvtLgnRwdReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEventLgnRewardTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEventLgnRewardTake, RmiName_ReqEventLgnRewardTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEventLgnRewardTake;
        summary.rmiName = RmiName_ReqEventLgnRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEventLgnRewardTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEventLgnRewardTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEventLgnRewardTake;
        summary.rmiName = RmiName_ReqEventLgnRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetTutorialVal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _tutoVal; PN_MarshalerEx.Read(__msg,out _tutoVal);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetTutorialVal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tutoVal.ToString()+",";
        NotifyCallFromStub(Common.ReqSetTutorialVal, RmiName_ReqSetTutorialVal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetTutorialVal;
        summary.rmiName = RmiName_ReqSetTutorialVal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetTutorialVal (remote,ctx , _tutoVal );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetTutorialVal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetTutorialVal;
        summary.rmiName = RmiName_ReqSetTutorialVal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetTutorialFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _tutoFlag; PN_MarshalerEx.Read(__msg,out _tutoFlag);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetTutorialFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tutoFlag.ToString()+",";
        NotifyCallFromStub(Common.ReqSetTutorialFlag, RmiName_ReqSetTutorialFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetTutorialFlag;
        summary.rmiName = RmiName_ReqSetTutorialFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetTutorialFlag (remote,ctx , _tutoFlag );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetTutorialFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetTutorialFlag;
        summary.rmiName = RmiName_ReqSetTutorialFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAddCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _charTID; PN_MarshalerEx.Read(__msg,out _charTID);	
core.PostCheckReadMessage(__msg, RmiName_ReqAddCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_charTID.ToString()+",";
        NotifyCallFromStub(Common.ReqAddCharacter, RmiName_ReqAddCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAddCharacter;
        summary.rmiName = RmiName_ReqAddCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAddCharacter (remote,ctx , _charTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAddCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAddCharacter;
        summary.rmiName = RmiName_ReqAddCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqChangePreferenceNum(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqChangePreferenceNum);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqChangePreferenceNum, RmiName_ReqChangePreferenceNum,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqChangePreferenceNum;
        summary.rmiName = RmiName_ReqChangePreferenceNum;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqChangePreferenceNum (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqChangePreferenceNum);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqChangePreferenceNum;
        summary.rmiName = RmiName_ReqChangePreferenceNum;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqChangeMainChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqChangeMainChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqChangeMainChar, RmiName_ReqChangeMainChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqChangeMainChar;
        summary.rmiName = RmiName_ReqChangeMainChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqChangeMainChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqChangeMainChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqChangeMainChar;
        summary.rmiName = RmiName_ReqChangeMainChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGradeUpChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _cuid; PN_MarshalerEx.Read(__msg,out _cuid);	
core.PostCheckReadMessage(__msg, RmiName_ReqGradeUpChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_cuid.ToString()+",";
        NotifyCallFromStub(Common.ReqGradeUpChar, RmiName_ReqGradeUpChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGradeUpChar;
        summary.rmiName = RmiName_ReqGradeUpChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGradeUpChar (remote,ctx , _cuid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGradeUpChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGradeUpChar;
        summary.rmiName = RmiName_ReqGradeUpChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetMainCostumeChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharSetMainCostumeReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetMainCostumeChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetMainCostumeChar, RmiName_ReqSetMainCostumeChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetMainCostumeChar;
        summary.rmiName = RmiName_ReqSetMainCostumeChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetMainCostumeChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetMainCostumeChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetMainCostumeChar;
        summary.rmiName = RmiName_ReqSetMainCostumeChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRandomCostumeDyeing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _costumeID; PN_MarshalerEx.Read(__msg,out _costumeID);	
core.PostCheckReadMessage(__msg, RmiName_ReqRandomCostumeDyeing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_costumeID.ToString()+",";
        NotifyCallFromStub(Common.ReqRandomCostumeDyeing, RmiName_ReqRandomCostumeDyeing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRandomCostumeDyeing;
        summary.rmiName = RmiName_ReqRandomCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRandomCostumeDyeing (remote,ctx , _costumeID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRandomCostumeDyeing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRandomCostumeDyeing;
        summary.rmiName = RmiName_ReqRandomCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetCostumeDyeing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoSetCostumeDyeingReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetCostumeDyeing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetCostumeDyeing, RmiName_ReqSetCostumeDyeing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetCostumeDyeing;
        summary.rmiName = RmiName_ReqSetCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetCostumeDyeing (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetCostumeDyeing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetCostumeDyeing;
        summary.rmiName = RmiName_ReqSetCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCostumeDyeingLock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCostumeDyeingLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCostumeDyeingLock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCostumeDyeingLock, RmiName_ReqCostumeDyeingLock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCostumeDyeingLock;
        summary.rmiName = RmiName_ReqCostumeDyeingLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCostumeDyeingLock (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCostumeDyeingLock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCostumeDyeingLock;
        summary.rmiName = RmiName_ReqCostumeDyeingLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserCostumeColor(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _costumeID; PN_MarshalerEx.Read(__msg,out _costumeID);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserCostumeColor);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_costumeID.ToString()+",";
        NotifyCallFromStub(Common.ReqUserCostumeColor, RmiName_ReqUserCostumeColor,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserCostumeColor;
        summary.rmiName = RmiName_ReqUserCostumeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserCostumeColor (remote,ctx , _costumeID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserCostumeColor);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserCostumeColor;
        summary.rmiName = RmiName_ReqUserCostumeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEquipWeaponChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharEquipWeapon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEquipWeaponChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEquipWeaponChar, RmiName_ReqEquipWeaponChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEquipWeaponChar;
        summary.rmiName = RmiName_ReqEquipWeaponChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEquipWeaponChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEquipWeaponChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEquipWeaponChar;
        summary.rmiName = RmiName_ReqEquipWeaponChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplySkillInChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharSlotSkill _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplySkillInChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplySkillInChar, RmiName_ReqApplySkillInChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplySkillInChar;
        summary.rmiName = RmiName_ReqApplySkillInChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplySkillInChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplySkillInChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplySkillInChar;
        summary.rmiName = RmiName_ReqApplySkillInChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLvUpSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoSkillLvUpReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqLvUpSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqLvUpSkill, RmiName_ReqLvUpSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLvUpSkill;
        summary.rmiName = RmiName_ReqLvUpSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLvUpSkill (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLvUpSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLvUpSkill;
        summary.rmiName = RmiName_ReqLvUpSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLvUpUserSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserSklLvUpReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqLvUpUserSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqLvUpUserSkill, RmiName_ReqLvUpUserSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLvUpUserSkill;
        summary.rmiName = RmiName_ReqLvUpUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLvUpUserSkill (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLvUpUserSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLvUpUserSkill;
        summary.rmiName = RmiName_ReqLvUpUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqResetUserSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqResetUserSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqResetUserSkill, RmiName_ReqResetUserSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqResetUserSkill;
        summary.rmiName = RmiName_ReqResetUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqResetUserSkill (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqResetUserSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqResetUserSkill;
        summary.rmiName = RmiName_ReqResetUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGivePresentChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGivePresentCharReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqGivePresentChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqGivePresentChar, RmiName_ReqGivePresentChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGivePresentChar;
        summary.rmiName = RmiName_ReqGivePresentChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGivePresentChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGivePresentChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGivePresentChar;
        summary.rmiName = RmiName_ReqGivePresentChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqResetSecretCntChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqResetSecretCntChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqResetSecretCntChar, RmiName_ReqResetSecretCntChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqResetSecretCntChar;
        summary.rmiName = RmiName_ReqResetSecretCntChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqResetSecretCntChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqResetSecretCntChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqResetSecretCntChar;
        summary.rmiName = RmiName_ReqResetSecretCntChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidHPRestore(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRestoreHPReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidHPRestore);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidHPRestore, RmiName_ReqRaidHPRestore,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidHPRestore;
        summary.rmiName = RmiName_ReqRaidHPRestore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidHPRestore (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidHPRestore);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidHPRestore;
        summary.rmiName = RmiName_ReqRaidHPRestore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStageStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameStartReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqStageStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqStageStart, RmiName_ReqStageStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStageStart;
        summary.rmiName = RmiName_ReqStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStageStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStageStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStageStart;
        summary.rmiName = RmiName_ReqStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStageEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameResultReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqStageEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqStageEnd, RmiName_ReqStageEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStageEnd;
        summary.rmiName = RmiName_ReqStageEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStageEnd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStageEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStageEnd;
        summary.rmiName = RmiName_ReqStageEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStageEndFail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameEndFail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqStageEndFail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqStageEndFail, RmiName_ReqStageEndFail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStageEndFail;
        summary.rmiName = RmiName_ReqStageEndFail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStageEndFail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStageEndFail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStageEndFail;
        summary.rmiName = RmiName_ReqStageEndFail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStageContinue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqStageContinue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqStageContinue, RmiName_ReqStageContinue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStageContinue;
        summary.rmiName = RmiName_ReqStageContinue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStageContinue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStageContinue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStageContinue;
        summary.rmiName = RmiName_ReqStageContinue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidStageDrop(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidStageDrop _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidStageDrop);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidStageDrop, RmiName_ReqRaidStageDrop,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidStageDrop;
        summary.rmiName = RmiName_ReqRaidStageDrop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidStageDrop (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidStageDrop);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidStageDrop;
        summary.rmiName = RmiName_ReqRaidStageDrop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqBookNewConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBookNewConfirm _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqBookNewConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqBookNewConfirm, RmiName_ReqBookNewConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqBookNewConfirm;
        summary.rmiName = RmiName_ReqBookNewConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqBookNewConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqBookNewConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqBookNewConfirm;
        summary.rmiName = RmiName_ReqBookNewConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqTimeAtkRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTimeAtkRankingHeader _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqTimeAtkRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqTimeAtkRankingList, RmiName_ReqTimeAtkRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqTimeAtkRankingList;
        summary.rmiName = RmiName_ReqTimeAtkRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqTimeAtkRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqTimeAtkRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqTimeAtkRankingList;
        summary.rmiName = RmiName_ReqTimeAtkRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqTimeAtkRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTimeAtkRankerDetailReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqTimeAtkRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqTimeAtkRankerDetail, RmiName_ReqTimeAtkRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqTimeAtkRankerDetail;
        summary.rmiName = RmiName_ReqTimeAtkRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqTimeAtkRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqTimeAtkRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqTimeAtkRankerDetail;
        summary.rmiName = RmiName_ReqTimeAtkRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqInitRaidSeasonData(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqInitRaidSeasonData);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqInitRaidSeasonData, RmiName_ReqInitRaidSeasonData,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqInitRaidSeasonData;
        summary.rmiName = RmiName_ReqInitRaidSeasonData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqInitRaidSeasonData (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqInitRaidSeasonData);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqInitRaidSeasonData;
        summary.rmiName = RmiName_ReqInitRaidSeasonData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankingHeader _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidRankingList, RmiName_ReqRaidRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidRankingList;
        summary.rmiName = RmiName_ReqRaidRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidRankingList;
        summary.rmiName = RmiName_ReqRaidRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankerDetailReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidRankerDetail, RmiName_ReqRaidRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidRankerDetail;
        summary.rmiName = RmiName_ReqRaidRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidRankerDetail;
        summary.rmiName = RmiName_ReqRaidRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidFirstRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankingHeader _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidFirstRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidFirstRankingList, RmiName_ReqRaidFirstRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidFirstRankingList;
        summary.rmiName = RmiName_ReqRaidFirstRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidFirstRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidFirstRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidFirstRankingList;
        summary.rmiName = RmiName_ReqRaidFirstRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidFirstRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankerDetailReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidFirstRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidFirstRankerDetail, RmiName_ReqRaidFirstRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidFirstRankerDetail;
        summary.rmiName = RmiName_ReqRaidFirstRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidFirstRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidFirstRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidFirstRankerDetail;
        summary.rmiName = RmiName_ReqRaidFirstRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetRaidTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserRaidTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetRaidTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetRaidTeam, RmiName_ReqSetRaidTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetRaidTeam;
        summary.rmiName = RmiName_ReqSetRaidTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetRaidTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetRaidTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetRaidTeam;
        summary.rmiName = RmiName_ReqSetRaidTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaSeasonPlay(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqArenaSeasonPlay);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqArenaSeasonPlay, RmiName_ReqArenaSeasonPlay,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaSeasonPlay;
        summary.rmiName = RmiName_ReqArenaSeasonPlay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaSeasonPlay (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaSeasonPlay);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaSeasonPlay;
        summary.rmiName = RmiName_ReqArenaSeasonPlay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetArenaTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserArenaTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetArenaTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetArenaTeam, RmiName_ReqSetArenaTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetArenaTeam;
        summary.rmiName = RmiName_ReqSetArenaTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetArenaTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetArenaTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetArenaTeam;
        summary.rmiName = RmiName_ReqSetArenaTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaGameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaGameStartReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaGameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaGameStart, RmiName_ReqArenaGameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaGameStart;
        summary.rmiName = RmiName_ReqArenaGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaGameStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaGameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaGameStart;
        summary.rmiName = RmiName_ReqArenaGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaGameEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaGameEndReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaGameEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaGameEnd, RmiName_ReqArenaGameEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaGameEnd;
        summary.rmiName = RmiName_ReqArenaGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaGameEnd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaGameEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaGameEnd;
        summary.rmiName = RmiName_ReqArenaGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaEnemySearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqArenaEnemySearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqArenaEnemySearch, RmiName_ReqArenaEnemySearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaEnemySearch;
        summary.rmiName = RmiName_ReqArenaEnemySearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaEnemySearch (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaEnemySearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaEnemySearch;
        summary.rmiName = RmiName_ReqArenaEnemySearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _updateTM; PN_MarshalerEx.Read(__msg,out _updateTM);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_updateTM.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaRankingList, RmiName_ReqArenaRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaRankingList;
        summary.rmiName = RmiName_ReqArenaRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaRankingList (remote,ctx , _updateTM );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaRankingList;
        summary.rmiName = RmiName_ReqArenaRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _uuid; PN_MarshalerEx.Read(__msg,out _uuid);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_uuid.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaRankerDetail, RmiName_ReqArenaRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaRankerDetail;
        summary.rmiName = RmiName_ReqArenaRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaRankerDetail (remote,ctx , _uuid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaRankerDetail;
        summary.rmiName = RmiName_ReqArenaRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetArenaTowerTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserArenaTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetArenaTowerTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetArenaTowerTeam, RmiName_ReqSetArenaTowerTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetArenaTowerTeam;
        summary.rmiName = RmiName_ReqSetArenaTowerTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetArenaTowerTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetArenaTowerTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetArenaTowerTeam;
        summary.rmiName = RmiName_ReqSetArenaTowerTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaTowerGameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaTowerGameStartReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaTowerGameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaTowerGameStart, RmiName_ReqArenaTowerGameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaTowerGameStart;
        summary.rmiName = RmiName_ReqArenaTowerGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaTowerGameStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaTowerGameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaTowerGameStart;
        summary.rmiName = RmiName_ReqArenaTowerGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqArenaTowerGameEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaTowerGameEndReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqArenaTowerGameEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqArenaTowerGameEnd, RmiName_ReqArenaTowerGameEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqArenaTowerGameEnd;
        summary.rmiName = RmiName_ReqArenaTowerGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqArenaTowerGameEnd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqArenaTowerGameEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqArenaTowerGameEnd;
        summary.rmiName = RmiName_ReqArenaTowerGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUnexpectedPackageDailyReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUnexpectedPackageDailyRewardReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUnexpectedPackageDailyReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUnexpectedPackageDailyReward, RmiName_ReqUnexpectedPackageDailyReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUnexpectedPackageDailyReward;
        summary.rmiName = RmiName_ReqUnexpectedPackageDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUnexpectedPackageDailyReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUnexpectedPackageDailyReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUnexpectedPackageDailyReward;
        summary.rmiName = RmiName_ReqUnexpectedPackageDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCharLvUnexpectedPackageHardOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _cuid; PN_MarshalerEx.Read(__msg,out _cuid);	
core.PostCheckReadMessage(__msg, RmiName_ReqCharLvUnexpectedPackageHardOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_cuid.ToString()+",";
        NotifyCallFromStub(Common.ReqCharLvUnexpectedPackageHardOpen, RmiName_ReqCharLvUnexpectedPackageHardOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCharLvUnexpectedPackageHardOpen;
        summary.rmiName = RmiName_ReqCharLvUnexpectedPackageHardOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCharLvUnexpectedPackageHardOpen (remote,ctx , _cuid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCharLvUnexpectedPackageHardOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCharLvUnexpectedPackageHardOpen;
        summary.rmiName = RmiName_ReqCharLvUnexpectedPackageHardOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqAccountDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqAccountDelete, RmiName_ReqAccountDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountDelete;
        summary.rmiName = RmiName_ReqAccountDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountDelete (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountDelete;
        summary.rmiName = RmiName_ReqAccountDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetUserPresetList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPresetCommon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqGetUserPresetList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqGetUserPresetList, RmiName_ReqGetUserPresetList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetUserPresetList;
        summary.rmiName = RmiName_ReqGetUserPresetList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetUserPresetList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetUserPresetList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetUserPresetList;
        summary.rmiName = RmiName_ReqGetUserPresetList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAddOrUpdateUserPreset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktAddOrUpdatePreset _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAddOrUpdateUserPreset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqAddOrUpdateUserPreset, RmiName_ReqAddOrUpdateUserPreset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAddOrUpdateUserPreset;
        summary.rmiName = RmiName_ReqAddOrUpdateUserPreset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAddOrUpdateUserPreset (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAddOrUpdateUserPreset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAddOrUpdateUserPreset;
        summary.rmiName = RmiName_ReqAddOrUpdateUserPreset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserPresetLoad(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPresetCommon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserPresetLoad);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserPresetLoad, RmiName_ReqUserPresetLoad,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserPresetLoad;
        summary.rmiName = RmiName_ReqUserPresetLoad;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserPresetLoad (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserPresetLoad);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserPresetLoad;
        summary.rmiName = RmiName_ReqUserPresetLoad;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserPresetChangeName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPresetCommon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserPresetChangeName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserPresetChangeName, RmiName_ReqUserPresetChangeName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserPresetChangeName;
        summary.rmiName = RmiName_ReqUserPresetChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserPresetChangeName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserPresetChangeName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserPresetChangeName;
        summary.rmiName = RmiName_ReqUserPresetChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleOpenReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleOpen, RmiName_ReqCircleOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleOpen;
        summary.rmiName = RmiName_ReqCircleOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleOpen;
        summary.rmiName = RmiName_ReqCircleOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSuggestCircleList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        eLANGUAGE _lang; PN_MarshalerEx.Read(__msg,out _lang);	
core.PostCheckReadMessage(__msg, RmiName_ReqSuggestCircleList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_lang.ToString()+",";
        NotifyCallFromStub(Common.ReqSuggestCircleList, RmiName_ReqSuggestCircleList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSuggestCircleList;
        summary.rmiName = RmiName_ReqSuggestCircleList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSuggestCircleList (remote,ctx , _lang );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSuggestCircleList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSuggestCircleList;
        summary.rmiName = RmiName_ReqSuggestCircleList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleJoinReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleJoin, RmiName_ReqCircleJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleJoin;
        summary.rmiName = RmiName_ReqCircleJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleJoin (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleJoin;
        summary.rmiName = RmiName_ReqCircleJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleJoinCancel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _circleID; PN_MarshalerEx.Read(__msg,out _circleID);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleJoinCancel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_circleID.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleJoinCancel, RmiName_ReqCircleJoinCancel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleJoinCancel;
        summary.rmiName = RmiName_ReqCircleJoinCancel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleJoinCancel (remote,ctx , _circleID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleJoinCancel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleJoinCancel;
        summary.rmiName = RmiName_ReqCircleJoinCancel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleLobbyInfo, RmiName_ReqCircleLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleLobbyInfo;
        summary.rmiName = RmiName_ReqCircleLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleLobbyInfo;
        summary.rmiName = RmiName_ReqCircleLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleWithdrawal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleWithdrawal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleWithdrawal, RmiName_ReqCircleWithdrawal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleWithdrawal;
        summary.rmiName = RmiName_ReqCircleWithdrawal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleWithdrawal (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleWithdrawal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleWithdrawal;
        summary.rmiName = RmiName_ReqCircleWithdrawal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleDisperse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleDisperse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleDisperse, RmiName_ReqCircleDisperse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleDisperse;
        summary.rmiName = RmiName_ReqCircleDisperse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleDisperse (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleDisperse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleDisperse;
        summary.rmiName = RmiName_ReqCircleDisperse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetCircleUserList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqGetCircleUserList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqGetCircleUserList, RmiName_ReqGetCircleUserList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetCircleUserList;
        summary.rmiName = RmiName_ReqGetCircleUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetCircleUserList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetCircleUserList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetCircleUserList;
        summary.rmiName = RmiName_ReqGetCircleUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeStateJoinWaitUser(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoChangeStateJoinWaitUser _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeStateJoinWaitUser);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeStateJoinWaitUser, RmiName_ReqCircleChangeStateJoinWaitUser,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeStateJoinWaitUser;
        summary.rmiName = RmiName_ReqCircleChangeStateJoinWaitUser;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeStateJoinWaitUser (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeStateJoinWaitUser);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeStateJoinWaitUser;
        summary.rmiName = RmiName_ReqCircleChangeStateJoinWaitUser;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleUserKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _uuid; PN_MarshalerEx.Read(__msg,out _uuid);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleUserKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_uuid.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleUserKick, RmiName_ReqCircleUserKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleUserKick;
        summary.rmiName = RmiName_ReqCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleUserKick (remote,ctx , _uuid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleUserKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleUserKick;
        summary.rmiName = RmiName_ReqCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeAuthLevel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChangeAuthority _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeAuthLevel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeAuthLevel, RmiName_ReqCircleChangeAuthLevel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeAuthLevel;
        summary.rmiName = RmiName_ReqCircleChangeAuthLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeAuthLevel (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeAuthLevel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeAuthLevel;
        summary.rmiName = RmiName_ReqCircleChangeAuthLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeMark(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleMarkSet _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeMark);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeMark, RmiName_ReqCircleChangeMark,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeMark;
        summary.rmiName = RmiName_ReqCircleChangeMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeMark (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeMark);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeMark;
        summary.rmiName = RmiName_ReqCircleChangeMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChangeName _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeName, RmiName_ReqCircleChangeName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeName;
        summary.rmiName = RmiName_ReqCircleChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeName;
        summary.rmiName = RmiName_ReqCircleChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeComment(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeComment);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeComment, RmiName_ReqCircleChangeComment,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeComment;
        summary.rmiName = RmiName_ReqCircleChangeComment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeComment (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeComment);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeComment;
        summary.rmiName = RmiName_ReqCircleChangeComment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeMainLanguage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        eLANGUAGE _changeLang; PN_MarshalerEx.Read(__msg,out _changeLang);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeMainLanguage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_changeLang.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeMainLanguage, RmiName_ReqCircleChangeMainLanguage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeMainLanguage;
        summary.rmiName = RmiName_ReqCircleChangeMainLanguage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeMainLanguage (remote,ctx , _changeLang );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeMainLanguage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeMainLanguage;
        summary.rmiName = RmiName_ReqCircleChangeMainLanguage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChangeSuggestAnotherLangOpt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool _state; PN_MarshalerEx.Read(__msg,out _state);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChangeSuggestAnotherLangOpt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_state.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChangeSuggestAnotherLangOpt, RmiName_ReqCircleChangeSuggestAnotherLangOpt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChangeSuggestAnotherLangOpt;
        summary.rmiName = RmiName_ReqCircleChangeSuggestAnotherLangOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChangeSuggestAnotherLangOpt (remote,ctx , _state );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChangeSuggestAnotherLangOpt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChangeSuggestAnotherLangOpt;
        summary.rmiName = RmiName_ReqCircleChangeSuggestAnotherLangOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleAttendance(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleAttendance);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleAttendance, RmiName_ReqCircleAttendance,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleAttendance;
        summary.rmiName = RmiName_ReqCircleAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleAttendance (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleAttendance);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleAttendance;
        summary.rmiName = RmiName_ReqCircleAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleBuyMarkItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _tid; PN_MarshalerEx.Read(__msg,out _tid);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleBuyMarkItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tid.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleBuyMarkItem, RmiName_ReqCircleBuyMarkItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleBuyMarkItem;
        summary.rmiName = RmiName_ReqCircleBuyMarkItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleBuyMarkItem (remote,ctx , _tid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleBuyMarkItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleBuyMarkItem;
        summary.rmiName = RmiName_ReqCircleBuyMarkItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChatSend(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChat.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleChatSend);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleChatSend, RmiName_ReqCircleChatSend,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChatSend;
        summary.rmiName = RmiName_ReqCircleChatSend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChatSend (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChatSend);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChatSend;
        summary.rmiName = RmiName_ReqCircleChatSend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleGetMarkList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleGetMarkList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleGetMarkList, RmiName_ReqCircleGetMarkList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleGetMarkList;
        summary.rmiName = RmiName_ReqCircleGetMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleGetMarkList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleGetMarkList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleGetMarkList;
        summary.rmiName = RmiName_ReqCircleGetMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleSearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleSearch _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCircleSearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCircleSearch, RmiName_ReqCircleSearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleSearch;
        summary.rmiName = RmiName_ReqCircleSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleSearch (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleSearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleSearch;
        summary.rmiName = RmiName_ReqCircleSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCircleChatList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCircleChatList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCircleChatList, RmiName_ReqCircleChatList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCircleChatList;
        summary.rmiName = RmiName_ReqCircleChatList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCircleChatList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCircleChatList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCircleChatList;
        summary.rmiName = RmiName_ReqCircleChatList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqPing="ReqPing";
public const string RmiName_ReqLogOnCreditKey="ReqLogOnCreditKey";
public const string RmiName_ReqLogOut="ReqLogOut";
public const string RmiName_ReqGetTotlaRelocateCntToNotComplete="ReqGetTotlaRelocateCntToNotComplete";
public const string RmiName_ReqRelocateUserInfoSet="ReqRelocateUserInfoSet";
public const string RmiName_ReqRelocateUserComplate="ReqRelocateUserComplate";
public const string RmiName_ReqRefrashUserInfo="ReqRefrashUserInfo";
public const string RmiName_ReqReConnectUserInfo="ReqReConnectUserInfo";
public const string RmiName_ReqAccountCode="ReqAccountCode";
public const string RmiName_ReqAccountSetPassword="ReqAccountSetPassword";
public const string RmiName_ReqAccountCodeReward="ReqAccountCodeReward";
public const string RmiName_ReqAccountLinkReward="ReqAccountLinkReward";
public const string RmiName_ReqLinkAccountList="ReqLinkAccountList";
public const string RmiName_ReqAddLinkAccountAuth="ReqAddLinkAccountAuth";
public const string RmiName_ReqGetUserInfoFromAccountLink="ReqGetUserInfoFromAccountLink";
public const string RmiName_ReqPushNotifiTokenSet="ReqPushNotifiTokenSet";
public const string RmiName_ReqReflashLoginBonus="ReqReflashLoginBonus";
public const string RmiName_ReqRewardTakeAchieve="ReqRewardTakeAchieve";
public const string RmiName_ReqRewardTakeAchieveEvent="ReqRewardTakeAchieveEvent";
public const string RmiName_ReqRewardDailyMission="ReqRewardDailyMission";
public const string RmiName_ReqRewardWeekMission="ReqRewardWeekMission";
public const string RmiName_ReqRewardInfluMission="ReqRewardInfluMission";
public const string RmiName_ReqUpdateGllaMission="ReqUpdateGllaMission";
public const string RmiName_ReqRewardGllaMission="ReqRewardGllaMission";
public const string RmiName_ReqRewardPassMission="ReqRewardPassMission";
public const string RmiName_ReqRewardPass="ReqRewardPass";
public const string RmiName_ReqEventRewardReset="ReqEventRewardReset";
public const string RmiName_ReqEventRewardTake="ReqEventRewardTake";
public const string RmiName_ReqEventLgnRewardTake="ReqEventLgnRewardTake";
public const string RmiName_ReqSetTutorialVal="ReqSetTutorialVal";
public const string RmiName_ReqSetTutorialFlag="ReqSetTutorialFlag";
public const string RmiName_ReqAddCharacter="ReqAddCharacter";
public const string RmiName_ReqChangePreferenceNum="ReqChangePreferenceNum";
public const string RmiName_ReqChangeMainChar="ReqChangeMainChar";
public const string RmiName_ReqGradeUpChar="ReqGradeUpChar";
public const string RmiName_ReqSetMainCostumeChar="ReqSetMainCostumeChar";
public const string RmiName_ReqRandomCostumeDyeing="ReqRandomCostumeDyeing";
public const string RmiName_ReqSetCostumeDyeing="ReqSetCostumeDyeing";
public const string RmiName_ReqCostumeDyeingLock="ReqCostumeDyeingLock";
public const string RmiName_ReqUserCostumeColor="ReqUserCostumeColor";
public const string RmiName_ReqEquipWeaponChar="ReqEquipWeaponChar";
public const string RmiName_ReqApplySkillInChar="ReqApplySkillInChar";
public const string RmiName_ReqLvUpSkill="ReqLvUpSkill";
public const string RmiName_ReqLvUpUserSkill="ReqLvUpUserSkill";
public const string RmiName_ReqResetUserSkill="ReqResetUserSkill";
public const string RmiName_ReqGivePresentChar="ReqGivePresentChar";
public const string RmiName_ReqResetSecretCntChar="ReqResetSecretCntChar";
public const string RmiName_ReqRaidHPRestore="ReqRaidHPRestore";
public const string RmiName_ReqStageStart="ReqStageStart";
public const string RmiName_ReqStageEnd="ReqStageEnd";
public const string RmiName_ReqStageEndFail="ReqStageEndFail";
public const string RmiName_ReqStageContinue="ReqStageContinue";
public const string RmiName_ReqRaidStageDrop="ReqRaidStageDrop";
public const string RmiName_ReqBookNewConfirm="ReqBookNewConfirm";
public const string RmiName_ReqTimeAtkRankingList="ReqTimeAtkRankingList";
public const string RmiName_ReqTimeAtkRankerDetail="ReqTimeAtkRankerDetail";
public const string RmiName_ReqInitRaidSeasonData="ReqInitRaidSeasonData";
public const string RmiName_ReqRaidRankingList="ReqRaidRankingList";
public const string RmiName_ReqRaidRankerDetail="ReqRaidRankerDetail";
public const string RmiName_ReqRaidFirstRankingList="ReqRaidFirstRankingList";
public const string RmiName_ReqRaidFirstRankerDetail="ReqRaidFirstRankerDetail";
public const string RmiName_ReqSetRaidTeam="ReqSetRaidTeam";
public const string RmiName_ReqArenaSeasonPlay="ReqArenaSeasonPlay";
public const string RmiName_ReqSetArenaTeam="ReqSetArenaTeam";
public const string RmiName_ReqArenaGameStart="ReqArenaGameStart";
public const string RmiName_ReqArenaGameEnd="ReqArenaGameEnd";
public const string RmiName_ReqArenaEnemySearch="ReqArenaEnemySearch";
public const string RmiName_ReqArenaRankingList="ReqArenaRankingList";
public const string RmiName_ReqArenaRankerDetail="ReqArenaRankerDetail";
public const string RmiName_ReqSetArenaTowerTeam="ReqSetArenaTowerTeam";
public const string RmiName_ReqArenaTowerGameStart="ReqArenaTowerGameStart";
public const string RmiName_ReqArenaTowerGameEnd="ReqArenaTowerGameEnd";
public const string RmiName_ReqUnexpectedPackageDailyReward="ReqUnexpectedPackageDailyReward";
public const string RmiName_ReqCharLvUnexpectedPackageHardOpen="ReqCharLvUnexpectedPackageHardOpen";
public const string RmiName_ReqAccountDelete="ReqAccountDelete";
public const string RmiName_ReqGetUserPresetList="ReqGetUserPresetList";
public const string RmiName_ReqAddOrUpdateUserPreset="ReqAddOrUpdateUserPreset";
public const string RmiName_ReqUserPresetLoad="ReqUserPresetLoad";
public const string RmiName_ReqUserPresetChangeName="ReqUserPresetChangeName";
public const string RmiName_ReqCircleOpen="ReqCircleOpen";
public const string RmiName_ReqSuggestCircleList="ReqSuggestCircleList";
public const string RmiName_ReqCircleJoin="ReqCircleJoin";
public const string RmiName_ReqCircleJoinCancel="ReqCircleJoinCancel";
public const string RmiName_ReqCircleLobbyInfo="ReqCircleLobbyInfo";
public const string RmiName_ReqCircleWithdrawal="ReqCircleWithdrawal";
public const string RmiName_ReqCircleDisperse="ReqCircleDisperse";
public const string RmiName_ReqGetCircleUserList="ReqGetCircleUserList";
public const string RmiName_ReqCircleChangeStateJoinWaitUser="ReqCircleChangeStateJoinWaitUser";
public const string RmiName_ReqCircleUserKick="ReqCircleUserKick";
public const string RmiName_ReqCircleChangeAuthLevel="ReqCircleChangeAuthLevel";
public const string RmiName_ReqCircleChangeMark="ReqCircleChangeMark";
public const string RmiName_ReqCircleChangeName="ReqCircleChangeName";
public const string RmiName_ReqCircleChangeComment="ReqCircleChangeComment";
public const string RmiName_ReqCircleChangeMainLanguage="ReqCircleChangeMainLanguage";
public const string RmiName_ReqCircleChangeSuggestAnotherLangOpt="ReqCircleChangeSuggestAnotherLangOpt";
public const string RmiName_ReqCircleAttendance="ReqCircleAttendance";
public const string RmiName_ReqCircleBuyMarkItem="ReqCircleBuyMarkItem";
public const string RmiName_ReqCircleChatSend="ReqCircleChatSend";
public const string RmiName_ReqCircleGetMarkList="ReqCircleGetMarkList";
public const string RmiName_ReqCircleSearch="ReqCircleSearch";
public const string RmiName_ReqCircleChatList="ReqCircleChatList";
       
public const string RmiName_First = RmiName_ReqPing;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqPing="";
public const string RmiName_ReqLogOnCreditKey="";
public const string RmiName_ReqLogOut="";
public const string RmiName_ReqGetTotlaRelocateCntToNotComplete="";
public const string RmiName_ReqRelocateUserInfoSet="";
public const string RmiName_ReqRelocateUserComplate="";
public const string RmiName_ReqRefrashUserInfo="";
public const string RmiName_ReqReConnectUserInfo="";
public const string RmiName_ReqAccountCode="";
public const string RmiName_ReqAccountSetPassword="";
public const string RmiName_ReqAccountCodeReward="";
public const string RmiName_ReqAccountLinkReward="";
public const string RmiName_ReqLinkAccountList="";
public const string RmiName_ReqAddLinkAccountAuth="";
public const string RmiName_ReqGetUserInfoFromAccountLink="";
public const string RmiName_ReqPushNotifiTokenSet="";
public const string RmiName_ReqReflashLoginBonus="";
public const string RmiName_ReqRewardTakeAchieve="";
public const string RmiName_ReqRewardTakeAchieveEvent="";
public const string RmiName_ReqRewardDailyMission="";
public const string RmiName_ReqRewardWeekMission="";
public const string RmiName_ReqRewardInfluMission="";
public const string RmiName_ReqUpdateGllaMission="";
public const string RmiName_ReqRewardGllaMission="";
public const string RmiName_ReqRewardPassMission="";
public const string RmiName_ReqRewardPass="";
public const string RmiName_ReqEventRewardReset="";
public const string RmiName_ReqEventRewardTake="";
public const string RmiName_ReqEventLgnRewardTake="";
public const string RmiName_ReqSetTutorialVal="";
public const string RmiName_ReqSetTutorialFlag="";
public const string RmiName_ReqAddCharacter="";
public const string RmiName_ReqChangePreferenceNum="";
public const string RmiName_ReqChangeMainChar="";
public const string RmiName_ReqGradeUpChar="";
public const string RmiName_ReqSetMainCostumeChar="";
public const string RmiName_ReqRandomCostumeDyeing="";
public const string RmiName_ReqSetCostumeDyeing="";
public const string RmiName_ReqCostumeDyeingLock="";
public const string RmiName_ReqUserCostumeColor="";
public const string RmiName_ReqEquipWeaponChar="";
public const string RmiName_ReqApplySkillInChar="";
public const string RmiName_ReqLvUpSkill="";
public const string RmiName_ReqLvUpUserSkill="";
public const string RmiName_ReqResetUserSkill="";
public const string RmiName_ReqGivePresentChar="";
public const string RmiName_ReqResetSecretCntChar="";
public const string RmiName_ReqRaidHPRestore="";
public const string RmiName_ReqStageStart="";
public const string RmiName_ReqStageEnd="";
public const string RmiName_ReqStageEndFail="";
public const string RmiName_ReqStageContinue="";
public const string RmiName_ReqRaidStageDrop="";
public const string RmiName_ReqBookNewConfirm="";
public const string RmiName_ReqTimeAtkRankingList="";
public const string RmiName_ReqTimeAtkRankerDetail="";
public const string RmiName_ReqInitRaidSeasonData="";
public const string RmiName_ReqRaidRankingList="";
public const string RmiName_ReqRaidRankerDetail="";
public const string RmiName_ReqRaidFirstRankingList="";
public const string RmiName_ReqRaidFirstRankerDetail="";
public const string RmiName_ReqSetRaidTeam="";
public const string RmiName_ReqArenaSeasonPlay="";
public const string RmiName_ReqSetArenaTeam="";
public const string RmiName_ReqArenaGameStart="";
public const string RmiName_ReqArenaGameEnd="";
public const string RmiName_ReqArenaEnemySearch="";
public const string RmiName_ReqArenaRankingList="";
public const string RmiName_ReqArenaRankerDetail="";
public const string RmiName_ReqSetArenaTowerTeam="";
public const string RmiName_ReqArenaTowerGameStart="";
public const string RmiName_ReqArenaTowerGameEnd="";
public const string RmiName_ReqUnexpectedPackageDailyReward="";
public const string RmiName_ReqCharLvUnexpectedPackageHardOpen="";
public const string RmiName_ReqAccountDelete="";
public const string RmiName_ReqGetUserPresetList="";
public const string RmiName_ReqAddOrUpdateUserPreset="";
public const string RmiName_ReqUserPresetLoad="";
public const string RmiName_ReqUserPresetChangeName="";
public const string RmiName_ReqCircleOpen="";
public const string RmiName_ReqSuggestCircleList="";
public const string RmiName_ReqCircleJoin="";
public const string RmiName_ReqCircleJoinCancel="";
public const string RmiName_ReqCircleLobbyInfo="";
public const string RmiName_ReqCircleWithdrawal="";
public const string RmiName_ReqCircleDisperse="";
public const string RmiName_ReqGetCircleUserList="";
public const string RmiName_ReqCircleChangeStateJoinWaitUser="";
public const string RmiName_ReqCircleUserKick="";
public const string RmiName_ReqCircleChangeAuthLevel="";
public const string RmiName_ReqCircleChangeMark="";
public const string RmiName_ReqCircleChangeName="";
public const string RmiName_ReqCircleChangeComment="";
public const string RmiName_ReqCircleChangeMainLanguage="";
public const string RmiName_ReqCircleChangeSuggestAnotherLangOpt="";
public const string RmiName_ReqCircleAttendance="";
public const string RmiName_ReqCircleBuyMarkItem="";
public const string RmiName_ReqCircleChatSend="";
public const string RmiName_ReqCircleGetMarkList="";
public const string RmiName_ReqCircleSearch="";
public const string RmiName_ReqCircleChatList="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace GlobalS2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotiSvrReloadTableInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserReflash _pkt);  
		public NotiSvrReloadTableInfoDelegate NotiSvrReloadTableInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserReflash _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCloseServTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _leftTime_Sec);  
		public NotiCloseServTimeDelegate NotiCloseServTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _leftTime_Sec)
		{ 
			return false;
		};
		public delegate bool NotiCommonErrDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _errNum);  
		public NotiCommonErrDelegate NotiCommonErr = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _errNum)
		{ 
			return false;
		};
		public delegate bool NotiEmbargoWordErrDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public NotiEmbargoWordErrDelegate NotiEmbargoWordErr = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCheckVersionErrDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoVersion _pkt);  
		public NotiCheckVersionErrDelegate NotiCheckVersionErr = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoVersion _pkt)
		{ 
			return false;
		};
		public delegate bool NotiMoveUserInSvrToSvrDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _errNum, System.Guid _creditKey, PktInfoSimpleSvr _tgtSvrInfo);  
		public NotiMoveUserInSvrToSvrDelegate NotiMoveUserInSvrToSvr = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _errNum, System.Guid _creditKey, PktInfoSimpleSvr _tgtSvrInfo)
		{ 
			return false;
		};
		public delegate bool NotiUpdateTicketDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateTicketUserNoti _pkt);  
		public NotiUpdateTicketDelegate NotiUpdateTicket = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateTicketUserNoti _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUserMarkTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserMarkTake _pkt);  
		public NotiUserMarkTakeDelegate NotiUserMarkTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserMarkTake _pkt)
		{ 
			return false;
		};
		public delegate bool NotiAddMailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMail _pkt);  
		public NotiAddMailDelegate NotiAddMail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMail _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateAchieveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieve _pkt);  
		public NotiUpdateAchieveDelegate NotiUpdateAchieve = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieve _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateAchieveEventDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveEvent _pkt);  
		public NotiUpdateAchieveEventDelegate NotiUpdateAchieveEvent = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveEvent _pkt)
		{ 
			return false;
		};
		public delegate bool NotiSetSvrRotationGachaDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComTimeAndTID _pkt);  
		public NotiSetSvrRotationGachaDelegate NotiSetSvrRotationGacha = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoComTimeAndTID _pkt)
		{ 
			return false;
		};
		public delegate bool NotiSetSvrSecretQuestOptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSecretQuestOpt _pkt);  
		public NotiSetSvrSecretQuestOptDelegate NotiSetSvrSecretQuestOpt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSecretQuestOpt _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateDailyMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Daily _pkt);  
		public NotiUpdateDailyMissionDelegate NotiUpdateDailyMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Daily _pkt)
		{ 
			return false;
		};
		public delegate bool NotiResetWeekMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Weekly _pkt);  
		public NotiResetWeekMissionDelegate NotiResetWeekMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Weekly _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateWeekMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Weekly _pkt);  
		public NotiUpdateWeekMissionDelegate NotiUpdateWeekMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Weekly _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateInfluMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Influ _pkt);  
		public NotiUpdateInfluMissionDelegate NotiUpdateInfluMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Influ _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUserInfluMissionChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluChangeList.Piece _pkt);  
		public NotiUserInfluMissionChangeDelegate NotiUserInfluMissionChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluChangeList.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateGllaMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Guerrilla _pkt);  
		public NotiUpdateGllaMissionDelegate NotiUpdateGllaMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Guerrilla _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdatePassMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Pass _pkt);  
		public NotiUpdatePassMissionDelegate NotiUpdatePassMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Pass _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUserPassChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPassChangeList.Piece _pkt);  
		public NotiUserPassChangeDelegate NotiUserPassChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPassChangeList.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUserEventChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventChangeList.Piece _pkt);  
		public NotiUserEventChangeDelegate NotiUserEventChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventChangeList.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateArenaTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaSeasonTime _pkt);  
		public NotiUpdateArenaTimeDelegate NotiUpdateArenaTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaSeasonTime _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUpdateRaidTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidSeasonTime _pkt, System.UInt32 _openTypeValue);  
		public NotiUpdateRaidTimeDelegate NotiUpdateRaidTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidSeasonTime _pkt, System.UInt32 _openTypeValue)
		{ 
			return false;
		};
		public delegate bool NotiUpdateRaidInitStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotiUpdateRaidInitStartDelegate NotiUpdateRaidInitStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotiCommunityUserArenaOnDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _onArenaUuid);  
		public NotiCommunityUserArenaOnDelegate NotiCommunityUserArenaOn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _onArenaUuid)
		{ 
			return false;
		};
		public delegate bool NotiCommunityUserCallCntDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuCallCntNoti _pkt);  
		public NotiCommunityUserCallCntDelegate NotiCommunityUserCallCnt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuCallCntNoti _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCommunitySetArenaTowerIDDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuArenaTowerIDNoti _pkt);  
		public NotiCommunitySetArenaTowerIDDelegate NotiCommunitySetArenaTowerID = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuArenaTowerIDNoti _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFriendFromAddDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriend _pkt);  
		public NotiFriendFromAddDelegate NotiFriendFromAdd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriend _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFriendFromDelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt);  
		public NotiFriendFromDelDelegate NotiFriendFromDel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDList _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFriendAnswerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswerNoti _pkt);  
		public NotiFriendAnswerDelegate NotiFriendAnswer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswerNoti _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFriendKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKickNoti _pkt);  
		public NotiFriendKickDelegate NotiFriendKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKickNoti _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFriendFlagUpdateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendFlagUpdateNoti _pkt);  
		public NotiFriendFlagUpdateDelegate NotiFriendFlagUpdate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendFlagUpdateNoti _pkt)
		{ 
			return false;
		};
		public delegate bool AckPingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _pkt);  
		public AckPingDelegate AckPing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _pkt)
		{ 
			return false;
		};
		public delegate bool AckLogOnCreditKeyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _err);  
		public AckLogOnCreditKeyDelegate AckLogOnCreditKey = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _err)
		{ 
			return false;
		};
		public delegate bool AckLogOutDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public AckLogOutDelegate AckLogOut = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool AckGetTotlaRelocateCntToNotCompleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _pkt);  
		public AckGetTotlaRelocateCntToNotCompleteDelegate AckGetTotlaRelocateCntToNotComplete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _pkt)
		{ 
			return false;
		};
		public delegate bool AckRelocateUserInfoSetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt);  
		public AckRelocateUserInfoSetDelegate AckRelocateUserInfoSet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt)
		{ 
			return false;
		};
		public delegate bool AckRelocateUserComplateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt);  
		public AckRelocateUserComplateDelegate AckRelocateUserComplate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRelocateUser _pkt)
		{ 
			return false;
		};
		public delegate bool AckRefrashUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRefreahUserInfo _pkt);  
		public AckRefrashUserInfoDelegate AckRefrashUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRefreahUserInfo _pkt)
		{ 
			return false;
		};
		public delegate bool AckReConnectUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoReconnectUserInfoAck _pkt);  
		public AckReConnectUserInfoDelegate AckReConnectUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoReconnectUserInfoAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckAccountCodeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _code, PktInfoStr _password);  
		public AckAccountCodeDelegate AckAccountCode = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _code, PktInfoStr _password)
		{ 
			return false;
		};
		public delegate bool AckAccountSetPasswordDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public AckAccountSetPasswordDelegate AckAccountSetPassword = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool AckAccountCodeRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGoods _pkt);  
		public AckAccountCodeRewardDelegate AckAccountCodeReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGoods _pkt)
		{ 
			return false;
		};
		public delegate bool AckAccountLinkRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGoods _pkt);  
		public AckAccountLinkRewardDelegate AckAccountLinkReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGoods _pkt)
		{ 
			return false;
		};
		public delegate bool AckLinkAccountListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkList _pkt);  
		public AckLinkAccountListDelegate AckLinkAccountList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkList _pkt)
		{ 
			return false;
		};
		public delegate bool AckAddLinkAccountAuthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkInfo _pkt);  
		public AckAddLinkAccountAuthDelegate AckAddLinkAccountAuth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountLinkInfo _pkt)
		{ 
			return false;
		};
		public delegate bool AckGetUserInfoFromAccountLinkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserInfoFromLinkAck _pkt);  
		public AckGetUserInfoFromAccountLinkDelegate AckGetUserInfoFromAccountLink = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserInfoFromLinkAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckPushNotifiTokenSetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPushNotiSetToken _pkt);  
		public AckPushNotifiTokenSetDelegate AckPushNotifiTokenSet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoPushNotiSetToken _pkt)
		{ 
			return false;
		};
		public delegate bool AckReflashLoginBonusDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoLoginBonus _pkt);  
		public AckReflashLoginBonusDelegate AckReflashLoginBonus = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoLoginBonus _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardTakeAchieveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveReward _pkt);  
		public AckRewardTakeAchieveDelegate AckRewardTakeAchieve = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveReward _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardTakeAchieveEventDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveEventReward _pkt);  
		public AckRewardTakeAchieveEventDelegate AckRewardTakeAchieveEvent = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAchieveEventReward _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardDailyMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdDailyMissionAck _pkt);  
		public AckRewardDailyMissionDelegate AckRewardDailyMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdDailyMissionAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardWeekMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _rewardFlag);  
		public AckRewardWeekMissionDelegate AckRewardWeekMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _rewardFlag)
		{ 
			return false;
		};
		public delegate bool AckRewardInfluMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluMissionAck _pkt);  
		public AckRewardInfluMissionDelegate AckRewardInfluMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluMissionAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckUpdateGllaMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateGllaMission _pkt);  
		public AckUpdateGllaMissionDelegate AckUpdateGllaMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUpdateGllaMission _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardGllaMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Guerrilla _pkt);  
		public AckRewardGllaMissionDelegate AckRewardGllaMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Guerrilla _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardPassMissionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Pass _pkt);  
		public AckRewardPassMissionDelegate AckRewardPassMission = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMission.Pass _pkt)
		{ 
			return false;
		};
		public delegate bool AckRewardPassDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassAck _pkt);  
		public AckRewardPassDelegate AckRewardPass = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdPassAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckEventRewardResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardReset _pkt);  
		public AckEventRewardResetDelegate AckEventRewardReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardReset _pkt)
		{ 
			return false;
		};
		public delegate bool AckEventRewardTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardTake _pkt);  
		public AckEventRewardTakeDelegate AckEventRewardTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEventRewardTake _pkt)
		{ 
			return false;
		};
		public delegate bool AckEventLgnRewardTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEvtLgnRwdAck _pkt);  
		public AckEventLgnRewardTakeDelegate AckEventLgnRewardTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoEvtLgnRwdAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetTutorialValDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tutoVal);  
		public AckSetTutorialValDelegate AckSetTutorialVal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tutoVal)
		{ 
			return false;
		};
		public delegate bool AckSetTutorialFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _tutoFlag);  
		public AckSetTutorialFlagDelegate AckSetTutorialFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _tutoFlag)
		{ 
			return false;
		};
		public delegate bool AckAddCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAddChar _pkt);  
		public AckAddCharacterDelegate AckAddCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAddChar _pkt)
		{ 
			return false;
		};
		public delegate bool AckChangePreferenceNumDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDValue _pkt);  
		public AckChangePreferenceNumDelegate AckChangePreferenceNum = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDValue _pkt)
		{ 
			return false;
		};
		public delegate bool AckChangeMainCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDValue _pkt);  
		public AckChangeMainCharDelegate AckChangeMainChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUIDValue _pkt)
		{ 
			return false;
		};
		public delegate bool AckGradeUpCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharGradeUp _pkt);  
		public AckGradeUpCharDelegate AckGradeUpChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharGradeUp _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetGradeLvCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharGradeExpLv _pkt);  
		public AckSetGradeLvCharDelegate AckSetGradeLvChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharGradeExpLv _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetMainCostumeCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSetMainCostumeAck _pkt);  
		public AckSetMainCostumeCharDelegate AckSetMainCostumeChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSetMainCostumeAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckRandomCostumeDyeingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRandomCostumeDyeing _pkt);  
		public AckRandomCostumeDyeingDelegate AckRandomCostumeDyeing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRandomCostumeDyeing _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetCostumeDyeingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostume.Piece _pkt);  
		public AckSetCostumeDyeingDelegate AckSetCostumeDyeing = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostume.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool AckCostumeDyeingLockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostumeDyeingLock _pkt);  
		public AckCostumeDyeingLockDelegate AckCostumeDyeingLock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCostumeDyeingLock _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserCostumeColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserCostumeColor _pkt);  
		public AckUserCostumeColorDelegate AckUserCostumeColor = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserCostumeColor _pkt)
		{ 
			return false;
		};
		public delegate bool AckEquipWeaponCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharEquipWeapon _pkt);  
		public AckEquipWeaponCharDelegate AckEquipWeaponChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharEquipWeapon _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplySkillInCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSlotSkill _pkt);  
		public AckApplySkillInCharDelegate AckApplySkillInChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSlotSkill _pkt)
		{ 
			return false;
		};
		public delegate bool AckLvUpSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSkillLvUp _pkt);  
		public AckLvUpSkillDelegate AckLvUpSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSkillLvUp _pkt)
		{ 
			return false;
		};
		public delegate bool AckLvUpUserSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklLvUpAck _pkt);  
		public AckLvUpUserSkillDelegate AckLvUpUserSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklLvUpAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckResetUserSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklReset _pkt);  
		public AckResetUserSkillDelegate AckResetUserSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserSklReset _pkt)
		{ 
			return false;
		};
		public delegate bool AckGivePresentCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGivePresentCharAck _pkt);  
		public AckGivePresentCharDelegate AckGivePresentChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGivePresentCharAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckResetSecretCntCharDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSecretCntRst _pkt);  
		public AckResetSecretCntCharDelegate AckResetSecretCntChar = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCharSecretCntRst _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidHPRestoreDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRestoreHPAck _pkt);  
		public AckRaidHPRestoreDelegate AckRaidHPRestore = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRestoreHPAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckStageStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameStartAck _pkt);  
		public AckStageStartDelegate AckStageStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameStartAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckStageEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameResultAck _pkt, PktInfoProductPack _pktProduct);  
		public AckStageEndDelegate AckStageEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameResultAck _pkt, PktInfoProductPack _pktProduct)
		{ 
			return false;
		};
		public delegate bool AckStageEndFailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameEndFail _pkt);  
		public AckStageEndFailDelegate AckStageEndFail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStageGameEndFail _pkt)
		{ 
			return false;
		};
		public delegate bool AckStageContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoConsumeItemAndGoods _pkt);  
		public AckStageContinueDelegate AckStageContinue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoConsumeItemAndGoods _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidStageDropDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStageDrop _pkt);  
		public AckRaidStageDropDelegate AckRaidStageDrop = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStageDrop _pkt)
		{ 
			return false;
		};
		public delegate bool AckBookNewConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookNewConfirm _pkt);  
		public AckBookNewConfirmDelegate AckBookNewConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookNewConfirm _pkt)
		{ 
			return false;
		};
		public delegate bool AckTimeAtkRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankStageList _pkt);  
		public AckTimeAtkRankingListDelegate AckTimeAtkRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankStageList _pkt)
		{ 
			return false;
		};
		public delegate bool AckTimeAtkRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankerDetailAck _pkt);  
		public AckTimeAtkRankerDetailDelegate AckTimeAtkRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTimeAtkRankerDetailAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckInitRaidSeasonDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInitRaidSeasonData _pkt);  
		public AckInitRaidSeasonDataDelegate AckInitRaidSeasonData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInitRaidSeasonData _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankStageList _pkt);  
		public AckRaidRankingListDelegate AckRaidRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankStageList _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailAck _pkt);  
		public AckRaidRankerDetailDelegate AckRaidRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidFirstRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankStageList _pkt);  
		public AckRaidFirstRankingListDelegate AckRaidFirstRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankStageList _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidFirstRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailAck _pkt);  
		public AckRaidFirstRankerDetailDelegate AckRaidFirstRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidRankerDetailAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetRaidTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRaidTeam _pkt);  
		public AckSetRaidTeamDelegate AckSetRaidTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRaidTeam _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaSeasonPlayDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaRec _pkt);  
		public AckArenaSeasonPlayDelegate AckArenaSeasonPlay = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaRec _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetArenaTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt);  
		public AckSetArenaTeamDelegate AckSetArenaTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameStartAck _pkt);  
		public AckArenaGameStartDelegate AckArenaGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameStartAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameEndAck _pkt);  
		public AckArenaGameEndDelegate AckArenaGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaGameEndAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaEnemySearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaSearchEnemyAck _pkt);  
		public AckArenaEnemySearchDelegate AckArenaEnemySearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaSearchEnemyAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaRankingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaRankList _pkt);  
		public AckArenaRankingListDelegate AckArenaRankingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaRankList _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaRankerDetailDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaDetail _pkt);  
		public AckArenaRankerDetailDelegate AckArenaRankerDetail = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaDetail _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetArenaTowerTeamDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt);  
		public AckSetArenaTowerTeamDelegate AckSetArenaTowerTeam = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserArenaTeam _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaTowerGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameStartAck _pkt);  
		public AckArenaTowerGameStartDelegate AckArenaTowerGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameStartAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckArenaTowerGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameEndAck _pkt);  
		public AckArenaTowerGameEndDelegate AckArenaTowerGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoArenaTowerGameEndAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckUnexpectedPackageDailyRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackageDailyRewardAck _pkt);  
		public AckUnexpectedPackageDailyRewardDelegate AckUnexpectedPackageDailyReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackageDailyRewardAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCharLvUnexpectedPackageHardOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackage _pkt);  
		public AckCharLvUnexpectedPackageHardOpenDelegate AckCharLvUnexpectedPackageHardOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUnexpectedPackage _pkt)
		{ 
			return false;
		};
		public delegate bool AckAccountDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountDelete _pkt);  
		public AckAccountDeleteDelegate AckAccountDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAccountDelete _pkt)
		{ 
			return false;
		};
		public delegate bool AckGetUserPresetListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset _pkt);  
		public AckGetUserPresetListDelegate AckGetUserPresetList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset _pkt)
		{ 
			return false;
		};
		public delegate bool AckAddOrUpdateUserPresetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset.Piece _pkt);  
		public AckAddOrUpdateUserPresetDelegate AckAddOrUpdateUserPreset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserPresetLoadDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPresetLoad _pkt);  
		public AckUserPresetLoadDelegate AckUserPresetLoad = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPresetLoad _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserPresetChangeNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset.Piece _pkt);  
		public AckUserPresetChangeNameDelegate AckUserPresetChangeName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserPreset.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleOpenAck _pkt);  
		public AckCircleOpenDelegate AckCircleOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleOpenAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSuggestCircleListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetSuggestCircleAck _pkt);  
		public AckSuggestCircleListDelegate AckSuggestCircleList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetSuggestCircleAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetSuggestCircleAck _pkt);  
		public AckCircleJoinDelegate AckCircleJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetSuggestCircleAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleJoinCancelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _circleID);  
		public AckCircleJoinCancelDelegate AckCircleJoinCancel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _circleID)
		{ 
			return false;
		};
		public delegate bool AckCircleLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleLobby _pkt);  
		public AckCircleLobbyInfoDelegate AckCircleLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleLobby _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleWithdrawalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleWithdrawalAck _pkt);  
		public AckCircleWithdrawalDelegate AckCircleWithdrawal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleWithdrawalAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleDisperseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _activeNextJoinDate);  
		public AckCircleDisperseDelegate AckCircleDisperse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _activeNextJoinDate)
		{ 
			return false;
		};
		public delegate bool AckGetCircleUserListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserList _pkt);  
		public AckGetCircleUserListDelegate AckGetCircleUserList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserList _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeStateJoinWaitUserDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserList _pkt);  
		public AckCircleChangeStateJoinWaitUserDelegate AckCircleChangeStateJoinWaitUser = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserList _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCircleAcceptJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleAuthority _pkt);  
		public NotiCircleAcceptJoinDelegate NotiCircleAcceptJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleAuthority _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleUserKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserKickAck _pkt);  
		public AckCircleUserKickDelegate AckCircleUserKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleUserKickAck _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCircleUserKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleWithdrawalAck _pkt);  
		public NotiCircleUserKickDelegate NotiCircleUserKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleWithdrawalAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeAuthLevelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeAuthority _pkt);  
		public AckCircleChangeAuthLevelDelegate AckCircleChangeAuthLevel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeAuthority _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCircleUserChangeAuthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eCircleAuthLevel _authLevel);  
		public NotiCircleUserChangeAuthDelegate NotiCircleUserChangeAuth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eCircleAuthLevel _authLevel)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeMarkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleMarkSet _pkt);  
		public AckCircleChangeMarkDelegate AckCircleChangeMark = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleMarkSet _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeName _pkt);  
		public AckCircleChangeNameDelegate AckCircleChangeName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChangeName _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeCommentDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public AckCircleChangeCommentDelegate AckCircleChangeComment = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeMainLanguageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _changeLang);  
		public AckCircleChangeMainLanguageDelegate AckCircleChangeMainLanguage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, eLANGUAGE _changeLang)
		{ 
			return false;
		};
		public delegate bool AckCircleChangeSuggestAnotherLangOptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool _state);  
		public AckCircleChangeSuggestAnotherLangOptDelegate AckCircleChangeSuggestAnotherLangOpt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool _state)
		{ 
			return false;
		};
		public delegate bool AckCircleAttendanceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleAttendanceRwd _pkt);  
		public AckCircleAttendanceDelegate AckCircleAttendance = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleAttendanceRwd _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleBuyMarkItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleBuyMarkItem _pkt);  
		public AckCircleBuyMarkItemDelegate AckCircleBuyMarkItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleBuyMarkItem _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCircleChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat.Piece _pkt);  
		public NotiCircleChatDelegate NotiCircleChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleGetMarkListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetCircleMarkList _pkt);  
		public AckCircleGetMarkListDelegate AckCircleGetMarkList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGetCircleMarkList _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleSearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleSimple.Piece _pkt);  
		public AckCircleSearchDelegate AckCircleSearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleSimple.Piece _pkt)
		{ 
			return false;
		};
		public delegate bool AckCircleChatListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat _pkt);  
		public AckCircleChatListDelegate AckCircleChatList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleChat _pkt)
		{ 
			return false;
		};
		public delegate bool NotiCircleChatNotimessageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleNotification.Piece _pkt);  
		public NotiCircleChatNotimessageDelegate NotiCircleChatNotimessage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCircleNotification.Piece _pkt)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotiSvrReloadTableInfo:
            ProcessReceivedMessage_NotiSvrReloadTableInfo(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCloseServTime:
            ProcessReceivedMessage_NotiCloseServTime(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCommonErr:
            ProcessReceivedMessage_NotiCommonErr(__msg, pa, hostTag, remote);
            break;
        case Common.NotiEmbargoWordErr:
            ProcessReceivedMessage_NotiEmbargoWordErr(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCheckVersionErr:
            ProcessReceivedMessage_NotiCheckVersionErr(__msg, pa, hostTag, remote);
            break;
        case Common.NotiMoveUserInSvrToSvr:
            ProcessReceivedMessage_NotiMoveUserInSvrToSvr(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateTicket:
            ProcessReceivedMessage_NotiUpdateTicket(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUserMarkTake:
            ProcessReceivedMessage_NotiUserMarkTake(__msg, pa, hostTag, remote);
            break;
        case Common.NotiAddMail:
            ProcessReceivedMessage_NotiAddMail(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateAchieve:
            ProcessReceivedMessage_NotiUpdateAchieve(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateAchieveEvent:
            ProcessReceivedMessage_NotiUpdateAchieveEvent(__msg, pa, hostTag, remote);
            break;
        case Common.NotiSetSvrRotationGacha:
            ProcessReceivedMessage_NotiSetSvrRotationGacha(__msg, pa, hostTag, remote);
            break;
        case Common.NotiSetSvrSecretQuestOpt:
            ProcessReceivedMessage_NotiSetSvrSecretQuestOpt(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateDailyMission:
            ProcessReceivedMessage_NotiUpdateDailyMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiResetWeekMission:
            ProcessReceivedMessage_NotiResetWeekMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateWeekMission:
            ProcessReceivedMessage_NotiUpdateWeekMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateInfluMission:
            ProcessReceivedMessage_NotiUpdateInfluMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUserInfluMissionChange:
            ProcessReceivedMessage_NotiUserInfluMissionChange(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateGllaMission:
            ProcessReceivedMessage_NotiUpdateGllaMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdatePassMission:
            ProcessReceivedMessage_NotiUpdatePassMission(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUserPassChange:
            ProcessReceivedMessage_NotiUserPassChange(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUserEventChange:
            ProcessReceivedMessage_NotiUserEventChange(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateArenaTime:
            ProcessReceivedMessage_NotiUpdateArenaTime(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateRaidTime:
            ProcessReceivedMessage_NotiUpdateRaidTime(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUpdateRaidInitStart:
            ProcessReceivedMessage_NotiUpdateRaidInitStart(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCommunityUserArenaOn:
            ProcessReceivedMessage_NotiCommunityUserArenaOn(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCommunityUserCallCnt:
            ProcessReceivedMessage_NotiCommunityUserCallCnt(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCommunitySetArenaTowerID:
            ProcessReceivedMessage_NotiCommunitySetArenaTowerID(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFriendFromAdd:
            ProcessReceivedMessage_NotiFriendFromAdd(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFriendFromDel:
            ProcessReceivedMessage_NotiFriendFromDel(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFriendAnswer:
            ProcessReceivedMessage_NotiFriendAnswer(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFriendKick:
            ProcessReceivedMessage_NotiFriendKick(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFriendFlagUpdate:
            ProcessReceivedMessage_NotiFriendFlagUpdate(__msg, pa, hostTag, remote);
            break;
        case Common.AckPing:
            ProcessReceivedMessage_AckPing(__msg, pa, hostTag, remote);
            break;
        case Common.AckLogOnCreditKey:
            ProcessReceivedMessage_AckLogOnCreditKey(__msg, pa, hostTag, remote);
            break;
        case Common.AckLogOut:
            ProcessReceivedMessage_AckLogOut(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetTotlaRelocateCntToNotComplete:
            ProcessReceivedMessage_AckGetTotlaRelocateCntToNotComplete(__msg, pa, hostTag, remote);
            break;
        case Common.AckRelocateUserInfoSet:
            ProcessReceivedMessage_AckRelocateUserInfoSet(__msg, pa, hostTag, remote);
            break;
        case Common.AckRelocateUserComplate:
            ProcessReceivedMessage_AckRelocateUserComplate(__msg, pa, hostTag, remote);
            break;
        case Common.AckRefrashUserInfo:
            ProcessReceivedMessage_AckRefrashUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckReConnectUserInfo:
            ProcessReceivedMessage_AckReConnectUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckAccountCode:
            ProcessReceivedMessage_AckAccountCode(__msg, pa, hostTag, remote);
            break;
        case Common.AckAccountSetPassword:
            ProcessReceivedMessage_AckAccountSetPassword(__msg, pa, hostTag, remote);
            break;
        case Common.AckAccountCodeReward:
            ProcessReceivedMessage_AckAccountCodeReward(__msg, pa, hostTag, remote);
            break;
        case Common.AckAccountLinkReward:
            ProcessReceivedMessage_AckAccountLinkReward(__msg, pa, hostTag, remote);
            break;
        case Common.AckLinkAccountList:
            ProcessReceivedMessage_AckLinkAccountList(__msg, pa, hostTag, remote);
            break;
        case Common.AckAddLinkAccountAuth:
            ProcessReceivedMessage_AckAddLinkAccountAuth(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetUserInfoFromAccountLink:
            ProcessReceivedMessage_AckGetUserInfoFromAccountLink(__msg, pa, hostTag, remote);
            break;
        case Common.AckPushNotifiTokenSet:
            ProcessReceivedMessage_AckPushNotifiTokenSet(__msg, pa, hostTag, remote);
            break;
        case Common.AckReflashLoginBonus:
            ProcessReceivedMessage_AckReflashLoginBonus(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardTakeAchieve:
            ProcessReceivedMessage_AckRewardTakeAchieve(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardTakeAchieveEvent:
            ProcessReceivedMessage_AckRewardTakeAchieveEvent(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardDailyMission:
            ProcessReceivedMessage_AckRewardDailyMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardWeekMission:
            ProcessReceivedMessage_AckRewardWeekMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardInfluMission:
            ProcessReceivedMessage_AckRewardInfluMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckUpdateGllaMission:
            ProcessReceivedMessage_AckUpdateGllaMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardGllaMission:
            ProcessReceivedMessage_AckRewardGllaMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardPassMission:
            ProcessReceivedMessage_AckRewardPassMission(__msg, pa, hostTag, remote);
            break;
        case Common.AckRewardPass:
            ProcessReceivedMessage_AckRewardPass(__msg, pa, hostTag, remote);
            break;
        case Common.AckEventRewardReset:
            ProcessReceivedMessage_AckEventRewardReset(__msg, pa, hostTag, remote);
            break;
        case Common.AckEventRewardTake:
            ProcessReceivedMessage_AckEventRewardTake(__msg, pa, hostTag, remote);
            break;
        case Common.AckEventLgnRewardTake:
            ProcessReceivedMessage_AckEventLgnRewardTake(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetTutorialVal:
            ProcessReceivedMessage_AckSetTutorialVal(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetTutorialFlag:
            ProcessReceivedMessage_AckSetTutorialFlag(__msg, pa, hostTag, remote);
            break;
        case Common.AckAddCharacter:
            ProcessReceivedMessage_AckAddCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.AckChangePreferenceNum:
            ProcessReceivedMessage_AckChangePreferenceNum(__msg, pa, hostTag, remote);
            break;
        case Common.AckChangeMainChar:
            ProcessReceivedMessage_AckChangeMainChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckGradeUpChar:
            ProcessReceivedMessage_AckGradeUpChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetGradeLvChar:
            ProcessReceivedMessage_AckSetGradeLvChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetMainCostumeChar:
            ProcessReceivedMessage_AckSetMainCostumeChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckRandomCostumeDyeing:
            ProcessReceivedMessage_AckRandomCostumeDyeing(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetCostumeDyeing:
            ProcessReceivedMessage_AckSetCostumeDyeing(__msg, pa, hostTag, remote);
            break;
        case Common.AckCostumeDyeingLock:
            ProcessReceivedMessage_AckCostumeDyeingLock(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserCostumeColor:
            ProcessReceivedMessage_AckUserCostumeColor(__msg, pa, hostTag, remote);
            break;
        case Common.AckEquipWeaponChar:
            ProcessReceivedMessage_AckEquipWeaponChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplySkillInChar:
            ProcessReceivedMessage_AckApplySkillInChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckLvUpSkill:
            ProcessReceivedMessage_AckLvUpSkill(__msg, pa, hostTag, remote);
            break;
        case Common.AckLvUpUserSkill:
            ProcessReceivedMessage_AckLvUpUserSkill(__msg, pa, hostTag, remote);
            break;
        case Common.AckResetUserSkill:
            ProcessReceivedMessage_AckResetUserSkill(__msg, pa, hostTag, remote);
            break;
        case Common.AckGivePresentChar:
            ProcessReceivedMessage_AckGivePresentChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckResetSecretCntChar:
            ProcessReceivedMessage_AckResetSecretCntChar(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidHPRestore:
            ProcessReceivedMessage_AckRaidHPRestore(__msg, pa, hostTag, remote);
            break;
        case Common.AckStageStart:
            ProcessReceivedMessage_AckStageStart(__msg, pa, hostTag, remote);
            break;
        case Common.AckStageEnd:
            ProcessReceivedMessage_AckStageEnd(__msg, pa, hostTag, remote);
            break;
        case Common.AckStageEndFail:
            ProcessReceivedMessage_AckStageEndFail(__msg, pa, hostTag, remote);
            break;
        case Common.AckStageContinue:
            ProcessReceivedMessage_AckStageContinue(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidStageDrop:
            ProcessReceivedMessage_AckRaidStageDrop(__msg, pa, hostTag, remote);
            break;
        case Common.AckBookNewConfirm:
            ProcessReceivedMessage_AckBookNewConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.AckTimeAtkRankingList:
            ProcessReceivedMessage_AckTimeAtkRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.AckTimeAtkRankerDetail:
            ProcessReceivedMessage_AckTimeAtkRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.AckInitRaidSeasonData:
            ProcessReceivedMessage_AckInitRaidSeasonData(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidRankingList:
            ProcessReceivedMessage_AckRaidRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidRankerDetail:
            ProcessReceivedMessage_AckRaidRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidFirstRankingList:
            ProcessReceivedMessage_AckRaidFirstRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidFirstRankerDetail:
            ProcessReceivedMessage_AckRaidFirstRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetRaidTeam:
            ProcessReceivedMessage_AckSetRaidTeam(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaSeasonPlay:
            ProcessReceivedMessage_AckArenaSeasonPlay(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetArenaTeam:
            ProcessReceivedMessage_AckSetArenaTeam(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaGameStart:
            ProcessReceivedMessage_AckArenaGameStart(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaGameEnd:
            ProcessReceivedMessage_AckArenaGameEnd(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaEnemySearch:
            ProcessReceivedMessage_AckArenaEnemySearch(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaRankingList:
            ProcessReceivedMessage_AckArenaRankingList(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaRankerDetail:
            ProcessReceivedMessage_AckArenaRankerDetail(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetArenaTowerTeam:
            ProcessReceivedMessage_AckSetArenaTowerTeam(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaTowerGameStart:
            ProcessReceivedMessage_AckArenaTowerGameStart(__msg, pa, hostTag, remote);
            break;
        case Common.AckArenaTowerGameEnd:
            ProcessReceivedMessage_AckArenaTowerGameEnd(__msg, pa, hostTag, remote);
            break;
        case Common.AckUnexpectedPackageDailyReward:
            ProcessReceivedMessage_AckUnexpectedPackageDailyReward(__msg, pa, hostTag, remote);
            break;
        case Common.AckCharLvUnexpectedPackageHardOpen:
            ProcessReceivedMessage_AckCharLvUnexpectedPackageHardOpen(__msg, pa, hostTag, remote);
            break;
        case Common.AckAccountDelete:
            ProcessReceivedMessage_AckAccountDelete(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetUserPresetList:
            ProcessReceivedMessage_AckGetUserPresetList(__msg, pa, hostTag, remote);
            break;
        case Common.AckAddOrUpdateUserPreset:
            ProcessReceivedMessage_AckAddOrUpdateUserPreset(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserPresetLoad:
            ProcessReceivedMessage_AckUserPresetLoad(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserPresetChangeName:
            ProcessReceivedMessage_AckUserPresetChangeName(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleOpen:
            ProcessReceivedMessage_AckCircleOpen(__msg, pa, hostTag, remote);
            break;
        case Common.AckSuggestCircleList:
            ProcessReceivedMessage_AckSuggestCircleList(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleJoin:
            ProcessReceivedMessage_AckCircleJoin(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleJoinCancel:
            ProcessReceivedMessage_AckCircleJoinCancel(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleLobbyInfo:
            ProcessReceivedMessage_AckCircleLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleWithdrawal:
            ProcessReceivedMessage_AckCircleWithdrawal(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleDisperse:
            ProcessReceivedMessage_AckCircleDisperse(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetCircleUserList:
            ProcessReceivedMessage_AckGetCircleUserList(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeStateJoinWaitUser:
            ProcessReceivedMessage_AckCircleChangeStateJoinWaitUser(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCircleAcceptJoin:
            ProcessReceivedMessage_NotiCircleAcceptJoin(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleUserKick:
            ProcessReceivedMessage_AckCircleUserKick(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCircleUserKick:
            ProcessReceivedMessage_NotiCircleUserKick(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeAuthLevel:
            ProcessReceivedMessage_AckCircleChangeAuthLevel(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCircleUserChangeAuth:
            ProcessReceivedMessage_NotiCircleUserChangeAuth(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeMark:
            ProcessReceivedMessage_AckCircleChangeMark(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeName:
            ProcessReceivedMessage_AckCircleChangeName(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeComment:
            ProcessReceivedMessage_AckCircleChangeComment(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeMainLanguage:
            ProcessReceivedMessage_AckCircleChangeMainLanguage(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChangeSuggestAnotherLangOpt:
            ProcessReceivedMessage_AckCircleChangeSuggestAnotherLangOpt(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleAttendance:
            ProcessReceivedMessage_AckCircleAttendance(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleBuyMarkItem:
            ProcessReceivedMessage_AckCircleBuyMarkItem(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCircleChat:
            ProcessReceivedMessage_NotiCircleChat(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleGetMarkList:
            ProcessReceivedMessage_AckCircleGetMarkList(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleSearch:
            ProcessReceivedMessage_AckCircleSearch(__msg, pa, hostTag, remote);
            break;
        case Common.AckCircleChatList:
            ProcessReceivedMessage_AckCircleChatList(__msg, pa, hostTag, remote);
            break;
        case Common.NotiCircleChatNotimessage:
            ProcessReceivedMessage_NotiCircleChatNotimessage(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotiSvrReloadTableInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserReflash _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiSvrReloadTableInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiSvrReloadTableInfo, RmiName_NotiSvrReloadTableInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiSvrReloadTableInfo;
        summary.rmiName = RmiName_NotiSvrReloadTableInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiSvrReloadTableInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiSvrReloadTableInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiSvrReloadTableInfo;
        summary.rmiName = RmiName_NotiSvrReloadTableInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCloseServTime(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _leftTime_Sec; PN_MarshalerEx.Read(__msg,out _leftTime_Sec);	
core.PostCheckReadMessage(__msg, RmiName_NotiCloseServTime);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_leftTime_Sec.ToString()+",";
        NotifyCallFromStub(Common.NotiCloseServTime, RmiName_NotiCloseServTime,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCloseServTime;
        summary.rmiName = RmiName_NotiCloseServTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCloseServTime (remote,ctx , _leftTime_Sec );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCloseServTime);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCloseServTime;
        summary.rmiName = RmiName_NotiCloseServTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCommonErr(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _errNum; PN_MarshalerEx.Read(__msg,out _errNum);	
core.PostCheckReadMessage(__msg, RmiName_NotiCommonErr);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_errNum.ToString()+",";
        NotifyCallFromStub(Common.NotiCommonErr, RmiName_NotiCommonErr,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCommonErr;
        summary.rmiName = RmiName_NotiCommonErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCommonErr (remote,ctx , _errNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCommonErr);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCommonErr;
        summary.rmiName = RmiName_NotiCommonErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiEmbargoWordErr(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiEmbargoWordErr);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiEmbargoWordErr, RmiName_NotiEmbargoWordErr,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiEmbargoWordErr;
        summary.rmiName = RmiName_NotiEmbargoWordErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiEmbargoWordErr (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiEmbargoWordErr);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiEmbargoWordErr;
        summary.rmiName = RmiName_NotiEmbargoWordErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCheckVersionErr(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoVersion _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCheckVersionErr);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCheckVersionErr, RmiName_NotiCheckVersionErr,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCheckVersionErr;
        summary.rmiName = RmiName_NotiCheckVersionErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCheckVersionErr (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCheckVersionErr);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCheckVersionErr;
        summary.rmiName = RmiName_NotiCheckVersionErr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiMoveUserInSvrToSvr(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _errNum; PN_MarshalerEx.Read(__msg,out _errNum);	
System.Guid _creditKey; PN_MarshalerEx.Read(__msg,out _creditKey);	
PktInfoSimpleSvr _tgtSvrInfo; PN_MarshalerEx.Read(__msg,out _tgtSvrInfo);	
core.PostCheckReadMessage(__msg, RmiName_NotiMoveUserInSvrToSvr);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_errNum.ToString()+",";
parameterString+=_creditKey.ToString()+",";
parameterString+=_tgtSvrInfo.ToString()+",";
        NotifyCallFromStub(Common.NotiMoveUserInSvrToSvr, RmiName_NotiMoveUserInSvrToSvr,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiMoveUserInSvrToSvr;
        summary.rmiName = RmiName_NotiMoveUserInSvrToSvr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiMoveUserInSvrToSvr (remote,ctx , _errNum, _creditKey, _tgtSvrInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiMoveUserInSvrToSvr);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiMoveUserInSvrToSvr;
        summary.rmiName = RmiName_NotiMoveUserInSvrToSvr;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateTicket(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUpdateTicketUserNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateTicket);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateTicket, RmiName_NotiUpdateTicket,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateTicket;
        summary.rmiName = RmiName_NotiUpdateTicket;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateTicket (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateTicket);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateTicket;
        summary.rmiName = RmiName_NotiUpdateTicket;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUserMarkTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserMarkTake _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUserMarkTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUserMarkTake, RmiName_NotiUserMarkTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUserMarkTake;
        summary.rmiName = RmiName_NotiUserMarkTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUserMarkTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUserMarkTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUserMarkTake;
        summary.rmiName = RmiName_NotiUserMarkTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiAddMail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiAddMail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiAddMail, RmiName_NotiAddMail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiAddMail;
        summary.rmiName = RmiName_NotiAddMail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiAddMail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiAddMail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiAddMail;
        summary.rmiName = RmiName_NotiAddMail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateAchieve(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAchieve _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateAchieve);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateAchieve, RmiName_NotiUpdateAchieve,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateAchieve;
        summary.rmiName = RmiName_NotiUpdateAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateAchieve (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateAchieve);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateAchieve;
        summary.rmiName = RmiName_NotiUpdateAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateAchieveEvent(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAchieveEvent _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateAchieveEvent);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateAchieveEvent, RmiName_NotiUpdateAchieveEvent,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateAchieveEvent;
        summary.rmiName = RmiName_NotiUpdateAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateAchieveEvent (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateAchieveEvent);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateAchieveEvent;
        summary.rmiName = RmiName_NotiUpdateAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiSetSvrRotationGacha(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoComTimeAndTID _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiSetSvrRotationGacha);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiSetSvrRotationGacha, RmiName_NotiSetSvrRotationGacha,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiSetSvrRotationGacha;
        summary.rmiName = RmiName_NotiSetSvrRotationGacha;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiSetSvrRotationGacha (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiSetSvrRotationGacha);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiSetSvrRotationGacha;
        summary.rmiName = RmiName_NotiSetSvrRotationGacha;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiSetSvrSecretQuestOpt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoSecretQuestOpt _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiSetSvrSecretQuestOpt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiSetSvrSecretQuestOpt, RmiName_NotiSetSvrSecretQuestOpt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiSetSvrSecretQuestOpt;
        summary.rmiName = RmiName_NotiSetSvrSecretQuestOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiSetSvrSecretQuestOpt (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiSetSvrSecretQuestOpt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiSetSvrSecretQuestOpt;
        summary.rmiName = RmiName_NotiSetSvrSecretQuestOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateDailyMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Daily _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateDailyMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateDailyMission, RmiName_NotiUpdateDailyMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateDailyMission;
        summary.rmiName = RmiName_NotiUpdateDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateDailyMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateDailyMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateDailyMission;
        summary.rmiName = RmiName_NotiUpdateDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiResetWeekMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Weekly _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiResetWeekMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiResetWeekMission, RmiName_NotiResetWeekMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiResetWeekMission;
        summary.rmiName = RmiName_NotiResetWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiResetWeekMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiResetWeekMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiResetWeekMission;
        summary.rmiName = RmiName_NotiResetWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateWeekMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Weekly _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateWeekMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateWeekMission, RmiName_NotiUpdateWeekMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateWeekMission;
        summary.rmiName = RmiName_NotiUpdateWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateWeekMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateWeekMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateWeekMission;
        summary.rmiName = RmiName_NotiUpdateWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateInfluMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Influ _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateInfluMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateInfluMission, RmiName_NotiUpdateInfluMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateInfluMission;
        summary.rmiName = RmiName_NotiUpdateInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateInfluMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateInfluMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateInfluMission;
        summary.rmiName = RmiName_NotiUpdateInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUserInfluMissionChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInfluChangeList.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUserInfluMissionChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUserInfluMissionChange, RmiName_NotiUserInfluMissionChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUserInfluMissionChange;
        summary.rmiName = RmiName_NotiUserInfluMissionChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUserInfluMissionChange (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUserInfluMissionChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUserInfluMissionChange;
        summary.rmiName = RmiName_NotiUserInfluMissionChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateGllaMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Guerrilla _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateGllaMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateGllaMission, RmiName_NotiUpdateGllaMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateGllaMission;
        summary.rmiName = RmiName_NotiUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateGllaMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateGllaMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateGllaMission;
        summary.rmiName = RmiName_NotiUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdatePassMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Pass _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdatePassMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdatePassMission, RmiName_NotiUpdatePassMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdatePassMission;
        summary.rmiName = RmiName_NotiUpdatePassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdatePassMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdatePassMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdatePassMission;
        summary.rmiName = RmiName_NotiUpdatePassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUserPassChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPassChangeList.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUserPassChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUserPassChange, RmiName_NotiUserPassChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUserPassChange;
        summary.rmiName = RmiName_NotiUserPassChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUserPassChange (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUserPassChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUserPassChange;
        summary.rmiName = RmiName_NotiUserPassChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUserEventChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEventChangeList.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUserEventChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUserEventChange, RmiName_NotiUserEventChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUserEventChange;
        summary.rmiName = RmiName_NotiUserEventChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUserEventChange (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUserEventChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUserEventChange;
        summary.rmiName = RmiName_NotiUserEventChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateArenaTime(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaSeasonTime _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateArenaTime);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateArenaTime, RmiName_NotiUpdateArenaTime,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateArenaTime;
        summary.rmiName = RmiName_NotiUpdateArenaTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateArenaTime (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateArenaTime);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateArenaTime;
        summary.rmiName = RmiName_NotiUpdateArenaTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateRaidTime(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidSeasonTime _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
System.UInt32 _openTypeValue; PN_MarshalerEx.Read(__msg,out _openTypeValue);	
core.PostCheckReadMessage(__msg, RmiName_NotiUpdateRaidTime);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
parameterString+=_openTypeValue.ToString()+",";
        NotifyCallFromStub(Common.NotiUpdateRaidTime, RmiName_NotiUpdateRaidTime,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateRaidTime;
        summary.rmiName = RmiName_NotiUpdateRaidTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateRaidTime (remote,ctx , _pkt, _openTypeValue );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateRaidTime);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateRaidTime;
        summary.rmiName = RmiName_NotiUpdateRaidTime;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUpdateRaidInitStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotiUpdateRaidInitStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotiUpdateRaidInitStart, RmiName_NotiUpdateRaidInitStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUpdateRaidInitStart;
        summary.rmiName = RmiName_NotiUpdateRaidInitStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUpdateRaidInitStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUpdateRaidInitStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUpdateRaidInitStart;
        summary.rmiName = RmiName_NotiUpdateRaidInitStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCommunityUserArenaOn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _onArenaUuid; PN_MarshalerEx.Read(__msg,out _onArenaUuid);	
core.PostCheckReadMessage(__msg, RmiName_NotiCommunityUserArenaOn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_onArenaUuid.ToString()+",";
        NotifyCallFromStub(Common.NotiCommunityUserArenaOn, RmiName_NotiCommunityUserArenaOn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCommunityUserArenaOn;
        summary.rmiName = RmiName_NotiCommunityUserArenaOn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCommunityUserArenaOn (remote,ctx , _onArenaUuid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCommunityUserArenaOn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCommunityUserArenaOn;
        summary.rmiName = RmiName_NotiCommunityUserArenaOn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCommunityUserCallCnt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuCallCntNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCommunityUserCallCnt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCommunityUserCallCnt, RmiName_NotiCommunityUserCallCnt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCommunityUserCallCnt;
        summary.rmiName = RmiName_NotiCommunityUserCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCommunityUserCallCnt (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCommunityUserCallCnt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCommunityUserCallCnt;
        summary.rmiName = RmiName_NotiCommunityUserCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCommunitySetArenaTowerID(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuArenaTowerIDNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCommunitySetArenaTowerID);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCommunitySetArenaTowerID, RmiName_NotiCommunitySetArenaTowerID,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCommunitySetArenaTowerID;
        summary.rmiName = RmiName_NotiCommunitySetArenaTowerID;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCommunitySetArenaTowerID (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCommunitySetArenaTowerID);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCommunitySetArenaTowerID;
        summary.rmiName = RmiName_NotiCommunitySetArenaTowerID;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFriendFromAdd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriend _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFriendFromAdd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFriendFromAdd, RmiName_NotiFriendFromAdd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFriendFromAdd;
        summary.rmiName = RmiName_NotiFriendFromAdd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFriendFromAdd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFriendFromAdd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFriendFromAdd;
        summary.rmiName = RmiName_NotiFriendFromAdd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFriendFromDel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFriendFromDel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFriendFromDel, RmiName_NotiFriendFromDel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFriendFromDel;
        summary.rmiName = RmiName_NotiFriendFromDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFriendFromDel (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFriendFromDel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFriendFromDel;
        summary.rmiName = RmiName_NotiFriendFromDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFriendAnswer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuAnswerNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFriendAnswer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFriendAnswer, RmiName_NotiFriendAnswer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFriendAnswer;
        summary.rmiName = RmiName_NotiFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFriendAnswer (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFriendAnswer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFriendAnswer;
        summary.rmiName = RmiName_NotiFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFriendKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuKickNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFriendKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFriendKick, RmiName_NotiFriendKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFriendKick;
        summary.rmiName = RmiName_NotiFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFriendKick (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFriendKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFriendKick;
        summary.rmiName = RmiName_NotiFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFriendFlagUpdate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendFlagUpdateNoti _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFriendFlagUpdate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFriendFlagUpdate, RmiName_NotiFriendFlagUpdate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFriendFlagUpdate;
        summary.rmiName = RmiName_NotiFriendFlagUpdate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFriendFlagUpdate (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFriendFlagUpdate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFriendFlagUpdate;
        summary.rmiName = RmiName_NotiFriendFlagUpdate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckPing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTime _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckPing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckPing, RmiName_AckPing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckPing;
        summary.rmiName = RmiName_AckPing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckPing (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckPing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckPing;
        summary.rmiName = RmiName_AckPing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLogOnCreditKey(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _err; PN_MarshalerEx.Read(__msg,out _err);	
core.PostCheckReadMessage(__msg, RmiName_AckLogOnCreditKey);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_err.ToString()+",";
        NotifyCallFromStub(Common.AckLogOnCreditKey, RmiName_AckLogOnCreditKey,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLogOnCreditKey;
        summary.rmiName = RmiName_AckLogOnCreditKey;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLogOnCreditKey (remote,ctx , _err );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLogOnCreditKey);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLogOnCreditKey;
        summary.rmiName = RmiName_AckLogOnCreditKey;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLogOut(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_AckLogOut);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.AckLogOut, RmiName_AckLogOut,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLogOut;
        summary.rmiName = RmiName_AckLogOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLogOut (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLogOut);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLogOut;
        summary.rmiName = RmiName_AckLogOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetTotlaRelocateCntToNotComplete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetTotlaRelocateCntToNotComplete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetTotlaRelocateCntToNotComplete, RmiName_AckGetTotlaRelocateCntToNotComplete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetTotlaRelocateCntToNotComplete;
        summary.rmiName = RmiName_AckGetTotlaRelocateCntToNotComplete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetTotlaRelocateCntToNotComplete (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetTotlaRelocateCntToNotComplete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetTotlaRelocateCntToNotComplete;
        summary.rmiName = RmiName_AckGetTotlaRelocateCntToNotComplete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRelocateUserInfoSet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRelocateUser _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRelocateUserInfoSet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRelocateUserInfoSet, RmiName_AckRelocateUserInfoSet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRelocateUserInfoSet;
        summary.rmiName = RmiName_AckRelocateUserInfoSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRelocateUserInfoSet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRelocateUserInfoSet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRelocateUserInfoSet;
        summary.rmiName = RmiName_AckRelocateUserInfoSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRelocateUserComplate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRelocateUser _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRelocateUserComplate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRelocateUserComplate, RmiName_AckRelocateUserComplate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRelocateUserComplate;
        summary.rmiName = RmiName_AckRelocateUserComplate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRelocateUserComplate (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRelocateUserComplate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRelocateUserComplate;
        summary.rmiName = RmiName_AckRelocateUserComplate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRefrashUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRefreahUserInfo _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRefrashUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRefrashUserInfo, RmiName_AckRefrashUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRefrashUserInfo;
        summary.rmiName = RmiName_AckRefrashUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRefrashUserInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRefrashUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRefrashUserInfo;
        summary.rmiName = RmiName_AckRefrashUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckReConnectUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoReconnectUserInfoAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckReConnectUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckReConnectUserInfo, RmiName_AckReConnectUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckReConnectUserInfo;
        summary.rmiName = RmiName_AckReConnectUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckReConnectUserInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckReConnectUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckReConnectUserInfo;
        summary.rmiName = RmiName_AckReConnectUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAccountCode(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _code; PN_MarshalerEx.Read(__msg,out _code);	
PktInfoStr _password; PN_MarshalerEx.Read(__msg,out _password);	
core.PostCheckReadMessage(__msg, RmiName_AckAccountCode);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_code.ToString()+",";
parameterString+=_password.ToString()+",";
        NotifyCallFromStub(Common.AckAccountCode, RmiName_AckAccountCode,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAccountCode;
        summary.rmiName = RmiName_AckAccountCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAccountCode (remote,ctx , _code, _password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAccountCode);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAccountCode;
        summary.rmiName = RmiName_AckAccountCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAccountSetPassword(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_AckAccountSetPassword);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.AckAccountSetPassword, RmiName_AckAccountSetPassword,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAccountSetPassword;
        summary.rmiName = RmiName_AckAccountSetPassword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAccountSetPassword (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAccountSetPassword);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAccountSetPassword;
        summary.rmiName = RmiName_AckAccountSetPassword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAccountCodeReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGoods _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAccountCodeReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAccountCodeReward, RmiName_AckAccountCodeReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAccountCodeReward;
        summary.rmiName = RmiName_AckAccountCodeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAccountCodeReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAccountCodeReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAccountCodeReward;
        summary.rmiName = RmiName_AckAccountCodeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAccountLinkReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGoods _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAccountLinkReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAccountLinkReward, RmiName_AckAccountLinkReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAccountLinkReward;
        summary.rmiName = RmiName_AckAccountLinkReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAccountLinkReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAccountLinkReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAccountLinkReward;
        summary.rmiName = RmiName_AckAccountLinkReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLinkAccountList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAccountLinkList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLinkAccountList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLinkAccountList, RmiName_AckLinkAccountList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLinkAccountList;
        summary.rmiName = RmiName_AckLinkAccountList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLinkAccountList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLinkAccountList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLinkAccountList;
        summary.rmiName = RmiName_AckLinkAccountList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAddLinkAccountAuth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAccountLinkInfo _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAddLinkAccountAuth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAddLinkAccountAuth, RmiName_AckAddLinkAccountAuth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAddLinkAccountAuth;
        summary.rmiName = RmiName_AckAddLinkAccountAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAddLinkAccountAuth (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAddLinkAccountAuth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAddLinkAccountAuth;
        summary.rmiName = RmiName_AckAddLinkAccountAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetUserInfoFromAccountLink(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserInfoFromLinkAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetUserInfoFromAccountLink);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetUserInfoFromAccountLink, RmiName_AckGetUserInfoFromAccountLink,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetUserInfoFromAccountLink;
        summary.rmiName = RmiName_AckGetUserInfoFromAccountLink;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetUserInfoFromAccountLink (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetUserInfoFromAccountLink);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetUserInfoFromAccountLink;
        summary.rmiName = RmiName_AckGetUserInfoFromAccountLink;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckPushNotifiTokenSet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoPushNotiSetToken _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckPushNotifiTokenSet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckPushNotifiTokenSet, RmiName_AckPushNotifiTokenSet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckPushNotifiTokenSet;
        summary.rmiName = RmiName_AckPushNotifiTokenSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckPushNotifiTokenSet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckPushNotifiTokenSet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckPushNotifiTokenSet;
        summary.rmiName = RmiName_AckPushNotifiTokenSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckReflashLoginBonus(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoLoginBonus _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckReflashLoginBonus);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckReflashLoginBonus, RmiName_AckReflashLoginBonus,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckReflashLoginBonus;
        summary.rmiName = RmiName_AckReflashLoginBonus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckReflashLoginBonus (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckReflashLoginBonus);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckReflashLoginBonus;
        summary.rmiName = RmiName_AckReflashLoginBonus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardTakeAchieve(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAchieveReward _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardTakeAchieve);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardTakeAchieve, RmiName_AckRewardTakeAchieve,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardTakeAchieve;
        summary.rmiName = RmiName_AckRewardTakeAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardTakeAchieve (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardTakeAchieve);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardTakeAchieve;
        summary.rmiName = RmiName_AckRewardTakeAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardTakeAchieveEvent(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAchieveEventReward _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardTakeAchieveEvent);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardTakeAchieveEvent, RmiName_AckRewardTakeAchieveEvent,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardTakeAchieveEvent;
        summary.rmiName = RmiName_AckRewardTakeAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardTakeAchieveEvent (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardTakeAchieveEvent);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardTakeAchieveEvent;
        summary.rmiName = RmiName_AckRewardTakeAchieveEvent;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardDailyMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdDailyMissionAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardDailyMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardDailyMission, RmiName_AckRewardDailyMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardDailyMission;
        summary.rmiName = RmiName_AckRewardDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardDailyMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardDailyMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardDailyMission;
        summary.rmiName = RmiName_AckRewardDailyMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardWeekMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _rewardFlag; PN_MarshalerEx.Read(__msg,out _rewardFlag);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardWeekMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_rewardFlag.ToString()+",";
        NotifyCallFromStub(Common.AckRewardWeekMission, RmiName_AckRewardWeekMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardWeekMission;
        summary.rmiName = RmiName_AckRewardWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardWeekMission (remote,ctx , _rewardFlag );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardWeekMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardWeekMission;
        summary.rmiName = RmiName_AckRewardWeekMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardInfluMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdInfluMissionAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardInfluMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardInfluMission, RmiName_AckRewardInfluMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardInfluMission;
        summary.rmiName = RmiName_AckRewardInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardInfluMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardInfluMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardInfluMission;
        summary.rmiName = RmiName_AckRewardInfluMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUpdateGllaMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUpdateGllaMission _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUpdateGllaMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUpdateGllaMission, RmiName_AckUpdateGllaMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUpdateGllaMission;
        summary.rmiName = RmiName_AckUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUpdateGllaMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUpdateGllaMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUpdateGllaMission;
        summary.rmiName = RmiName_AckUpdateGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardGllaMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Guerrilla _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardGllaMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardGllaMission, RmiName_AckRewardGllaMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardGllaMission;
        summary.rmiName = RmiName_AckRewardGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardGllaMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardGllaMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardGllaMission;
        summary.rmiName = RmiName_AckRewardGllaMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardPassMission(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMission.Pass _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardPassMission);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardPassMission, RmiName_AckRewardPassMission,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardPassMission;
        summary.rmiName = RmiName_AckRewardPassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardPassMission (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardPassMission);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardPassMission;
        summary.rmiName = RmiName_AckRewardPassMission;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRewardPass(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdPassAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRewardPass);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRewardPass, RmiName_AckRewardPass,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRewardPass;
        summary.rmiName = RmiName_AckRewardPass;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRewardPass (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRewardPass);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRewardPass;
        summary.rmiName = RmiName_AckRewardPass;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEventRewardReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEventRewardReset _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEventRewardReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEventRewardReset, RmiName_AckEventRewardReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEventRewardReset;
        summary.rmiName = RmiName_AckEventRewardReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEventRewardReset (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEventRewardReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEventRewardReset;
        summary.rmiName = RmiName_AckEventRewardReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEventRewardTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEventRewardTake _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEventRewardTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEventRewardTake, RmiName_AckEventRewardTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEventRewardTake;
        summary.rmiName = RmiName_AckEventRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEventRewardTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEventRewardTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEventRewardTake;
        summary.rmiName = RmiName_AckEventRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEventLgnRewardTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoEvtLgnRwdAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEventLgnRewardTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEventLgnRewardTake, RmiName_AckEventLgnRewardTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEventLgnRewardTake;
        summary.rmiName = RmiName_AckEventLgnRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEventLgnRewardTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEventLgnRewardTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEventLgnRewardTake;
        summary.rmiName = RmiName_AckEventLgnRewardTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetTutorialVal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _tutoVal; PN_MarshalerEx.Read(__msg,out _tutoVal);	
core.PostCheckReadMessage(__msg, RmiName_AckSetTutorialVal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tutoVal.ToString()+",";
        NotifyCallFromStub(Common.AckSetTutorialVal, RmiName_AckSetTutorialVal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetTutorialVal;
        summary.rmiName = RmiName_AckSetTutorialVal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetTutorialVal (remote,ctx , _tutoVal );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetTutorialVal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetTutorialVal;
        summary.rmiName = RmiName_AckSetTutorialVal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetTutorialFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _tutoFlag; PN_MarshalerEx.Read(__msg,out _tutoFlag);	
core.PostCheckReadMessage(__msg, RmiName_AckSetTutorialFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tutoFlag.ToString()+",";
        NotifyCallFromStub(Common.AckSetTutorialFlag, RmiName_AckSetTutorialFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetTutorialFlag;
        summary.rmiName = RmiName_AckSetTutorialFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetTutorialFlag (remote,ctx , _tutoFlag );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetTutorialFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetTutorialFlag;
        summary.rmiName = RmiName_AckSetTutorialFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAddCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAddChar _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAddCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAddCharacter, RmiName_AckAddCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAddCharacter;
        summary.rmiName = RmiName_AckAddCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAddCharacter (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAddCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAddCharacter;
        summary.rmiName = RmiName_AckAddCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckChangePreferenceNum(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDValue _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckChangePreferenceNum);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckChangePreferenceNum, RmiName_AckChangePreferenceNum,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckChangePreferenceNum;
        summary.rmiName = RmiName_AckChangePreferenceNum;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckChangePreferenceNum (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckChangePreferenceNum);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckChangePreferenceNum;
        summary.rmiName = RmiName_AckChangePreferenceNum;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckChangeMainChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUIDValue _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckChangeMainChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckChangeMainChar, RmiName_AckChangeMainChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckChangeMainChar;
        summary.rmiName = RmiName_AckChangeMainChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckChangeMainChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckChangeMainChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckChangeMainChar;
        summary.rmiName = RmiName_AckChangeMainChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGradeUpChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharGradeUp _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGradeUpChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGradeUpChar, RmiName_AckGradeUpChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGradeUpChar;
        summary.rmiName = RmiName_AckGradeUpChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGradeUpChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGradeUpChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGradeUpChar;
        summary.rmiName = RmiName_AckGradeUpChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetGradeLvChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharGradeExpLv _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetGradeLvChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetGradeLvChar, RmiName_AckSetGradeLvChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetGradeLvChar;
        summary.rmiName = RmiName_AckSetGradeLvChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetGradeLvChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetGradeLvChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetGradeLvChar;
        summary.rmiName = RmiName_AckSetGradeLvChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetMainCostumeChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharSetMainCostumeAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetMainCostumeChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetMainCostumeChar, RmiName_AckSetMainCostumeChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetMainCostumeChar;
        summary.rmiName = RmiName_AckSetMainCostumeChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetMainCostumeChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetMainCostumeChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetMainCostumeChar;
        summary.rmiName = RmiName_AckSetMainCostumeChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRandomCostumeDyeing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRandomCostumeDyeing _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRandomCostumeDyeing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRandomCostumeDyeing, RmiName_AckRandomCostumeDyeing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRandomCostumeDyeing;
        summary.rmiName = RmiName_AckRandomCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRandomCostumeDyeing (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRandomCostumeDyeing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRandomCostumeDyeing;
        summary.rmiName = RmiName_AckRandomCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetCostumeDyeing(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCostume.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetCostumeDyeing);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetCostumeDyeing, RmiName_AckSetCostumeDyeing,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetCostumeDyeing;
        summary.rmiName = RmiName_AckSetCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetCostumeDyeing (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetCostumeDyeing);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetCostumeDyeing;
        summary.rmiName = RmiName_AckSetCostumeDyeing;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCostumeDyeingLock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCostumeDyeingLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCostumeDyeingLock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCostumeDyeingLock, RmiName_AckCostumeDyeingLock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCostumeDyeingLock;
        summary.rmiName = RmiName_AckCostumeDyeingLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCostumeDyeingLock (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCostumeDyeingLock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCostumeDyeingLock;
        summary.rmiName = RmiName_AckCostumeDyeingLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserCostumeColor(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserCostumeColor _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserCostumeColor);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserCostumeColor, RmiName_AckUserCostumeColor,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserCostumeColor;
        summary.rmiName = RmiName_AckUserCostumeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserCostumeColor (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserCostumeColor);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserCostumeColor;
        summary.rmiName = RmiName_AckUserCostumeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEquipWeaponChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharEquipWeapon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEquipWeaponChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEquipWeaponChar, RmiName_AckEquipWeaponChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEquipWeaponChar;
        summary.rmiName = RmiName_AckEquipWeaponChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEquipWeaponChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEquipWeaponChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEquipWeaponChar;
        summary.rmiName = RmiName_AckEquipWeaponChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplySkillInChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharSlotSkill _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplySkillInChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplySkillInChar, RmiName_AckApplySkillInChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplySkillInChar;
        summary.rmiName = RmiName_AckApplySkillInChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplySkillInChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplySkillInChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplySkillInChar;
        summary.rmiName = RmiName_AckApplySkillInChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLvUpSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoSkillLvUp _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLvUpSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLvUpSkill, RmiName_AckLvUpSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLvUpSkill;
        summary.rmiName = RmiName_AckLvUpSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLvUpSkill (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLvUpSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLvUpSkill;
        summary.rmiName = RmiName_AckLvUpSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLvUpUserSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserSklLvUpAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLvUpUserSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLvUpUserSkill, RmiName_AckLvUpUserSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLvUpUserSkill;
        summary.rmiName = RmiName_AckLvUpUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLvUpUserSkill (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLvUpUserSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLvUpUserSkill;
        summary.rmiName = RmiName_AckLvUpUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckResetUserSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserSklReset _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckResetUserSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckResetUserSkill, RmiName_AckResetUserSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckResetUserSkill;
        summary.rmiName = RmiName_AckResetUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckResetUserSkill (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckResetUserSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckResetUserSkill;
        summary.rmiName = RmiName_AckResetUserSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGivePresentChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGivePresentCharAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGivePresentChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGivePresentChar, RmiName_AckGivePresentChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGivePresentChar;
        summary.rmiName = RmiName_AckGivePresentChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGivePresentChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGivePresentChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGivePresentChar;
        summary.rmiName = RmiName_AckGivePresentChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckResetSecretCntChar(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCharSecretCntRst _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckResetSecretCntChar);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckResetSecretCntChar, RmiName_AckResetSecretCntChar,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckResetSecretCntChar;
        summary.rmiName = RmiName_AckResetSecretCntChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckResetSecretCntChar (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckResetSecretCntChar);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckResetSecretCntChar;
        summary.rmiName = RmiName_AckResetSecretCntChar;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidHPRestore(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRestoreHPAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidHPRestore);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidHPRestore, RmiName_AckRaidHPRestore,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidHPRestore;
        summary.rmiName = RmiName_AckRaidHPRestore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidHPRestore (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidHPRestore);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidHPRestore;
        summary.rmiName = RmiName_AckRaidHPRestore;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStageStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameStartAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckStageStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckStageStart, RmiName_AckStageStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStageStart;
        summary.rmiName = RmiName_AckStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStageStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStageStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStageStart;
        summary.rmiName = RmiName_AckStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStageEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameResultAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
PktInfoProductPack _pktProduct; PN_MarshalerEx.Read(__msg,out _pktProduct);	
core.PostCheckReadMessage(__msg, RmiName_AckStageEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
parameterString+=_pktProduct.ToString()+",";
        NotifyCallFromStub(Common.AckStageEnd, RmiName_AckStageEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStageEnd;
        summary.rmiName = RmiName_AckStageEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStageEnd (remote,ctx , _pkt, _pktProduct );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStageEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStageEnd;
        summary.rmiName = RmiName_AckStageEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStageEndFail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStageGameEndFail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckStageEndFail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckStageEndFail, RmiName_AckStageEndFail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStageEndFail;
        summary.rmiName = RmiName_AckStageEndFail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStageEndFail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStageEndFail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStageEndFail;
        summary.rmiName = RmiName_AckStageEndFail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStageContinue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoConsumeItemAndGoods _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckStageContinue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckStageContinue, RmiName_AckStageContinue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStageContinue;
        summary.rmiName = RmiName_AckStageContinue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStageContinue (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStageContinue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStageContinue;
        summary.rmiName = RmiName_AckStageContinue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidStageDrop(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidStageDrop _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidStageDrop);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidStageDrop, RmiName_AckRaidStageDrop,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidStageDrop;
        summary.rmiName = RmiName_AckRaidStageDrop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidStageDrop (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidStageDrop);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidStageDrop;
        summary.rmiName = RmiName_AckRaidStageDrop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckBookNewConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBookNewConfirm _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckBookNewConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckBookNewConfirm, RmiName_AckBookNewConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckBookNewConfirm;
        summary.rmiName = RmiName_AckBookNewConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckBookNewConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckBookNewConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckBookNewConfirm;
        summary.rmiName = RmiName_AckBookNewConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckTimeAtkRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTimeAtkRankStageList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckTimeAtkRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckTimeAtkRankingList, RmiName_AckTimeAtkRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckTimeAtkRankingList;
        summary.rmiName = RmiName_AckTimeAtkRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckTimeAtkRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckTimeAtkRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckTimeAtkRankingList;
        summary.rmiName = RmiName_AckTimeAtkRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckTimeAtkRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTimeAtkRankerDetailAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckTimeAtkRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckTimeAtkRankerDetail, RmiName_AckTimeAtkRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckTimeAtkRankerDetail;
        summary.rmiName = RmiName_AckTimeAtkRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckTimeAtkRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckTimeAtkRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckTimeAtkRankerDetail;
        summary.rmiName = RmiName_AckTimeAtkRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckInitRaidSeasonData(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInitRaidSeasonData _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckInitRaidSeasonData);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckInitRaidSeasonData, RmiName_AckInitRaidSeasonData,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckInitRaidSeasonData;
        summary.rmiName = RmiName_AckInitRaidSeasonData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckInitRaidSeasonData (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckInitRaidSeasonData);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckInitRaidSeasonData;
        summary.rmiName = RmiName_AckInitRaidSeasonData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankStageList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidRankingList, RmiName_AckRaidRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidRankingList;
        summary.rmiName = RmiName_AckRaidRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidRankingList;
        summary.rmiName = RmiName_AckRaidRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankerDetailAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidRankerDetail, RmiName_AckRaidRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidRankerDetail;
        summary.rmiName = RmiName_AckRaidRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidRankerDetail;
        summary.rmiName = RmiName_AckRaidRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidFirstRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankStageList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidFirstRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidFirstRankingList, RmiName_AckRaidFirstRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidFirstRankingList;
        summary.rmiName = RmiName_AckRaidFirstRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidFirstRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidFirstRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidFirstRankingList;
        summary.rmiName = RmiName_AckRaidFirstRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidFirstRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidRankerDetailAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidFirstRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidFirstRankerDetail, RmiName_AckRaidFirstRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidFirstRankerDetail;
        summary.rmiName = RmiName_AckRaidFirstRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidFirstRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidFirstRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidFirstRankerDetail;
        summary.rmiName = RmiName_AckRaidFirstRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetRaidTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserRaidTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetRaidTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetRaidTeam, RmiName_AckSetRaidTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetRaidTeam;
        summary.rmiName = RmiName_AckSetRaidTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetRaidTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetRaidTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetRaidTeam;
        summary.rmiName = RmiName_AckSetRaidTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaSeasonPlay(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserArenaRec _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaSeasonPlay);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaSeasonPlay, RmiName_AckArenaSeasonPlay,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaSeasonPlay;
        summary.rmiName = RmiName_AckArenaSeasonPlay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaSeasonPlay (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaSeasonPlay);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaSeasonPlay;
        summary.rmiName = RmiName_AckArenaSeasonPlay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetArenaTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserArenaTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetArenaTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetArenaTeam, RmiName_AckSetArenaTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetArenaTeam;
        summary.rmiName = RmiName_AckSetArenaTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetArenaTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetArenaTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetArenaTeam;
        summary.rmiName = RmiName_AckSetArenaTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaGameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaGameStartAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaGameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaGameStart, RmiName_AckArenaGameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaGameStart;
        summary.rmiName = RmiName_AckArenaGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaGameStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaGameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaGameStart;
        summary.rmiName = RmiName_AckArenaGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaGameEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaGameEndAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaGameEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaGameEnd, RmiName_AckArenaGameEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaGameEnd;
        summary.rmiName = RmiName_AckArenaGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaGameEnd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaGameEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaGameEnd;
        summary.rmiName = RmiName_AckArenaGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaEnemySearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaSearchEnemyAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaEnemySearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaEnemySearch, RmiName_AckArenaEnemySearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaEnemySearch;
        summary.rmiName = RmiName_AckArenaEnemySearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaEnemySearch (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaEnemySearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaEnemySearch;
        summary.rmiName = RmiName_AckArenaEnemySearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaRankingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaRankList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaRankingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaRankingList, RmiName_AckArenaRankingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaRankingList;
        summary.rmiName = RmiName_AckArenaRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaRankingList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaRankingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaRankingList;
        summary.rmiName = RmiName_AckArenaRankingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaRankerDetail(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaDetail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaRankerDetail);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaRankerDetail, RmiName_AckArenaRankerDetail,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaRankerDetail;
        summary.rmiName = RmiName_AckArenaRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaRankerDetail (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaRankerDetail);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaRankerDetail;
        summary.rmiName = RmiName_AckArenaRankerDetail;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetArenaTowerTeam(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserArenaTeam _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetArenaTowerTeam);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetArenaTowerTeam, RmiName_AckSetArenaTowerTeam,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetArenaTowerTeam;
        summary.rmiName = RmiName_AckSetArenaTowerTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetArenaTowerTeam (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetArenaTowerTeam);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetArenaTowerTeam;
        summary.rmiName = RmiName_AckSetArenaTowerTeam;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaTowerGameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaTowerGameStartAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaTowerGameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaTowerGameStart, RmiName_AckArenaTowerGameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaTowerGameStart;
        summary.rmiName = RmiName_AckArenaTowerGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaTowerGameStart (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaTowerGameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaTowerGameStart;
        summary.rmiName = RmiName_AckArenaTowerGameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckArenaTowerGameEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoArenaTowerGameEndAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckArenaTowerGameEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckArenaTowerGameEnd, RmiName_AckArenaTowerGameEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckArenaTowerGameEnd;
        summary.rmiName = RmiName_AckArenaTowerGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckArenaTowerGameEnd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckArenaTowerGameEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckArenaTowerGameEnd;
        summary.rmiName = RmiName_AckArenaTowerGameEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUnexpectedPackageDailyReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUnexpectedPackageDailyRewardAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUnexpectedPackageDailyReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUnexpectedPackageDailyReward, RmiName_AckUnexpectedPackageDailyReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUnexpectedPackageDailyReward;
        summary.rmiName = RmiName_AckUnexpectedPackageDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUnexpectedPackageDailyReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUnexpectedPackageDailyReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUnexpectedPackageDailyReward;
        summary.rmiName = RmiName_AckUnexpectedPackageDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCharLvUnexpectedPackageHardOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUnexpectedPackage _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCharLvUnexpectedPackageHardOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCharLvUnexpectedPackageHardOpen, RmiName_AckCharLvUnexpectedPackageHardOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCharLvUnexpectedPackageHardOpen;
        summary.rmiName = RmiName_AckCharLvUnexpectedPackageHardOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCharLvUnexpectedPackageHardOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCharLvUnexpectedPackageHardOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCharLvUnexpectedPackageHardOpen;
        summary.rmiName = RmiName_AckCharLvUnexpectedPackageHardOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAccountDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAccountDelete _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAccountDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAccountDelete, RmiName_AckAccountDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAccountDelete;
        summary.rmiName = RmiName_AckAccountDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAccountDelete (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAccountDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAccountDelete;
        summary.rmiName = RmiName_AckAccountDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetUserPresetList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserPreset _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetUserPresetList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetUserPresetList, RmiName_AckGetUserPresetList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetUserPresetList;
        summary.rmiName = RmiName_AckGetUserPresetList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetUserPresetList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetUserPresetList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetUserPresetList;
        summary.rmiName = RmiName_AckGetUserPresetList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAddOrUpdateUserPreset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserPreset.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAddOrUpdateUserPreset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAddOrUpdateUserPreset, RmiName_AckAddOrUpdateUserPreset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAddOrUpdateUserPreset;
        summary.rmiName = RmiName_AckAddOrUpdateUserPreset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAddOrUpdateUserPreset (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAddOrUpdateUserPreset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAddOrUpdateUserPreset;
        summary.rmiName = RmiName_AckAddOrUpdateUserPreset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserPresetLoad(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserPresetLoad _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserPresetLoad);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserPresetLoad, RmiName_AckUserPresetLoad,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserPresetLoad;
        summary.rmiName = RmiName_AckUserPresetLoad;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserPresetLoad (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserPresetLoad);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserPresetLoad;
        summary.rmiName = RmiName_AckUserPresetLoad;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserPresetChangeName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserPreset.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserPresetChangeName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserPresetChangeName, RmiName_AckUserPresetChangeName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserPresetChangeName;
        summary.rmiName = RmiName_AckUserPresetChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserPresetChangeName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserPresetChangeName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserPresetChangeName;
        summary.rmiName = RmiName_AckUserPresetChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleOpenAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleOpen, RmiName_AckCircleOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleOpen;
        summary.rmiName = RmiName_AckCircleOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleOpen;
        summary.rmiName = RmiName_AckCircleOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSuggestCircleList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGetSuggestCircleAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSuggestCircleList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSuggestCircleList, RmiName_AckSuggestCircleList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSuggestCircleList;
        summary.rmiName = RmiName_AckSuggestCircleList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSuggestCircleList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSuggestCircleList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSuggestCircleList;
        summary.rmiName = RmiName_AckSuggestCircleList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGetSuggestCircleAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleJoin, RmiName_AckCircleJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleJoin;
        summary.rmiName = RmiName_AckCircleJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleJoin (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleJoin;
        summary.rmiName = RmiName_AckCircleJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleJoinCancel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _circleID; PN_MarshalerEx.Read(__msg,out _circleID);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleJoinCancel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_circleID.ToString()+",";
        NotifyCallFromStub(Common.AckCircleJoinCancel, RmiName_AckCircleJoinCancel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleJoinCancel;
        summary.rmiName = RmiName_AckCircleJoinCancel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleJoinCancel (remote,ctx , _circleID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleJoinCancel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleJoinCancel;
        summary.rmiName = RmiName_AckCircleJoinCancel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleLobby _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleLobbyInfo, RmiName_AckCircleLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleLobbyInfo;
        summary.rmiName = RmiName_AckCircleLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleLobbyInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleLobbyInfo;
        summary.rmiName = RmiName_AckCircleLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleWithdrawal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleWithdrawalAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleWithdrawal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleWithdrawal, RmiName_AckCircleWithdrawal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleWithdrawal;
        summary.rmiName = RmiName_AckCircleWithdrawal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleWithdrawal (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleWithdrawal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleWithdrawal;
        summary.rmiName = RmiName_AckCircleWithdrawal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleDisperse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTime _activeNextJoinDate; PN_MarshalerEx.Read(__msg,out _activeNextJoinDate);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleDisperse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_activeNextJoinDate.ToString()+",";
        NotifyCallFromStub(Common.AckCircleDisperse, RmiName_AckCircleDisperse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleDisperse;
        summary.rmiName = RmiName_AckCircleDisperse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleDisperse (remote,ctx , _activeNextJoinDate );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleDisperse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleDisperse;
        summary.rmiName = RmiName_AckCircleDisperse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetCircleUserList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleUserList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetCircleUserList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetCircleUserList, RmiName_AckGetCircleUserList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetCircleUserList;
        summary.rmiName = RmiName_AckGetCircleUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetCircleUserList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetCircleUserList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetCircleUserList;
        summary.rmiName = RmiName_AckGetCircleUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeStateJoinWaitUser(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleUserList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeStateJoinWaitUser);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeStateJoinWaitUser, RmiName_AckCircleChangeStateJoinWaitUser,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeStateJoinWaitUser;
        summary.rmiName = RmiName_AckCircleChangeStateJoinWaitUser;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeStateJoinWaitUser (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeStateJoinWaitUser);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeStateJoinWaitUser;
        summary.rmiName = RmiName_AckCircleChangeStateJoinWaitUser;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCircleAcceptJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleAuthority _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCircleAcceptJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCircleAcceptJoin, RmiName_NotiCircleAcceptJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCircleAcceptJoin;
        summary.rmiName = RmiName_NotiCircleAcceptJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCircleAcceptJoin (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCircleAcceptJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCircleAcceptJoin;
        summary.rmiName = RmiName_NotiCircleAcceptJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleUserKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleUserKickAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleUserKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleUserKick, RmiName_AckCircleUserKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleUserKick;
        summary.rmiName = RmiName_AckCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleUserKick (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleUserKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleUserKick;
        summary.rmiName = RmiName_AckCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCircleUserKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleWithdrawalAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCircleUserKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCircleUserKick, RmiName_NotiCircleUserKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCircleUserKick;
        summary.rmiName = RmiName_NotiCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCircleUserKick (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCircleUserKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCircleUserKick;
        summary.rmiName = RmiName_NotiCircleUserKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeAuthLevel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChangeAuthority _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeAuthLevel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeAuthLevel, RmiName_AckCircleChangeAuthLevel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeAuthLevel;
        summary.rmiName = RmiName_AckCircleChangeAuthLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeAuthLevel (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeAuthLevel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeAuthLevel;
        summary.rmiName = RmiName_AckCircleChangeAuthLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCircleUserChangeAuth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        eCircleAuthLevel _authLevel; PN_MarshalerEx.Read(__msg,out _authLevel);	
core.PostCheckReadMessage(__msg, RmiName_NotiCircleUserChangeAuth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_authLevel.ToString()+",";
        NotifyCallFromStub(Common.NotiCircleUserChangeAuth, RmiName_NotiCircleUserChangeAuth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCircleUserChangeAuth;
        summary.rmiName = RmiName_NotiCircleUserChangeAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCircleUserChangeAuth (remote,ctx , _authLevel );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCircleUserChangeAuth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCircleUserChangeAuth;
        summary.rmiName = RmiName_NotiCircleUserChangeAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeMark(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleMarkSet _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeMark);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeMark, RmiName_AckCircleChangeMark,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeMark;
        summary.rmiName = RmiName_AckCircleChangeMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeMark (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeMark);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeMark;
        summary.rmiName = RmiName_AckCircleChangeMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChangeName _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeName, RmiName_AckCircleChangeName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeName;
        summary.rmiName = RmiName_AckCircleChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeName;
        summary.rmiName = RmiName_AckCircleChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeComment(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeComment);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeComment, RmiName_AckCircleChangeComment,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeComment;
        summary.rmiName = RmiName_AckCircleChangeComment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeComment (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeComment);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeComment;
        summary.rmiName = RmiName_AckCircleChangeComment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeMainLanguage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        eLANGUAGE _changeLang; PN_MarshalerEx.Read(__msg,out _changeLang);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeMainLanguage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_changeLang.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeMainLanguage, RmiName_AckCircleChangeMainLanguage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeMainLanguage;
        summary.rmiName = RmiName_AckCircleChangeMainLanguage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeMainLanguage (remote,ctx , _changeLang );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeMainLanguage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeMainLanguage;
        summary.rmiName = RmiName_AckCircleChangeMainLanguage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChangeSuggestAnotherLangOpt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool _state; PN_MarshalerEx.Read(__msg,out _state);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChangeSuggestAnotherLangOpt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_state.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChangeSuggestAnotherLangOpt, RmiName_AckCircleChangeSuggestAnotherLangOpt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChangeSuggestAnotherLangOpt;
        summary.rmiName = RmiName_AckCircleChangeSuggestAnotherLangOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChangeSuggestAnotherLangOpt (remote,ctx , _state );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChangeSuggestAnotherLangOpt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChangeSuggestAnotherLangOpt;
        summary.rmiName = RmiName_AckCircleChangeSuggestAnotherLangOpt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleAttendance(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleAttendanceRwd _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleAttendance);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleAttendance, RmiName_AckCircleAttendance,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleAttendance;
        summary.rmiName = RmiName_AckCircleAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleAttendance (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleAttendance);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleAttendance;
        summary.rmiName = RmiName_AckCircleAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleBuyMarkItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleBuyMarkItem _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleBuyMarkItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleBuyMarkItem, RmiName_AckCircleBuyMarkItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleBuyMarkItem;
        summary.rmiName = RmiName_AckCircleBuyMarkItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleBuyMarkItem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleBuyMarkItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleBuyMarkItem;
        summary.rmiName = RmiName_AckCircleBuyMarkItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCircleChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChat.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCircleChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCircleChat, RmiName_NotiCircleChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCircleChat;
        summary.rmiName = RmiName_NotiCircleChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCircleChat (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCircleChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCircleChat;
        summary.rmiName = RmiName_NotiCircleChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleGetMarkList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGetCircleMarkList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleGetMarkList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleGetMarkList, RmiName_AckCircleGetMarkList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleGetMarkList;
        summary.rmiName = RmiName_AckCircleGetMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleGetMarkList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleGetMarkList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleGetMarkList;
        summary.rmiName = RmiName_AckCircleGetMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleSearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleSimple.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleSearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleSearch, RmiName_AckCircleSearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleSearch;
        summary.rmiName = RmiName_AckCircleSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleSearch (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleSearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleSearch;
        summary.rmiName = RmiName_AckCircleSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCircleChatList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleChat _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCircleChatList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCircleChatList, RmiName_AckCircleChatList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCircleChatList;
        summary.rmiName = RmiName_AckCircleChatList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCircleChatList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCircleChatList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCircleChatList;
        summary.rmiName = RmiName_AckCircleChatList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiCircleChatNotimessage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCircleNotification.Piece _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiCircleChatNotimessage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiCircleChatNotimessage, RmiName_NotiCircleChatNotimessage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiCircleChatNotimessage;
        summary.rmiName = RmiName_NotiCircleChatNotimessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiCircleChatNotimessage (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiCircleChatNotimessage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiCircleChatNotimessage;
        summary.rmiName = RmiName_NotiCircleChatNotimessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotiSvrReloadTableInfo="NotiSvrReloadTableInfo";
public const string RmiName_NotiCloseServTime="NotiCloseServTime";
public const string RmiName_NotiCommonErr="NotiCommonErr";
public const string RmiName_NotiEmbargoWordErr="NotiEmbargoWordErr";
public const string RmiName_NotiCheckVersionErr="NotiCheckVersionErr";
public const string RmiName_NotiMoveUserInSvrToSvr="NotiMoveUserInSvrToSvr";
public const string RmiName_NotiUpdateTicket="NotiUpdateTicket";
public const string RmiName_NotiUserMarkTake="NotiUserMarkTake";
public const string RmiName_NotiAddMail="NotiAddMail";
public const string RmiName_NotiUpdateAchieve="NotiUpdateAchieve";
public const string RmiName_NotiUpdateAchieveEvent="NotiUpdateAchieveEvent";
public const string RmiName_NotiSetSvrRotationGacha="NotiSetSvrRotationGacha";
public const string RmiName_NotiSetSvrSecretQuestOpt="NotiSetSvrSecretQuestOpt";
public const string RmiName_NotiUpdateDailyMission="NotiUpdateDailyMission";
public const string RmiName_NotiResetWeekMission="NotiResetWeekMission";
public const string RmiName_NotiUpdateWeekMission="NotiUpdateWeekMission";
public const string RmiName_NotiUpdateInfluMission="NotiUpdateInfluMission";
public const string RmiName_NotiUserInfluMissionChange="NotiUserInfluMissionChange";
public const string RmiName_NotiUpdateGllaMission="NotiUpdateGllaMission";
public const string RmiName_NotiUpdatePassMission="NotiUpdatePassMission";
public const string RmiName_NotiUserPassChange="NotiUserPassChange";
public const string RmiName_NotiUserEventChange="NotiUserEventChange";
public const string RmiName_NotiUpdateArenaTime="NotiUpdateArenaTime";
public const string RmiName_NotiUpdateRaidTime="NotiUpdateRaidTime";
public const string RmiName_NotiUpdateRaidInitStart="NotiUpdateRaidInitStart";
public const string RmiName_NotiCommunityUserArenaOn="NotiCommunityUserArenaOn";
public const string RmiName_NotiCommunityUserCallCnt="NotiCommunityUserCallCnt";
public const string RmiName_NotiCommunitySetArenaTowerID="NotiCommunitySetArenaTowerID";
public const string RmiName_NotiFriendFromAdd="NotiFriendFromAdd";
public const string RmiName_NotiFriendFromDel="NotiFriendFromDel";
public const string RmiName_NotiFriendAnswer="NotiFriendAnswer";
public const string RmiName_NotiFriendKick="NotiFriendKick";
public const string RmiName_NotiFriendFlagUpdate="NotiFriendFlagUpdate";
public const string RmiName_AckPing="AckPing";
public const string RmiName_AckLogOnCreditKey="AckLogOnCreditKey";
public const string RmiName_AckLogOut="AckLogOut";
public const string RmiName_AckGetTotlaRelocateCntToNotComplete="AckGetTotlaRelocateCntToNotComplete";
public const string RmiName_AckRelocateUserInfoSet="AckRelocateUserInfoSet";
public const string RmiName_AckRelocateUserComplate="AckRelocateUserComplate";
public const string RmiName_AckRefrashUserInfo="AckRefrashUserInfo";
public const string RmiName_AckReConnectUserInfo="AckReConnectUserInfo";
public const string RmiName_AckAccountCode="AckAccountCode";
public const string RmiName_AckAccountSetPassword="AckAccountSetPassword";
public const string RmiName_AckAccountCodeReward="AckAccountCodeReward";
public const string RmiName_AckAccountLinkReward="AckAccountLinkReward";
public const string RmiName_AckLinkAccountList="AckLinkAccountList";
public const string RmiName_AckAddLinkAccountAuth="AckAddLinkAccountAuth";
public const string RmiName_AckGetUserInfoFromAccountLink="AckGetUserInfoFromAccountLink";
public const string RmiName_AckPushNotifiTokenSet="AckPushNotifiTokenSet";
public const string RmiName_AckReflashLoginBonus="AckReflashLoginBonus";
public const string RmiName_AckRewardTakeAchieve="AckRewardTakeAchieve";
public const string RmiName_AckRewardTakeAchieveEvent="AckRewardTakeAchieveEvent";
public const string RmiName_AckRewardDailyMission="AckRewardDailyMission";
public const string RmiName_AckRewardWeekMission="AckRewardWeekMission";
public const string RmiName_AckRewardInfluMission="AckRewardInfluMission";
public const string RmiName_AckUpdateGllaMission="AckUpdateGllaMission";
public const string RmiName_AckRewardGllaMission="AckRewardGllaMission";
public const string RmiName_AckRewardPassMission="AckRewardPassMission";
public const string RmiName_AckRewardPass="AckRewardPass";
public const string RmiName_AckEventRewardReset="AckEventRewardReset";
public const string RmiName_AckEventRewardTake="AckEventRewardTake";
public const string RmiName_AckEventLgnRewardTake="AckEventLgnRewardTake";
public const string RmiName_AckSetTutorialVal="AckSetTutorialVal";
public const string RmiName_AckSetTutorialFlag="AckSetTutorialFlag";
public const string RmiName_AckAddCharacter="AckAddCharacter";
public const string RmiName_AckChangePreferenceNum="AckChangePreferenceNum";
public const string RmiName_AckChangeMainChar="AckChangeMainChar";
public const string RmiName_AckGradeUpChar="AckGradeUpChar";
public const string RmiName_AckSetGradeLvChar="AckSetGradeLvChar";
public const string RmiName_AckSetMainCostumeChar="AckSetMainCostumeChar";
public const string RmiName_AckRandomCostumeDyeing="AckRandomCostumeDyeing";
public const string RmiName_AckSetCostumeDyeing="AckSetCostumeDyeing";
public const string RmiName_AckCostumeDyeingLock="AckCostumeDyeingLock";
public const string RmiName_AckUserCostumeColor="AckUserCostumeColor";
public const string RmiName_AckEquipWeaponChar="AckEquipWeaponChar";
public const string RmiName_AckApplySkillInChar="AckApplySkillInChar";
public const string RmiName_AckLvUpSkill="AckLvUpSkill";
public const string RmiName_AckLvUpUserSkill="AckLvUpUserSkill";
public const string RmiName_AckResetUserSkill="AckResetUserSkill";
public const string RmiName_AckGivePresentChar="AckGivePresentChar";
public const string RmiName_AckResetSecretCntChar="AckResetSecretCntChar";
public const string RmiName_AckRaidHPRestore="AckRaidHPRestore";
public const string RmiName_AckStageStart="AckStageStart";
public const string RmiName_AckStageEnd="AckStageEnd";
public const string RmiName_AckStageEndFail="AckStageEndFail";
public const string RmiName_AckStageContinue="AckStageContinue";
public const string RmiName_AckRaidStageDrop="AckRaidStageDrop";
public const string RmiName_AckBookNewConfirm="AckBookNewConfirm";
public const string RmiName_AckTimeAtkRankingList="AckTimeAtkRankingList";
public const string RmiName_AckTimeAtkRankerDetail="AckTimeAtkRankerDetail";
public const string RmiName_AckInitRaidSeasonData="AckInitRaidSeasonData";
public const string RmiName_AckRaidRankingList="AckRaidRankingList";
public const string RmiName_AckRaidRankerDetail="AckRaidRankerDetail";
public const string RmiName_AckRaidFirstRankingList="AckRaidFirstRankingList";
public const string RmiName_AckRaidFirstRankerDetail="AckRaidFirstRankerDetail";
public const string RmiName_AckSetRaidTeam="AckSetRaidTeam";
public const string RmiName_AckArenaSeasonPlay="AckArenaSeasonPlay";
public const string RmiName_AckSetArenaTeam="AckSetArenaTeam";
public const string RmiName_AckArenaGameStart="AckArenaGameStart";
public const string RmiName_AckArenaGameEnd="AckArenaGameEnd";
public const string RmiName_AckArenaEnemySearch="AckArenaEnemySearch";
public const string RmiName_AckArenaRankingList="AckArenaRankingList";
public const string RmiName_AckArenaRankerDetail="AckArenaRankerDetail";
public const string RmiName_AckSetArenaTowerTeam="AckSetArenaTowerTeam";
public const string RmiName_AckArenaTowerGameStart="AckArenaTowerGameStart";
public const string RmiName_AckArenaTowerGameEnd="AckArenaTowerGameEnd";
public const string RmiName_AckUnexpectedPackageDailyReward="AckUnexpectedPackageDailyReward";
public const string RmiName_AckCharLvUnexpectedPackageHardOpen="AckCharLvUnexpectedPackageHardOpen";
public const string RmiName_AckAccountDelete="AckAccountDelete";
public const string RmiName_AckGetUserPresetList="AckGetUserPresetList";
public const string RmiName_AckAddOrUpdateUserPreset="AckAddOrUpdateUserPreset";
public const string RmiName_AckUserPresetLoad="AckUserPresetLoad";
public const string RmiName_AckUserPresetChangeName="AckUserPresetChangeName";
public const string RmiName_AckCircleOpen="AckCircleOpen";
public const string RmiName_AckSuggestCircleList="AckSuggestCircleList";
public const string RmiName_AckCircleJoin="AckCircleJoin";
public const string RmiName_AckCircleJoinCancel="AckCircleJoinCancel";
public const string RmiName_AckCircleLobbyInfo="AckCircleLobbyInfo";
public const string RmiName_AckCircleWithdrawal="AckCircleWithdrawal";
public const string RmiName_AckCircleDisperse="AckCircleDisperse";
public const string RmiName_AckGetCircleUserList="AckGetCircleUserList";
public const string RmiName_AckCircleChangeStateJoinWaitUser="AckCircleChangeStateJoinWaitUser";
public const string RmiName_NotiCircleAcceptJoin="NotiCircleAcceptJoin";
public const string RmiName_AckCircleUserKick="AckCircleUserKick";
public const string RmiName_NotiCircleUserKick="NotiCircleUserKick";
public const string RmiName_AckCircleChangeAuthLevel="AckCircleChangeAuthLevel";
public const string RmiName_NotiCircleUserChangeAuth="NotiCircleUserChangeAuth";
public const string RmiName_AckCircleChangeMark="AckCircleChangeMark";
public const string RmiName_AckCircleChangeName="AckCircleChangeName";
public const string RmiName_AckCircleChangeComment="AckCircleChangeComment";
public const string RmiName_AckCircleChangeMainLanguage="AckCircleChangeMainLanguage";
public const string RmiName_AckCircleChangeSuggestAnotherLangOpt="AckCircleChangeSuggestAnotherLangOpt";
public const string RmiName_AckCircleAttendance="AckCircleAttendance";
public const string RmiName_AckCircleBuyMarkItem="AckCircleBuyMarkItem";
public const string RmiName_NotiCircleChat="NotiCircleChat";
public const string RmiName_AckCircleGetMarkList="AckCircleGetMarkList";
public const string RmiName_AckCircleSearch="AckCircleSearch";
public const string RmiName_AckCircleChatList="AckCircleChatList";
public const string RmiName_NotiCircleChatNotimessage="NotiCircleChatNotimessage";
       
public const string RmiName_First = RmiName_NotiSvrReloadTableInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotiSvrReloadTableInfo="";
public const string RmiName_NotiCloseServTime="";
public const string RmiName_NotiCommonErr="";
public const string RmiName_NotiEmbargoWordErr="";
public const string RmiName_NotiCheckVersionErr="";
public const string RmiName_NotiMoveUserInSvrToSvr="";
public const string RmiName_NotiUpdateTicket="";
public const string RmiName_NotiUserMarkTake="";
public const string RmiName_NotiAddMail="";
public const string RmiName_NotiUpdateAchieve="";
public const string RmiName_NotiUpdateAchieveEvent="";
public const string RmiName_NotiSetSvrRotationGacha="";
public const string RmiName_NotiSetSvrSecretQuestOpt="";
public const string RmiName_NotiUpdateDailyMission="";
public const string RmiName_NotiResetWeekMission="";
public const string RmiName_NotiUpdateWeekMission="";
public const string RmiName_NotiUpdateInfluMission="";
public const string RmiName_NotiUserInfluMissionChange="";
public const string RmiName_NotiUpdateGllaMission="";
public const string RmiName_NotiUpdatePassMission="";
public const string RmiName_NotiUserPassChange="";
public const string RmiName_NotiUserEventChange="";
public const string RmiName_NotiUpdateArenaTime="";
public const string RmiName_NotiUpdateRaidTime="";
public const string RmiName_NotiUpdateRaidInitStart="";
public const string RmiName_NotiCommunityUserArenaOn="";
public const string RmiName_NotiCommunityUserCallCnt="";
public const string RmiName_NotiCommunitySetArenaTowerID="";
public const string RmiName_NotiFriendFromAdd="";
public const string RmiName_NotiFriendFromDel="";
public const string RmiName_NotiFriendAnswer="";
public const string RmiName_NotiFriendKick="";
public const string RmiName_NotiFriendFlagUpdate="";
public const string RmiName_AckPing="";
public const string RmiName_AckLogOnCreditKey="";
public const string RmiName_AckLogOut="";
public const string RmiName_AckGetTotlaRelocateCntToNotComplete="";
public const string RmiName_AckRelocateUserInfoSet="";
public const string RmiName_AckRelocateUserComplate="";
public const string RmiName_AckRefrashUserInfo="";
public const string RmiName_AckReConnectUserInfo="";
public const string RmiName_AckAccountCode="";
public const string RmiName_AckAccountSetPassword="";
public const string RmiName_AckAccountCodeReward="";
public const string RmiName_AckAccountLinkReward="";
public const string RmiName_AckLinkAccountList="";
public const string RmiName_AckAddLinkAccountAuth="";
public const string RmiName_AckGetUserInfoFromAccountLink="";
public const string RmiName_AckPushNotifiTokenSet="";
public const string RmiName_AckReflashLoginBonus="";
public const string RmiName_AckRewardTakeAchieve="";
public const string RmiName_AckRewardTakeAchieveEvent="";
public const string RmiName_AckRewardDailyMission="";
public const string RmiName_AckRewardWeekMission="";
public const string RmiName_AckRewardInfluMission="";
public const string RmiName_AckUpdateGllaMission="";
public const string RmiName_AckRewardGllaMission="";
public const string RmiName_AckRewardPassMission="";
public const string RmiName_AckRewardPass="";
public const string RmiName_AckEventRewardReset="";
public const string RmiName_AckEventRewardTake="";
public const string RmiName_AckEventLgnRewardTake="";
public const string RmiName_AckSetTutorialVal="";
public const string RmiName_AckSetTutorialFlag="";
public const string RmiName_AckAddCharacter="";
public const string RmiName_AckChangePreferenceNum="";
public const string RmiName_AckChangeMainChar="";
public const string RmiName_AckGradeUpChar="";
public const string RmiName_AckSetGradeLvChar="";
public const string RmiName_AckSetMainCostumeChar="";
public const string RmiName_AckRandomCostumeDyeing="";
public const string RmiName_AckSetCostumeDyeing="";
public const string RmiName_AckCostumeDyeingLock="";
public const string RmiName_AckUserCostumeColor="";
public const string RmiName_AckEquipWeaponChar="";
public const string RmiName_AckApplySkillInChar="";
public const string RmiName_AckLvUpSkill="";
public const string RmiName_AckLvUpUserSkill="";
public const string RmiName_AckResetUserSkill="";
public const string RmiName_AckGivePresentChar="";
public const string RmiName_AckResetSecretCntChar="";
public const string RmiName_AckRaidHPRestore="";
public const string RmiName_AckStageStart="";
public const string RmiName_AckStageEnd="";
public const string RmiName_AckStageEndFail="";
public const string RmiName_AckStageContinue="";
public const string RmiName_AckRaidStageDrop="";
public const string RmiName_AckBookNewConfirm="";
public const string RmiName_AckTimeAtkRankingList="";
public const string RmiName_AckTimeAtkRankerDetail="";
public const string RmiName_AckInitRaidSeasonData="";
public const string RmiName_AckRaidRankingList="";
public const string RmiName_AckRaidRankerDetail="";
public const string RmiName_AckRaidFirstRankingList="";
public const string RmiName_AckRaidFirstRankerDetail="";
public const string RmiName_AckSetRaidTeam="";
public const string RmiName_AckArenaSeasonPlay="";
public const string RmiName_AckSetArenaTeam="";
public const string RmiName_AckArenaGameStart="";
public const string RmiName_AckArenaGameEnd="";
public const string RmiName_AckArenaEnemySearch="";
public const string RmiName_AckArenaRankingList="";
public const string RmiName_AckArenaRankerDetail="";
public const string RmiName_AckSetArenaTowerTeam="";
public const string RmiName_AckArenaTowerGameStart="";
public const string RmiName_AckArenaTowerGameEnd="";
public const string RmiName_AckUnexpectedPackageDailyReward="";
public const string RmiName_AckCharLvUnexpectedPackageHardOpen="";
public const string RmiName_AckAccountDelete="";
public const string RmiName_AckGetUserPresetList="";
public const string RmiName_AckAddOrUpdateUserPreset="";
public const string RmiName_AckUserPresetLoad="";
public const string RmiName_AckUserPresetChangeName="";
public const string RmiName_AckCircleOpen="";
public const string RmiName_AckSuggestCircleList="";
public const string RmiName_AckCircleJoin="";
public const string RmiName_AckCircleJoinCancel="";
public const string RmiName_AckCircleLobbyInfo="";
public const string RmiName_AckCircleWithdrawal="";
public const string RmiName_AckCircleDisperse="";
public const string RmiName_AckGetCircleUserList="";
public const string RmiName_AckCircleChangeStateJoinWaitUser="";
public const string RmiName_NotiCircleAcceptJoin="";
public const string RmiName_AckCircleUserKick="";
public const string RmiName_NotiCircleUserKick="";
public const string RmiName_AckCircleChangeAuthLevel="";
public const string RmiName_NotiCircleUserChangeAuth="";
public const string RmiName_AckCircleChangeMark="";
public const string RmiName_AckCircleChangeName="";
public const string RmiName_AckCircleChangeComment="";
public const string RmiName_AckCircleChangeMainLanguage="";
public const string RmiName_AckCircleChangeSuggestAnotherLangOpt="";
public const string RmiName_AckCircleAttendance="";
public const string RmiName_AckCircleBuyMarkItem="";
public const string RmiName_NotiCircleChat="";
public const string RmiName_AckCircleGetMarkList="";
public const string RmiName_AckCircleSearch="";
public const string RmiName_AckCircleChatList="";
public const string RmiName_NotiCircleChatNotimessage="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ProductC2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReqAddItemSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt16 _addCnt);  
		public ReqAddItemSlotDelegate ReqAddItemSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt16 _addCnt)
		{ 
			return false;
		};
		public delegate bool ReqApplyPosCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyPos _pkt);  
		public ReqApplyPosCardDelegate ReqApplyPosCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyPos _pkt)
		{ 
			return false;
		};
		public delegate bool ReqApplyOutPosCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uid);  
		public ReqApplyOutPosCardDelegate ReqApplyOutPosCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt64 _uid)
		{ 
			return false;
		};
		public delegate bool ReqSellCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardSell _pkt);  
		public ReqSellCardDelegate ReqSellCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardSell _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetLockCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardLock _pkt);  
		public ReqSetLockCardDelegate ReqSetLockCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardLock _pkt)
		{ 
			return false;
		};
		public delegate bool ReqChangeTypeCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardTypeChangeReq _pkt);  
		public ReqChangeTypeCardDelegate ReqChangeTypeCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardTypeChangeReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqLvUpCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqLvUpCardDelegate ReqLvUpCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSkillLvUpCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqSkillLvUpCardDelegate ReqSkillLvUpCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqWakeCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqWakeCardDelegate ReqWakeCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqEnchantCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqEnchantCardDelegate ReqEnchantCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFavorLvRewardCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookOnStateReq _pkt);  
		public ReqFavorLvRewardCardDelegate ReqFavorLvRewardCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookOnStateReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqDecompositionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDecompositionReq _pkt);  
		public ReqDecompositionDelegate ReqDecomposition = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDecompositionReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSellItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemSell _pkt);  
		public ReqSellItemDelegate ReqSellItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemSell _pkt)
		{ 
			return false;
		};
		public delegate bool ReqItemExchangeCashDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemTIDCnt _pkt);  
		public ReqItemExchangeCashDelegate ReqItemExchangeCash = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemTIDCnt _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUseItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemReq _pkt);  
		public ReqUseItemDelegate ReqUseItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUseItemGoodsDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemCnt _pkt);  
		public ReqUseItemGoodsDelegate ReqUseItemGoods = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemCnt _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSellGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemSell _pkt);  
		public ReqSellGemDelegate ReqSellGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemSell _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetLockGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemLock _pkt);  
		public ReqSetLockGemDelegate ReqSetLockGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemLock _pkt)
		{ 
			return false;
		};
		public delegate bool ReqResetOptGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptReq _pkt);  
		public ReqResetOptGemDelegate ReqResetOptGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqResetOptSelectGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptSelect _pkt);  
		public ReqResetOptSelectGemDelegate ReqResetOptSelectGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptSelect _pkt)
		{ 
			return false;
		};
		public delegate bool ReqLvUpGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqLvUpGemDelegate ReqLvUpGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqWakeGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqWakeGemDelegate ReqWakeGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqEvolutionGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqEvolutionGemDelegate ReqEvolutionGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAnalyzeGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqAnalyzeGemDelegate ReqAnalyzeGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSellWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSell _pkt);  
		public ReqSellWeaponDelegate ReqSellWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSell _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetLockWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponLock _pkt);  
		public ReqSetLockWeaponDelegate ReqSetLockWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponLock _pkt)
		{ 
			return false;
		};
		public delegate bool ReqLvUpWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqLvUpWeaponDelegate ReqLvUpWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqWakeWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqWakeWeaponDelegate ReqWakeWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqEnchantWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqEnchantWeaponDelegate ReqEnchantWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSkillLvUpWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt);  
		public ReqSkillLvUpWeaponDelegate ReqSkillLvUpWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoProductComGrowReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqApplyGemInWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSlotGem _pkt);  
		public ReqApplyGemInWeaponDelegate ReqApplyGemInWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSlotGem _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAddSlotInWpnDepotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _addCnt);  
		public ReqAddSlotInWpnDepotDelegate ReqAddSlotInWpnDepot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _addCnt)
		{ 
			return false;
		};
		public delegate bool ReqApplySlotInWpnDepotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotApply _pkt);  
		public ReqApplySlotInWpnDepotDelegate ReqApplySlotInWpnDepot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotApply _pkt)
		{ 
			return false;
		};
		public delegate bool ReqApplyPosBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyPos _pkt);  
		public ReqApplyPosBadgeDelegate ReqApplyPosBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyPos _pkt)
		{ 
			return false;
		};
		public delegate bool ReqApplyOutPosBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt);  
		public ReqApplyOutPosBadgeDelegate ReqApplyOutPosBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSellBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeSell _pkt);  
		public ReqSellBadgeDelegate ReqSellBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeSell _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetLockBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeLock _pkt);  
		public ReqSetLockBadgeDelegate ReqSetLockBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeLock _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUpgradeBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt);  
		public ReqUpgradeBadgeDelegate ReqUpgradeBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqResetUpgradeBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt);  
		public ReqResetUpgradeBadgeDelegate ReqResetUpgradeBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeComReq _pkt)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReqAddItemSlot:
            ProcessReceivedMessage_ReqAddItemSlot(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplyPosCard:
            ProcessReceivedMessage_ReqApplyPosCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplyOutPosCard:
            ProcessReceivedMessage_ReqApplyOutPosCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSellCard:
            ProcessReceivedMessage_ReqSellCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetLockCard:
            ProcessReceivedMessage_ReqSetLockCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqChangeTypeCard:
            ProcessReceivedMessage_ReqChangeTypeCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLvUpCard:
            ProcessReceivedMessage_ReqLvUpCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSkillLvUpCard:
            ProcessReceivedMessage_ReqSkillLvUpCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqWakeCard:
            ProcessReceivedMessage_ReqWakeCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEnchantCard:
            ProcessReceivedMessage_ReqEnchantCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFavorLvRewardCard:
            ProcessReceivedMessage_ReqFavorLvRewardCard(__msg, pa, hostTag, remote);
            break;
        case Common.ReqDecomposition:
            ProcessReceivedMessage_ReqDecomposition(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSellItem:
            ProcessReceivedMessage_ReqSellItem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqItemExchangeCash:
            ProcessReceivedMessage_ReqItemExchangeCash(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUseItem:
            ProcessReceivedMessage_ReqUseItem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUseItemGoods:
            ProcessReceivedMessage_ReqUseItemGoods(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSellGem:
            ProcessReceivedMessage_ReqSellGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetLockGem:
            ProcessReceivedMessage_ReqSetLockGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqResetOptGem:
            ProcessReceivedMessage_ReqResetOptGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqResetOptSelectGem:
            ProcessReceivedMessage_ReqResetOptSelectGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLvUpGem:
            ProcessReceivedMessage_ReqLvUpGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqWakeGem:
            ProcessReceivedMessage_ReqWakeGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEvolutionGem:
            ProcessReceivedMessage_ReqEvolutionGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAnalyzeGem:
            ProcessReceivedMessage_ReqAnalyzeGem(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSellWeapon:
            ProcessReceivedMessage_ReqSellWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetLockWeapon:
            ProcessReceivedMessage_ReqSetLockWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqLvUpWeapon:
            ProcessReceivedMessage_ReqLvUpWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqWakeWeapon:
            ProcessReceivedMessage_ReqWakeWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqEnchantWeapon:
            ProcessReceivedMessage_ReqEnchantWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSkillLvUpWeapon:
            ProcessReceivedMessage_ReqSkillLvUpWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplyGemInWeapon:
            ProcessReceivedMessage_ReqApplyGemInWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAddSlotInWpnDepot:
            ProcessReceivedMessage_ReqAddSlotInWpnDepot(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplySlotInWpnDepot:
            ProcessReceivedMessage_ReqApplySlotInWpnDepot(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplyPosBadge:
            ProcessReceivedMessage_ReqApplyPosBadge(__msg, pa, hostTag, remote);
            break;
        case Common.ReqApplyOutPosBadge:
            ProcessReceivedMessage_ReqApplyOutPosBadge(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSellBadge:
            ProcessReceivedMessage_ReqSellBadge(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetLockBadge:
            ProcessReceivedMessage_ReqSetLockBadge(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUpgradeBadge:
            ProcessReceivedMessage_ReqUpgradeBadge(__msg, pa, hostTag, remote);
            break;
        case Common.ReqResetUpgradeBadge:
            ProcessReceivedMessage_ReqResetUpgradeBadge(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReqAddItemSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt16 _addCnt; PN_MarshalerEx.Read(__msg,out _addCnt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAddItemSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_addCnt.ToString()+",";
        NotifyCallFromStub(Common.ReqAddItemSlot, RmiName_ReqAddItemSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAddItemSlot;
        summary.rmiName = RmiName_ReqAddItemSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAddItemSlot (remote,ctx , _addCnt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAddItemSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAddItemSlot;
        summary.rmiName = RmiName_ReqAddItemSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplyPosCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardApplyPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplyPosCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplyPosCard, RmiName_ReqApplyPosCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplyPosCard;
        summary.rmiName = RmiName_ReqApplyPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplyPosCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplyPosCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplyPosCard;
        summary.rmiName = RmiName_ReqApplyPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplyOutPosCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt64 _uid; PN_MarshalerEx.Read(__msg,out _uid);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplyOutPosCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_uid.ToString()+",";
        NotifyCallFromStub(Common.ReqApplyOutPosCard, RmiName_ReqApplyOutPosCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplyOutPosCard;
        summary.rmiName = RmiName_ReqApplyOutPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplyOutPosCard (remote,ctx , _uid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplyOutPosCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplyOutPosCard;
        summary.rmiName = RmiName_ReqApplyOutPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSellCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSellCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSellCard, RmiName_ReqSellCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSellCard;
        summary.rmiName = RmiName_ReqSellCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSellCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSellCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSellCard;
        summary.rmiName = RmiName_ReqSellCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetLockCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetLockCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetLockCard, RmiName_ReqSetLockCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetLockCard;
        summary.rmiName = RmiName_ReqSetLockCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetLockCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetLockCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetLockCard;
        summary.rmiName = RmiName_ReqSetLockCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqChangeTypeCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardTypeChangeReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqChangeTypeCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqChangeTypeCard, RmiName_ReqChangeTypeCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqChangeTypeCard;
        summary.rmiName = RmiName_ReqChangeTypeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqChangeTypeCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqChangeTypeCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqChangeTypeCard;
        summary.rmiName = RmiName_ReqChangeTypeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLvUpCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqLvUpCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqLvUpCard, RmiName_ReqLvUpCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLvUpCard;
        summary.rmiName = RmiName_ReqLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLvUpCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLvUpCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLvUpCard;
        summary.rmiName = RmiName_ReqLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSkillLvUpCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSkillLvUpCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSkillLvUpCard, RmiName_ReqSkillLvUpCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSkillLvUpCard;
        summary.rmiName = RmiName_ReqSkillLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSkillLvUpCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSkillLvUpCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSkillLvUpCard;
        summary.rmiName = RmiName_ReqSkillLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqWakeCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqWakeCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqWakeCard, RmiName_ReqWakeCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqWakeCard;
        summary.rmiName = RmiName_ReqWakeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqWakeCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqWakeCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqWakeCard;
        summary.rmiName = RmiName_ReqWakeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEnchantCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEnchantCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEnchantCard, RmiName_ReqEnchantCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEnchantCard;
        summary.rmiName = RmiName_ReqEnchantCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEnchantCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEnchantCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEnchantCard;
        summary.rmiName = RmiName_ReqEnchantCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFavorLvRewardCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBookOnStateReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFavorLvRewardCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFavorLvRewardCard, RmiName_ReqFavorLvRewardCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFavorLvRewardCard;
        summary.rmiName = RmiName_ReqFavorLvRewardCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFavorLvRewardCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFavorLvRewardCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFavorLvRewardCard;
        summary.rmiName = RmiName_ReqFavorLvRewardCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqDecomposition(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDecompositionReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqDecomposition);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqDecomposition, RmiName_ReqDecomposition,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqDecomposition;
        summary.rmiName = RmiName_ReqDecomposition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqDecomposition (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqDecomposition);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqDecomposition;
        summary.rmiName = RmiName_ReqDecomposition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSellItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoItemSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSellItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSellItem, RmiName_ReqSellItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSellItem;
        summary.rmiName = RmiName_ReqSellItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSellItem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSellItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSellItem;
        summary.rmiName = RmiName_ReqSellItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqItemExchangeCash(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoItemTIDCnt _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqItemExchangeCash);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqItemExchangeCash, RmiName_ReqItemExchangeCash,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqItemExchangeCash;
        summary.rmiName = RmiName_ReqItemExchangeCash;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqItemExchangeCash (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqItemExchangeCash);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqItemExchangeCash;
        summary.rmiName = RmiName_ReqItemExchangeCash;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUseItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUseItemReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUseItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUseItem, RmiName_ReqUseItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUseItem;
        summary.rmiName = RmiName_ReqUseItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUseItem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUseItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUseItem;
        summary.rmiName = RmiName_ReqUseItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUseItemGoods(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoItemCnt _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUseItemGoods);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUseItemGoods, RmiName_ReqUseItemGoods,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUseItemGoods;
        summary.rmiName = RmiName_ReqUseItemGoods;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUseItemGoods (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUseItemGoods);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUseItemGoods;
        summary.rmiName = RmiName_ReqUseItemGoods;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSellGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSellGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSellGem, RmiName_ReqSellGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSellGem;
        summary.rmiName = RmiName_ReqSellGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSellGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSellGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSellGem;
        summary.rmiName = RmiName_ReqSellGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetLockGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetLockGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetLockGem, RmiName_ReqSetLockGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetLockGem;
        summary.rmiName = RmiName_ReqSetLockGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetLockGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetLockGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetLockGem;
        summary.rmiName = RmiName_ReqSetLockGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqResetOptGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemResetOptReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqResetOptGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqResetOptGem, RmiName_ReqResetOptGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqResetOptGem;
        summary.rmiName = RmiName_ReqResetOptGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqResetOptGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqResetOptGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqResetOptGem;
        summary.rmiName = RmiName_ReqResetOptGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqResetOptSelectGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemResetOptSelect _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqResetOptSelectGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqResetOptSelectGem, RmiName_ReqResetOptSelectGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqResetOptSelectGem;
        summary.rmiName = RmiName_ReqResetOptSelectGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqResetOptSelectGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqResetOptSelectGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqResetOptSelectGem;
        summary.rmiName = RmiName_ReqResetOptSelectGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLvUpGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqLvUpGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqLvUpGem, RmiName_ReqLvUpGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLvUpGem;
        summary.rmiName = RmiName_ReqLvUpGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLvUpGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLvUpGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLvUpGem;
        summary.rmiName = RmiName_ReqLvUpGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqWakeGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqWakeGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqWakeGem, RmiName_ReqWakeGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqWakeGem;
        summary.rmiName = RmiName_ReqWakeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqWakeGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqWakeGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqWakeGem;
        summary.rmiName = RmiName_ReqWakeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEvolutionGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEvolutionGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEvolutionGem, RmiName_ReqEvolutionGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEvolutionGem;
        summary.rmiName = RmiName_ReqEvolutionGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEvolutionGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEvolutionGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEvolutionGem;
        summary.rmiName = RmiName_ReqEvolutionGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAnalyzeGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAnalyzeGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqAnalyzeGem, RmiName_ReqAnalyzeGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAnalyzeGem;
        summary.rmiName = RmiName_ReqAnalyzeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAnalyzeGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAnalyzeGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAnalyzeGem;
        summary.rmiName = RmiName_ReqAnalyzeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSellWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSellWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSellWeapon, RmiName_ReqSellWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSellWeapon;
        summary.rmiName = RmiName_ReqSellWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSellWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSellWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSellWeapon;
        summary.rmiName = RmiName_ReqSellWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetLockWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetLockWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetLockWeapon, RmiName_ReqSetLockWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetLockWeapon;
        summary.rmiName = RmiName_ReqSetLockWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetLockWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetLockWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetLockWeapon;
        summary.rmiName = RmiName_ReqSetLockWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqLvUpWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqLvUpWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqLvUpWeapon, RmiName_ReqLvUpWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqLvUpWeapon;
        summary.rmiName = RmiName_ReqLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqLvUpWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqLvUpWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqLvUpWeapon;
        summary.rmiName = RmiName_ReqLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqWakeWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqWakeWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqWakeWeapon, RmiName_ReqWakeWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqWakeWeapon;
        summary.rmiName = RmiName_ReqWakeWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqWakeWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqWakeWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqWakeWeapon;
        summary.rmiName = RmiName_ReqWakeWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqEnchantWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqEnchantWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqEnchantWeapon, RmiName_ReqEnchantWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqEnchantWeapon;
        summary.rmiName = RmiName_ReqEnchantWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqEnchantWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqEnchantWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqEnchantWeapon;
        summary.rmiName = RmiName_ReqEnchantWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSkillLvUpWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoProductComGrowReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSkillLvUpWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSkillLvUpWeapon, RmiName_ReqSkillLvUpWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSkillLvUpWeapon;
        summary.rmiName = RmiName_ReqSkillLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSkillLvUpWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSkillLvUpWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSkillLvUpWeapon;
        summary.rmiName = RmiName_ReqSkillLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplyGemInWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponSlotGem _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplyGemInWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplyGemInWeapon, RmiName_ReqApplyGemInWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplyGemInWeapon;
        summary.rmiName = RmiName_ReqApplyGemInWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplyGemInWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplyGemInWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplyGemInWeapon;
        summary.rmiName = RmiName_ReqApplyGemInWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAddSlotInWpnDepot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Byte _addCnt; PN_MarshalerEx.Read(__msg,out _addCnt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAddSlotInWpnDepot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_addCnt.ToString()+",";
        NotifyCallFromStub(Common.ReqAddSlotInWpnDepot, RmiName_ReqAddSlotInWpnDepot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAddSlotInWpnDepot;
        summary.rmiName = RmiName_ReqAddSlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAddSlotInWpnDepot (remote,ctx , _addCnt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAddSlotInWpnDepot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAddSlotInWpnDepot;
        summary.rmiName = RmiName_ReqAddSlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplySlotInWpnDepot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWpnDepotApply _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplySlotInWpnDepot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplySlotInWpnDepot, RmiName_ReqApplySlotInWpnDepot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplySlotInWpnDepot;
        summary.rmiName = RmiName_ReqApplySlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplySlotInWpnDepot (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplySlotInWpnDepot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplySlotInWpnDepot;
        summary.rmiName = RmiName_ReqApplySlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplyPosBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeApplyPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplyPosBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplyPosBadge, RmiName_ReqApplyPosBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplyPosBadge;
        summary.rmiName = RmiName_ReqApplyPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplyPosBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplyPosBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplyPosBadge;
        summary.rmiName = RmiName_ReqApplyPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqApplyOutPosBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeComReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqApplyOutPosBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqApplyOutPosBadge, RmiName_ReqApplyOutPosBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqApplyOutPosBadge;
        summary.rmiName = RmiName_ReqApplyOutPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqApplyOutPosBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqApplyOutPosBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqApplyOutPosBadge;
        summary.rmiName = RmiName_ReqApplyOutPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSellBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSellBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSellBadge, RmiName_ReqSellBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSellBadge;
        summary.rmiName = RmiName_ReqSellBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSellBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSellBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSellBadge;
        summary.rmiName = RmiName_ReqSellBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetLockBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetLockBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSetLockBadge, RmiName_ReqSetLockBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetLockBadge;
        summary.rmiName = RmiName_ReqSetLockBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetLockBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetLockBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetLockBadge;
        summary.rmiName = RmiName_ReqSetLockBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUpgradeBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeComReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUpgradeBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUpgradeBadge, RmiName_ReqUpgradeBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUpgradeBadge;
        summary.rmiName = RmiName_ReqUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUpgradeBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUpgradeBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUpgradeBadge;
        summary.rmiName = RmiName_ReqUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqResetUpgradeBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeComReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqResetUpgradeBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqResetUpgradeBadge, RmiName_ReqResetUpgradeBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqResetUpgradeBadge;
        summary.rmiName = RmiName_ReqResetUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqResetUpgradeBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqResetUpgradeBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqResetUpgradeBadge;
        summary.rmiName = RmiName_ReqResetUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqAddItemSlot="ReqAddItemSlot";
public const string RmiName_ReqApplyPosCard="ReqApplyPosCard";
public const string RmiName_ReqApplyOutPosCard="ReqApplyOutPosCard";
public const string RmiName_ReqSellCard="ReqSellCard";
public const string RmiName_ReqSetLockCard="ReqSetLockCard";
public const string RmiName_ReqChangeTypeCard="ReqChangeTypeCard";
public const string RmiName_ReqLvUpCard="ReqLvUpCard";
public const string RmiName_ReqSkillLvUpCard="ReqSkillLvUpCard";
public const string RmiName_ReqWakeCard="ReqWakeCard";
public const string RmiName_ReqEnchantCard="ReqEnchantCard";
public const string RmiName_ReqFavorLvRewardCard="ReqFavorLvRewardCard";
public const string RmiName_ReqDecomposition="ReqDecomposition";
public const string RmiName_ReqSellItem="ReqSellItem";
public const string RmiName_ReqItemExchangeCash="ReqItemExchangeCash";
public const string RmiName_ReqUseItem="ReqUseItem";
public const string RmiName_ReqUseItemGoods="ReqUseItemGoods";
public const string RmiName_ReqSellGem="ReqSellGem";
public const string RmiName_ReqSetLockGem="ReqSetLockGem";
public const string RmiName_ReqResetOptGem="ReqResetOptGem";
public const string RmiName_ReqResetOptSelectGem="ReqResetOptSelectGem";
public const string RmiName_ReqLvUpGem="ReqLvUpGem";
public const string RmiName_ReqWakeGem="ReqWakeGem";
public const string RmiName_ReqEvolutionGem="ReqEvolutionGem";
public const string RmiName_ReqAnalyzeGem="ReqAnalyzeGem";
public const string RmiName_ReqSellWeapon="ReqSellWeapon";
public const string RmiName_ReqSetLockWeapon="ReqSetLockWeapon";
public const string RmiName_ReqLvUpWeapon="ReqLvUpWeapon";
public const string RmiName_ReqWakeWeapon="ReqWakeWeapon";
public const string RmiName_ReqEnchantWeapon="ReqEnchantWeapon";
public const string RmiName_ReqSkillLvUpWeapon="ReqSkillLvUpWeapon";
public const string RmiName_ReqApplyGemInWeapon="ReqApplyGemInWeapon";
public const string RmiName_ReqAddSlotInWpnDepot="ReqAddSlotInWpnDepot";
public const string RmiName_ReqApplySlotInWpnDepot="ReqApplySlotInWpnDepot";
public const string RmiName_ReqApplyPosBadge="ReqApplyPosBadge";
public const string RmiName_ReqApplyOutPosBadge="ReqApplyOutPosBadge";
public const string RmiName_ReqSellBadge="ReqSellBadge";
public const string RmiName_ReqSetLockBadge="ReqSetLockBadge";
public const string RmiName_ReqUpgradeBadge="ReqUpgradeBadge";
public const string RmiName_ReqResetUpgradeBadge="ReqResetUpgradeBadge";
       
public const string RmiName_First = RmiName_ReqAddItemSlot;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqAddItemSlot="";
public const string RmiName_ReqApplyPosCard="";
public const string RmiName_ReqApplyOutPosCard="";
public const string RmiName_ReqSellCard="";
public const string RmiName_ReqSetLockCard="";
public const string RmiName_ReqChangeTypeCard="";
public const string RmiName_ReqLvUpCard="";
public const string RmiName_ReqSkillLvUpCard="";
public const string RmiName_ReqWakeCard="";
public const string RmiName_ReqEnchantCard="";
public const string RmiName_ReqFavorLvRewardCard="";
public const string RmiName_ReqDecomposition="";
public const string RmiName_ReqSellItem="";
public const string RmiName_ReqItemExchangeCash="";
public const string RmiName_ReqUseItem="";
public const string RmiName_ReqUseItemGoods="";
public const string RmiName_ReqSellGem="";
public const string RmiName_ReqSetLockGem="";
public const string RmiName_ReqResetOptGem="";
public const string RmiName_ReqResetOptSelectGem="";
public const string RmiName_ReqLvUpGem="";
public const string RmiName_ReqWakeGem="";
public const string RmiName_ReqEvolutionGem="";
public const string RmiName_ReqAnalyzeGem="";
public const string RmiName_ReqSellWeapon="";
public const string RmiName_ReqSetLockWeapon="";
public const string RmiName_ReqLvUpWeapon="";
public const string RmiName_ReqWakeWeapon="";
public const string RmiName_ReqEnchantWeapon="";
public const string RmiName_ReqSkillLvUpWeapon="";
public const string RmiName_ReqApplyGemInWeapon="";
public const string RmiName_ReqAddSlotInWpnDepot="";
public const string RmiName_ReqApplySlotInWpnDepot="";
public const string RmiName_ReqApplyPosBadge="";
public const string RmiName_ReqApplyOutPosBadge="";
public const string RmiName_ReqSellBadge="";
public const string RmiName_ReqSetLockBadge="";
public const string RmiName_ReqUpgradeBadge="";
public const string RmiName_ReqResetUpgradeBadge="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ProductS2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool AckAddItemSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAddSlot _pkt);  
		public AckAddItemSlotDelegate AckAddItemSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAddSlot _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplyPosCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyPos _pkt);  
		public AckApplyPosCardDelegate AckApplyPosCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyPos _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplyOutPosCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyOutPos _pkt);  
		public AckApplyOutPosCardDelegate AckApplyOutPosCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardApplyOutPos _pkt)
		{ 
			return false;
		};
		public delegate bool AckSellCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardSell _pkt);  
		public AckSellCardDelegate AckSellCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardSell _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetLockCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardLock _pkt);  
		public AckSetLockCardDelegate AckSetLockCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardLock _pkt)
		{ 
			return false;
		};
		public delegate bool AckChangeTypeCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardTypeChangeAck _pkt);  
		public AckChangeTypeCardDelegate AckChangeTypeCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardTypeChangeAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckLvUpCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt);  
		public AckLvUpCardDelegate AckLvUpCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckSkillLvUpCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt);  
		public AckSkillLvUpCardDelegate AckSkillLvUpCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckWakeCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt);  
		public AckWakeCardDelegate AckWakeCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckEnchantCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt);  
		public AckEnchantCardDelegate AckEnchantCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckFavorLvRewardCardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookStateReward _pkt);  
		public AckFavorLvRewardCardDelegate AckFavorLvRewardCard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBookStateReward _pkt)
		{ 
			return false;
		};
		public delegate bool AckDecompositionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDecompositionAck _pkt);  
		public AckDecompositionDelegate AckDecomposition = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDecompositionAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSellItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemSell _pkt);  
		public AckSellItemDelegate AckSellItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoItemSell _pkt)
		{ 
			return false;
		};
		public delegate bool AckItemExchangeCashDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdItemGoods _pkt);  
		public AckItemExchangeCashDelegate AckItemExchangeCash = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdItemGoods _pkt)
		{ 
			return false;
		};
		public delegate bool AckUseItemGoodsDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemGoodsAck _pkt);  
		public AckUseItemGoodsDelegate AckUseItemGoods = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemGoodsAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckUseItemProductDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemProductAck _pkt);  
		public AckUseItemProductDelegate AckUseItemProduct = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemProductAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckUseItemCodeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemCodeAck _pkt);  
		public AckUseItemCodeDelegate AckUseItemCode = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemCodeAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckUseItemStageSpecialDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemStageSpecialAck _pkt);  
		public AckUseItemStageSpecialDelegate AckUseItemStageSpecial = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUseItemStageSpecialAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSellGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemSell _pkt);  
		public AckSellGemDelegate AckSellGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemSell _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetLockGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemLock _pkt);  
		public AckSetLockGemDelegate AckSetLockGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemLock _pkt)
		{ 
			return false;
		};
		public delegate bool AckResetOptGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptAck _pkt);  
		public AckResetOptGemDelegate AckResetOptGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckResetOptSelectGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptSelect _pkt);  
		public AckResetOptSelectGemDelegate AckResetOptSelectGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemResetOptSelect _pkt)
		{ 
			return false;
		};
		public delegate bool AckLvUpGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt);  
		public AckLvUpGemDelegate AckLvUpGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckWakeGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt);  
		public AckWakeGemDelegate AckWakeGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckEvolutionGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt);  
		public AckEvolutionGemDelegate AckEvolutionGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckAnalyzeGemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt);  
		public AckAnalyzeGemDelegate AckAnalyzeGem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoGemGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckSellWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSell _pkt);  
		public AckSellWeaponDelegate AckSellWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSell _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetLockWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponLock _pkt);  
		public AckSetLockWeaponDelegate AckSetLockWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponLock _pkt)
		{ 
			return false;
		};
		public delegate bool AckLvUpWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt);  
		public AckLvUpWeaponDelegate AckLvUpWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckSkillLvUpWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt);  
		public AckSkillLvUpWeaponDelegate AckSkillLvUpWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckWakeWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt);  
		public AckWakeWeaponDelegate AckWakeWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckEnchantWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt);  
		public AckEnchantWeaponDelegate AckEnchantWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponGrow _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplyGemInWeaponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSlotGem _pkt);  
		public AckApplyGemInWeaponDelegate AckApplyGemInWeapon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWeaponSlotGem _pkt)
		{ 
			return false;
		};
		public delegate bool AckAddSlotInWpnDepotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotSlotAdd _pkt);  
		public AckAddSlotInWpnDepotDelegate AckAddSlotInWpnDepot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotSlotAdd _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplySlotInWpnDepotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotApply _pkt);  
		public AckApplySlotInWpnDepotDelegate AckApplySlotInWpnDepot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoWpnDepotApply _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplyPosBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyPos _pkt);  
		public AckApplyPosBadgeDelegate AckApplyPosBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyPos _pkt)
		{ 
			return false;
		};
		public delegate bool AckApplyOutPosBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyOutPos _pkt);  
		public AckApplyOutPosBadgeDelegate AckApplyOutPosBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeApplyOutPos _pkt)
		{ 
			return false;
		};
		public delegate bool AckSellBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeSell _pkt);  
		public AckSellBadgeDelegate AckSellBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeSell _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetLockBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeLock _pkt);  
		public AckSetLockBadgeDelegate AckSetLockBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeLock _pkt)
		{ 
			return false;
		};
		public delegate bool AckUpgradeBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeUpgrade _pkt);  
		public AckUpgradeBadgeDelegate AckUpgradeBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeUpgrade _pkt)
		{ 
			return false;
		};
		public delegate bool AckResetUpgradeBadgeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeUpgrade _pkt);  
		public AckResetUpgradeBadgeDelegate AckResetUpgradeBadge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBadgeUpgrade _pkt)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.AckAddItemSlot:
            ProcessReceivedMessage_AckAddItemSlot(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplyPosCard:
            ProcessReceivedMessage_AckApplyPosCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplyOutPosCard:
            ProcessReceivedMessage_AckApplyOutPosCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckSellCard:
            ProcessReceivedMessage_AckSellCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetLockCard:
            ProcessReceivedMessage_AckSetLockCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckChangeTypeCard:
            ProcessReceivedMessage_AckChangeTypeCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckLvUpCard:
            ProcessReceivedMessage_AckLvUpCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckSkillLvUpCard:
            ProcessReceivedMessage_AckSkillLvUpCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckWakeCard:
            ProcessReceivedMessage_AckWakeCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckEnchantCard:
            ProcessReceivedMessage_AckEnchantCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckFavorLvRewardCard:
            ProcessReceivedMessage_AckFavorLvRewardCard(__msg, pa, hostTag, remote);
            break;
        case Common.AckDecomposition:
            ProcessReceivedMessage_AckDecomposition(__msg, pa, hostTag, remote);
            break;
        case Common.AckSellItem:
            ProcessReceivedMessage_AckSellItem(__msg, pa, hostTag, remote);
            break;
        case Common.AckItemExchangeCash:
            ProcessReceivedMessage_AckItemExchangeCash(__msg, pa, hostTag, remote);
            break;
        case Common.AckUseItemGoods:
            ProcessReceivedMessage_AckUseItemGoods(__msg, pa, hostTag, remote);
            break;
        case Common.AckUseItemProduct:
            ProcessReceivedMessage_AckUseItemProduct(__msg, pa, hostTag, remote);
            break;
        case Common.AckUseItemCode:
            ProcessReceivedMessage_AckUseItemCode(__msg, pa, hostTag, remote);
            break;
        case Common.AckUseItemStageSpecial:
            ProcessReceivedMessage_AckUseItemStageSpecial(__msg, pa, hostTag, remote);
            break;
        case Common.AckSellGem:
            ProcessReceivedMessage_AckSellGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetLockGem:
            ProcessReceivedMessage_AckSetLockGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckResetOptGem:
            ProcessReceivedMessage_AckResetOptGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckResetOptSelectGem:
            ProcessReceivedMessage_AckResetOptSelectGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckLvUpGem:
            ProcessReceivedMessage_AckLvUpGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckWakeGem:
            ProcessReceivedMessage_AckWakeGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckEvolutionGem:
            ProcessReceivedMessage_AckEvolutionGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckAnalyzeGem:
            ProcessReceivedMessage_AckAnalyzeGem(__msg, pa, hostTag, remote);
            break;
        case Common.AckSellWeapon:
            ProcessReceivedMessage_AckSellWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetLockWeapon:
            ProcessReceivedMessage_AckSetLockWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckLvUpWeapon:
            ProcessReceivedMessage_AckLvUpWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckSkillLvUpWeapon:
            ProcessReceivedMessage_AckSkillLvUpWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckWakeWeapon:
            ProcessReceivedMessage_AckWakeWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckEnchantWeapon:
            ProcessReceivedMessage_AckEnchantWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplyGemInWeapon:
            ProcessReceivedMessage_AckApplyGemInWeapon(__msg, pa, hostTag, remote);
            break;
        case Common.AckAddSlotInWpnDepot:
            ProcessReceivedMessage_AckAddSlotInWpnDepot(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplySlotInWpnDepot:
            ProcessReceivedMessage_AckApplySlotInWpnDepot(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplyPosBadge:
            ProcessReceivedMessage_AckApplyPosBadge(__msg, pa, hostTag, remote);
            break;
        case Common.AckApplyOutPosBadge:
            ProcessReceivedMessage_AckApplyOutPosBadge(__msg, pa, hostTag, remote);
            break;
        case Common.AckSellBadge:
            ProcessReceivedMessage_AckSellBadge(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetLockBadge:
            ProcessReceivedMessage_AckSetLockBadge(__msg, pa, hostTag, remote);
            break;
        case Common.AckUpgradeBadge:
            ProcessReceivedMessage_AckUpgradeBadge(__msg, pa, hostTag, remote);
            break;
        case Common.AckResetUpgradeBadge:
            ProcessReceivedMessage_AckResetUpgradeBadge(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_AckAddItemSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAddSlot _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAddItemSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAddItemSlot, RmiName_AckAddItemSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAddItemSlot;
        summary.rmiName = RmiName_AckAddItemSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAddItemSlot (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAddItemSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAddItemSlot;
        summary.rmiName = RmiName_AckAddItemSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplyPosCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardApplyPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplyPosCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplyPosCard, RmiName_AckApplyPosCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplyPosCard;
        summary.rmiName = RmiName_AckApplyPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplyPosCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplyPosCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplyPosCard;
        summary.rmiName = RmiName_AckApplyPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplyOutPosCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardApplyOutPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplyOutPosCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplyOutPosCard, RmiName_AckApplyOutPosCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplyOutPosCard;
        summary.rmiName = RmiName_AckApplyOutPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplyOutPosCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplyOutPosCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplyOutPosCard;
        summary.rmiName = RmiName_AckApplyOutPosCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSellCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSellCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSellCard, RmiName_AckSellCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSellCard;
        summary.rmiName = RmiName_AckSellCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSellCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSellCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSellCard;
        summary.rmiName = RmiName_AckSellCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetLockCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetLockCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetLockCard, RmiName_AckSetLockCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetLockCard;
        summary.rmiName = RmiName_AckSetLockCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetLockCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetLockCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetLockCard;
        summary.rmiName = RmiName_AckSetLockCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckChangeTypeCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardTypeChangeAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckChangeTypeCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckChangeTypeCard, RmiName_AckChangeTypeCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckChangeTypeCard;
        summary.rmiName = RmiName_AckChangeTypeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckChangeTypeCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckChangeTypeCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckChangeTypeCard;
        summary.rmiName = RmiName_AckChangeTypeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLvUpCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLvUpCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLvUpCard, RmiName_AckLvUpCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLvUpCard;
        summary.rmiName = RmiName_AckLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLvUpCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLvUpCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLvUpCard;
        summary.rmiName = RmiName_AckLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSkillLvUpCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSkillLvUpCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSkillLvUpCard, RmiName_AckSkillLvUpCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSkillLvUpCard;
        summary.rmiName = RmiName_AckSkillLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSkillLvUpCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSkillLvUpCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSkillLvUpCard;
        summary.rmiName = RmiName_AckSkillLvUpCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckWakeCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckWakeCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckWakeCard, RmiName_AckWakeCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckWakeCard;
        summary.rmiName = RmiName_AckWakeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckWakeCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckWakeCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckWakeCard;
        summary.rmiName = RmiName_AckWakeCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEnchantCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEnchantCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEnchantCard, RmiName_AckEnchantCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEnchantCard;
        summary.rmiName = RmiName_AckEnchantCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEnchantCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEnchantCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEnchantCard;
        summary.rmiName = RmiName_AckEnchantCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFavorLvRewardCard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBookStateReward _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFavorLvRewardCard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFavorLvRewardCard, RmiName_AckFavorLvRewardCard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFavorLvRewardCard;
        summary.rmiName = RmiName_AckFavorLvRewardCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFavorLvRewardCard (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFavorLvRewardCard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFavorLvRewardCard;
        summary.rmiName = RmiName_AckFavorLvRewardCard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckDecomposition(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDecompositionAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckDecomposition);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckDecomposition, RmiName_AckDecomposition,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckDecomposition;
        summary.rmiName = RmiName_AckDecomposition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckDecomposition (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckDecomposition);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckDecomposition;
        summary.rmiName = RmiName_AckDecomposition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSellItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoItemSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSellItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSellItem, RmiName_AckSellItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSellItem;
        summary.rmiName = RmiName_AckSellItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSellItem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSellItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSellItem;
        summary.rmiName = RmiName_AckSellItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckItemExchangeCash(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdItemGoods _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckItemExchangeCash);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckItemExchangeCash, RmiName_AckItemExchangeCash,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckItemExchangeCash;
        summary.rmiName = RmiName_AckItemExchangeCash;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckItemExchangeCash (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckItemExchangeCash);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckItemExchangeCash;
        summary.rmiName = RmiName_AckItemExchangeCash;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUseItemGoods(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUseItemGoodsAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUseItemGoods);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUseItemGoods, RmiName_AckUseItemGoods,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUseItemGoods;
        summary.rmiName = RmiName_AckUseItemGoods;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUseItemGoods (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUseItemGoods);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUseItemGoods;
        summary.rmiName = RmiName_AckUseItemGoods;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUseItemProduct(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUseItemProductAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUseItemProduct);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUseItemProduct, RmiName_AckUseItemProduct,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUseItemProduct;
        summary.rmiName = RmiName_AckUseItemProduct;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUseItemProduct (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUseItemProduct);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUseItemProduct;
        summary.rmiName = RmiName_AckUseItemProduct;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUseItemCode(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUseItemCodeAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUseItemCode);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUseItemCode, RmiName_AckUseItemCode,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUseItemCode;
        summary.rmiName = RmiName_AckUseItemCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUseItemCode (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUseItemCode);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUseItemCode;
        summary.rmiName = RmiName_AckUseItemCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUseItemStageSpecial(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUseItemStageSpecialAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUseItemStageSpecial);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUseItemStageSpecial, RmiName_AckUseItemStageSpecial,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUseItemStageSpecial;
        summary.rmiName = RmiName_AckUseItemStageSpecial;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUseItemStageSpecial (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUseItemStageSpecial);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUseItemStageSpecial;
        summary.rmiName = RmiName_AckUseItemStageSpecial;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSellGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSellGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSellGem, RmiName_AckSellGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSellGem;
        summary.rmiName = RmiName_AckSellGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSellGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSellGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSellGem;
        summary.rmiName = RmiName_AckSellGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetLockGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetLockGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetLockGem, RmiName_AckSetLockGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetLockGem;
        summary.rmiName = RmiName_AckSetLockGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetLockGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetLockGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetLockGem;
        summary.rmiName = RmiName_AckSetLockGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckResetOptGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemResetOptAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckResetOptGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckResetOptGem, RmiName_AckResetOptGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckResetOptGem;
        summary.rmiName = RmiName_AckResetOptGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckResetOptGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckResetOptGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckResetOptGem;
        summary.rmiName = RmiName_AckResetOptGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckResetOptSelectGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemResetOptSelect _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckResetOptSelectGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckResetOptSelectGem, RmiName_AckResetOptSelectGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckResetOptSelectGem;
        summary.rmiName = RmiName_AckResetOptSelectGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckResetOptSelectGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckResetOptSelectGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckResetOptSelectGem;
        summary.rmiName = RmiName_AckResetOptSelectGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLvUpGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLvUpGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLvUpGem, RmiName_AckLvUpGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLvUpGem;
        summary.rmiName = RmiName_AckLvUpGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLvUpGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLvUpGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLvUpGem;
        summary.rmiName = RmiName_AckLvUpGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckWakeGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckWakeGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckWakeGem, RmiName_AckWakeGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckWakeGem;
        summary.rmiName = RmiName_AckWakeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckWakeGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckWakeGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckWakeGem;
        summary.rmiName = RmiName_AckWakeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEvolutionGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEvolutionGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEvolutionGem, RmiName_AckEvolutionGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEvolutionGem;
        summary.rmiName = RmiName_AckEvolutionGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEvolutionGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEvolutionGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEvolutionGem;
        summary.rmiName = RmiName_AckEvolutionGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAnalyzeGem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoGemGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAnalyzeGem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAnalyzeGem, RmiName_AckAnalyzeGem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAnalyzeGem;
        summary.rmiName = RmiName_AckAnalyzeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAnalyzeGem (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAnalyzeGem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAnalyzeGem;
        summary.rmiName = RmiName_AckAnalyzeGem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSellWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSellWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSellWeapon, RmiName_AckSellWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSellWeapon;
        summary.rmiName = RmiName_AckSellWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSellWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSellWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSellWeapon;
        summary.rmiName = RmiName_AckSellWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetLockWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetLockWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetLockWeapon, RmiName_AckSetLockWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetLockWeapon;
        summary.rmiName = RmiName_AckSetLockWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetLockWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetLockWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetLockWeapon;
        summary.rmiName = RmiName_AckSetLockWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLvUpWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckLvUpWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckLvUpWeapon, RmiName_AckLvUpWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLvUpWeapon;
        summary.rmiName = RmiName_AckLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLvUpWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLvUpWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLvUpWeapon;
        summary.rmiName = RmiName_AckLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSkillLvUpWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSkillLvUpWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSkillLvUpWeapon, RmiName_AckSkillLvUpWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSkillLvUpWeapon;
        summary.rmiName = RmiName_AckSkillLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSkillLvUpWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSkillLvUpWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSkillLvUpWeapon;
        summary.rmiName = RmiName_AckSkillLvUpWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckWakeWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckWakeWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckWakeWeapon, RmiName_AckWakeWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckWakeWeapon;
        summary.rmiName = RmiName_AckWakeWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckWakeWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckWakeWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckWakeWeapon;
        summary.rmiName = RmiName_AckWakeWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckEnchantWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponGrow _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckEnchantWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckEnchantWeapon, RmiName_AckEnchantWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckEnchantWeapon;
        summary.rmiName = RmiName_AckEnchantWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckEnchantWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckEnchantWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckEnchantWeapon;
        summary.rmiName = RmiName_AckEnchantWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplyGemInWeapon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWeaponSlotGem _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplyGemInWeapon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplyGemInWeapon, RmiName_AckApplyGemInWeapon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplyGemInWeapon;
        summary.rmiName = RmiName_AckApplyGemInWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplyGemInWeapon (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplyGemInWeapon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplyGemInWeapon;
        summary.rmiName = RmiName_AckApplyGemInWeapon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckAddSlotInWpnDepot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWpnDepotSlotAdd _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckAddSlotInWpnDepot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckAddSlotInWpnDepot, RmiName_AckAddSlotInWpnDepot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckAddSlotInWpnDepot;
        summary.rmiName = RmiName_AckAddSlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckAddSlotInWpnDepot (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckAddSlotInWpnDepot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckAddSlotInWpnDepot;
        summary.rmiName = RmiName_AckAddSlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplySlotInWpnDepot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoWpnDepotApply _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplySlotInWpnDepot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplySlotInWpnDepot, RmiName_AckApplySlotInWpnDepot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplySlotInWpnDepot;
        summary.rmiName = RmiName_AckApplySlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplySlotInWpnDepot (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplySlotInWpnDepot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplySlotInWpnDepot;
        summary.rmiName = RmiName_AckApplySlotInWpnDepot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplyPosBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeApplyPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplyPosBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplyPosBadge, RmiName_AckApplyPosBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplyPosBadge;
        summary.rmiName = RmiName_AckApplyPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplyPosBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplyPosBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplyPosBadge;
        summary.rmiName = RmiName_AckApplyPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckApplyOutPosBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeApplyOutPos _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckApplyOutPosBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckApplyOutPosBadge, RmiName_AckApplyOutPosBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckApplyOutPosBadge;
        summary.rmiName = RmiName_AckApplyOutPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckApplyOutPosBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckApplyOutPosBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckApplyOutPosBadge;
        summary.rmiName = RmiName_AckApplyOutPosBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSellBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeSell _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSellBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSellBadge, RmiName_AckSellBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSellBadge;
        summary.rmiName = RmiName_AckSellBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSellBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSellBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSellBadge;
        summary.rmiName = RmiName_AckSellBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetLockBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeLock _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckSetLockBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckSetLockBadge, RmiName_AckSetLockBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetLockBadge;
        summary.rmiName = RmiName_AckSetLockBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetLockBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetLockBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetLockBadge;
        summary.rmiName = RmiName_AckSetLockBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUpgradeBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeUpgrade _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUpgradeBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUpgradeBadge, RmiName_AckUpgradeBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUpgradeBadge;
        summary.rmiName = RmiName_AckUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUpgradeBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUpgradeBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUpgradeBadge;
        summary.rmiName = RmiName_AckUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckResetUpgradeBadge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBadgeUpgrade _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckResetUpgradeBadge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckResetUpgradeBadge, RmiName_AckResetUpgradeBadge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckResetUpgradeBadge;
        summary.rmiName = RmiName_AckResetUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckResetUpgradeBadge (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckResetUpgradeBadge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckResetUpgradeBadge;
        summary.rmiName = RmiName_AckResetUpgradeBadge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckAddItemSlot="AckAddItemSlot";
public const string RmiName_AckApplyPosCard="AckApplyPosCard";
public const string RmiName_AckApplyOutPosCard="AckApplyOutPosCard";
public const string RmiName_AckSellCard="AckSellCard";
public const string RmiName_AckSetLockCard="AckSetLockCard";
public const string RmiName_AckChangeTypeCard="AckChangeTypeCard";
public const string RmiName_AckLvUpCard="AckLvUpCard";
public const string RmiName_AckSkillLvUpCard="AckSkillLvUpCard";
public const string RmiName_AckWakeCard="AckWakeCard";
public const string RmiName_AckEnchantCard="AckEnchantCard";
public const string RmiName_AckFavorLvRewardCard="AckFavorLvRewardCard";
public const string RmiName_AckDecomposition="AckDecomposition";
public const string RmiName_AckSellItem="AckSellItem";
public const string RmiName_AckItemExchangeCash="AckItemExchangeCash";
public const string RmiName_AckUseItemGoods="AckUseItemGoods";
public const string RmiName_AckUseItemProduct="AckUseItemProduct";
public const string RmiName_AckUseItemCode="AckUseItemCode";
public const string RmiName_AckUseItemStageSpecial="AckUseItemStageSpecial";
public const string RmiName_AckSellGem="AckSellGem";
public const string RmiName_AckSetLockGem="AckSetLockGem";
public const string RmiName_AckResetOptGem="AckResetOptGem";
public const string RmiName_AckResetOptSelectGem="AckResetOptSelectGem";
public const string RmiName_AckLvUpGem="AckLvUpGem";
public const string RmiName_AckWakeGem="AckWakeGem";
public const string RmiName_AckEvolutionGem="AckEvolutionGem";
public const string RmiName_AckAnalyzeGem="AckAnalyzeGem";
public const string RmiName_AckSellWeapon="AckSellWeapon";
public const string RmiName_AckSetLockWeapon="AckSetLockWeapon";
public const string RmiName_AckLvUpWeapon="AckLvUpWeapon";
public const string RmiName_AckSkillLvUpWeapon="AckSkillLvUpWeapon";
public const string RmiName_AckWakeWeapon="AckWakeWeapon";
public const string RmiName_AckEnchantWeapon="AckEnchantWeapon";
public const string RmiName_AckApplyGemInWeapon="AckApplyGemInWeapon";
public const string RmiName_AckAddSlotInWpnDepot="AckAddSlotInWpnDepot";
public const string RmiName_AckApplySlotInWpnDepot="AckApplySlotInWpnDepot";
public const string RmiName_AckApplyPosBadge="AckApplyPosBadge";
public const string RmiName_AckApplyOutPosBadge="AckApplyOutPosBadge";
public const string RmiName_AckSellBadge="AckSellBadge";
public const string RmiName_AckSetLockBadge="AckSetLockBadge";
public const string RmiName_AckUpgradeBadge="AckUpgradeBadge";
public const string RmiName_AckResetUpgradeBadge="AckResetUpgradeBadge";
       
public const string RmiName_First = RmiName_AckAddItemSlot;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckAddItemSlot="";
public const string RmiName_AckApplyPosCard="";
public const string RmiName_AckApplyOutPosCard="";
public const string RmiName_AckSellCard="";
public const string RmiName_AckSetLockCard="";
public const string RmiName_AckChangeTypeCard="";
public const string RmiName_AckLvUpCard="";
public const string RmiName_AckSkillLvUpCard="";
public const string RmiName_AckWakeCard="";
public const string RmiName_AckEnchantCard="";
public const string RmiName_AckFavorLvRewardCard="";
public const string RmiName_AckDecomposition="";
public const string RmiName_AckSellItem="";
public const string RmiName_AckItemExchangeCash="";
public const string RmiName_AckUseItemGoods="";
public const string RmiName_AckUseItemProduct="";
public const string RmiName_AckUseItemCode="";
public const string RmiName_AckUseItemStageSpecial="";
public const string RmiName_AckSellGem="";
public const string RmiName_AckSetLockGem="";
public const string RmiName_AckResetOptGem="";
public const string RmiName_AckResetOptSelectGem="";
public const string RmiName_AckLvUpGem="";
public const string RmiName_AckWakeGem="";
public const string RmiName_AckEvolutionGem="";
public const string RmiName_AckAnalyzeGem="";
public const string RmiName_AckSellWeapon="";
public const string RmiName_AckSetLockWeapon="";
public const string RmiName_AckLvUpWeapon="";
public const string RmiName_AckSkillLvUpWeapon="";
public const string RmiName_AckWakeWeapon="";
public const string RmiName_AckEnchantWeapon="";
public const string RmiName_AckApplyGemInWeapon="";
public const string RmiName_AckAddSlotInWpnDepot="";
public const string RmiName_AckApplySlotInWpnDepot="";
public const string RmiName_AckApplyPosBadge="";
public const string RmiName_AckApplyOutPosBadge="";
public const string RmiName_AckSellBadge="";
public const string RmiName_AckSetLockBadge="";
public const string RmiName_AckUpgradeBadge="";
public const string RmiName_AckResetUpgradeBadge="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

