




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace LobbyC2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReqMoveToLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqMoveToLoginDelegate ReqMoveToLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqMoveToBattleDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqMoveToBattleDelegate ReqMoveToBattle = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqUserMarkListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqUserMarkListDelegate ReqUserMarkList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqUserSetMarkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _userMarkTID);  
		public ReqUserSetMarkDelegate ReqUserSetMark = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _userMarkTID)
		{ 
			return false;
		};
		public delegate bool ReqUserLobbyThemeListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqUserLobbyThemeListDelegate ReqUserLobbyThemeList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqUserSetLobbyThemeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _lobbyThemeTID);  
		public ReqUserSetLobbyThemeDelegate ReqUserSetLobbyTheme = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _lobbyThemeTID)
		{ 
			return false;
		};
		public delegate bool ReqUserSetMainCardFormationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _cardFrmtID);  
		public ReqUserSetMainCardFormationDelegate ReqUserSetMainCardFormation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _cardFrmtID)
		{ 
			return false;
		};
		public delegate bool ReqUserCardFormationFaviDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqUserCardFormationFaviDelegate ReqUserCardFormationFavi = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserSetNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public ReqUserSetNameDelegate ReqUserSetName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserSetNameColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid);  
		public ReqUserSetNameColorDelegate ReqUserSetNameColor = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid)
		{ 
			return false;
		};
		public delegate bool ReqUserSetCommentMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public ReqUserSetCommentMsgDelegate ReqUserSetCommentMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserSetCountryAndLangCodeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCountryLangCode _pkt);  
		public ReqUserSetCountryAndLangCodeDelegate ReqUserSetCountryAndLangCode = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCountryLangCode _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserPkgShowOffDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqUserPkgShowOffDelegate ReqUserPkgShowOff = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqFacilityUpgradeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _facilityTID);  
		public ReqFacilityUpgradeDelegate ReqFacilityUpgrade = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _facilityTID)
		{ 
			return false;
		};
		public delegate bool ReqFacilityOperationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperationReq _pkt);  
		public ReqFacilityOperationDelegate ReqFacilityOperation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperationReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFacilityOperationConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperConfirmReq _pkt);  
		public ReqFacilityOperationConfirmDelegate ReqFacilityOperationConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperConfirmReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqDispatchOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqDispatchOpenDelegate ReqDispatchOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqDispatchChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqDispatchChangeDelegate ReqDispatchChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqDispatchOperationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperReq _pkt);  
		public ReqDispatchOperationDelegate ReqDispatchOperation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqDispatchOperationConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperConfirmReq _pkt);  
		public ReqDispatchOperationConfirmDelegate ReqDispatchOperationConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperConfirmReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSetMainRoomThemeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum);  
		public ReqSetMainRoomThemeDelegate ReqSetMainRoomTheme = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum)
		{ 
			return false;
		};
		public delegate bool ReqRoomPurchaseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _storeRoomTID);  
		public ReqRoomPurchaseDelegate ReqRoomPurchase = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _storeRoomTID)
		{ 
			return false;
		};
		public delegate bool ReqRoomThemeSlotDetailInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum);  
		public ReqRoomThemeSlotDetailInfoDelegate ReqRoomThemeSlotDetailInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum)
		{ 
			return false;
		};
		public delegate bool ReqRoomThemeSlotSaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt);  
		public ReqRoomThemeSlotSaveDelegate ReqRoomThemeSlotSave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStorePurchaseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchaseReq _pkt);  
		public ReqStorePurchaseDelegate ReqStorePurchase = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchaseReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqStorePurchaseInAppDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchaseInAppReq _pkt);  
		public ReqStorePurchaseInAppDelegate ReqStorePurchaseInApp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchaseInAppReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqSteamPurchaseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSteamPurchaseReq _pkt);  
		public ReqSteamPurchaseDelegate ReqSteamPurchase = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoSteamPurchaseReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqUserRotationGachaOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public ReqUserRotationGachaOpenDelegate ReqUserRotationGachaOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool ReqRaidStoreListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStoreListReq _pkt);  
		public ReqRaidStoreListDelegate ReqRaidStoreList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStoreListReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqMailListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailListReq _pkt);  
		public ReqMailListDelegate ReqMailList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailListReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqMailTakeProductListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailProductTakeReq _pkt);  
		public ReqMailTakeProductListDelegate ReqMailTakeProductList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailProductTakeReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCommunityInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqCommunityInfoGetDelegate ReqCommunityInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqCommunityUserArenaInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUserArenaInfoReq _pkt);  
		public ReqCommunityUserArenaInfoGetDelegate ReqCommunityUserArenaInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUserArenaInfoReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqCommunityUserUseCallCntDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUseCallCntReq _pkt);  
		public ReqCommunityUserUseCallCntDelegate ReqCommunityUserUseCallCnt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUseCallCntReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendSuggestListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuSuggestReq _pkt);  
		public ReqFriendSuggestListDelegate ReqFriendSuggestList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuSuggestReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendAskDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAskReq _pkt);  
		public ReqFriendAskDelegate ReqFriendAsk = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAskReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendAskDelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAskDel _pkt);  
		public ReqFriendAskDelDelegate ReqFriendAskDel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAskDel _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendAnswerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswer _pkt);  
		public ReqFriendAnswerDelegate ReqFriendAnswer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswer _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKick _pkt);  
		public ReqFriendKickDelegate ReqFriendKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKick _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendPointGiveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqFriendPointGiveDelegate ReqFriendPointGive = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqFriendPointTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointTakeReq _pkt);  
		public ReqFriendPointTakeDelegate ReqFriendPointTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointTakeReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendRoomVisitFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendRoomFlag _pkt);  
		public ReqFriendRoomVisitFlagDelegate ReqFriendRoomVisitFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendRoomFlag _pkt)
		{ 
			return false;
		};
		public delegate bool ReqFriendRoomInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuRoomInfoGet _pkt);  
		public ReqFriendRoomInfoGetDelegate ReqFriendRoomInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuRoomInfoGet _pkt)
		{ 
			return false;
		};
		public delegate bool ReqInfluenceChoiceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluenceChoice _pkt);  
		public ReqInfluenceChoiceDelegate ReqInfluenceChoice = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluenceChoice _pkt)
		{ 
			return false;
		};
		public delegate bool ReqGetInfluenceInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqGetInfluenceInfoDelegate ReqGetInfluenceInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReqGetInfluenceRankInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluRankListReq _pkt);  
		public ReqGetInfluenceRankInfoDelegate ReqGetInfluenceRankInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluRankListReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqInfluenceTgtRwdDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluenceTgtReq _pkt);  
		public ReqInfluenceTgtRwdDelegate ReqInfluenceTgtRwd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluenceTgtReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqBingoEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEventRewardReq _pkt);  
		public ReqBingoEventRewardDelegate ReqBingoEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEventRewardReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqBingoNextOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 group);  
		public ReqBingoNextOpenDelegate ReqBingoNextOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 group)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReqMoveToLogin:
            ProcessReceivedMessage_ReqMoveToLogin(__msg, pa, hostTag, remote);
            break;
        case Common.ReqMoveToBattle:
            ProcessReceivedMessage_ReqMoveToBattle(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserMarkList:
            ProcessReceivedMessage_ReqUserMarkList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetMark:
            ProcessReceivedMessage_ReqUserSetMark(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserLobbyThemeList:
            ProcessReceivedMessage_ReqUserLobbyThemeList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetLobbyTheme:
            ProcessReceivedMessage_ReqUserSetLobbyTheme(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetMainCardFormation:
            ProcessReceivedMessage_ReqUserSetMainCardFormation(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserCardFormationFavi:
            ProcessReceivedMessage_ReqUserCardFormationFavi(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetName:
            ProcessReceivedMessage_ReqUserSetName(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetNameColor:
            ProcessReceivedMessage_ReqUserSetNameColor(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetCommentMsg:
            ProcessReceivedMessage_ReqUserSetCommentMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserSetCountryAndLangCode:
            ProcessReceivedMessage_ReqUserSetCountryAndLangCode(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserPkgShowOff:
            ProcessReceivedMessage_ReqUserPkgShowOff(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFacilityUpgrade:
            ProcessReceivedMessage_ReqFacilityUpgrade(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFacilityOperation:
            ProcessReceivedMessage_ReqFacilityOperation(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFacilityOperationConfirm:
            ProcessReceivedMessage_ReqFacilityOperationConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.ReqDispatchOpen:
            ProcessReceivedMessage_ReqDispatchOpen(__msg, pa, hostTag, remote);
            break;
        case Common.ReqDispatchChange:
            ProcessReceivedMessage_ReqDispatchChange(__msg, pa, hostTag, remote);
            break;
        case Common.ReqDispatchOperation:
            ProcessReceivedMessage_ReqDispatchOperation(__msg, pa, hostTag, remote);
            break;
        case Common.ReqDispatchOperationConfirm:
            ProcessReceivedMessage_ReqDispatchOperationConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSetMainRoomTheme:
            ProcessReceivedMessage_ReqSetMainRoomTheme(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRoomPurchase:
            ProcessReceivedMessage_ReqRoomPurchase(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRoomThemeSlotDetailInfo:
            ProcessReceivedMessage_ReqRoomThemeSlotDetailInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRoomThemeSlotSave:
            ProcessReceivedMessage_ReqRoomThemeSlotSave(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStorePurchase:
            ProcessReceivedMessage_ReqStorePurchase(__msg, pa, hostTag, remote);
            break;
        case Common.ReqStorePurchaseInApp:
            ProcessReceivedMessage_ReqStorePurchaseInApp(__msg, pa, hostTag, remote);
            break;
        case Common.ReqSteamPurchase:
            ProcessReceivedMessage_ReqSteamPurchase(__msg, pa, hostTag, remote);
            break;
        case Common.ReqUserRotationGachaOpen:
            ProcessReceivedMessage_ReqUserRotationGachaOpen(__msg, pa, hostTag, remote);
            break;
        case Common.ReqRaidStoreList:
            ProcessReceivedMessage_ReqRaidStoreList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqMailList:
            ProcessReceivedMessage_ReqMailList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqMailTakeProductList:
            ProcessReceivedMessage_ReqMailTakeProductList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCommunityInfoGet:
            ProcessReceivedMessage_ReqCommunityInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCommunityUserArenaInfoGet:
            ProcessReceivedMessage_ReqCommunityUserArenaInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.ReqCommunityUserUseCallCnt:
            ProcessReceivedMessage_ReqCommunityUserUseCallCnt(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendSuggestList:
            ProcessReceivedMessage_ReqFriendSuggestList(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendAsk:
            ProcessReceivedMessage_ReqFriendAsk(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendAskDel:
            ProcessReceivedMessage_ReqFriendAskDel(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendAnswer:
            ProcessReceivedMessage_ReqFriendAnswer(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendKick:
            ProcessReceivedMessage_ReqFriendKick(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendPointGive:
            ProcessReceivedMessage_ReqFriendPointGive(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendPointTake:
            ProcessReceivedMessage_ReqFriendPointTake(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendRoomVisitFlag:
            ProcessReceivedMessage_ReqFriendRoomVisitFlag(__msg, pa, hostTag, remote);
            break;
        case Common.ReqFriendRoomInfoGet:
            ProcessReceivedMessage_ReqFriendRoomInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.ReqInfluenceChoice:
            ProcessReceivedMessage_ReqInfluenceChoice(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetInfluenceInfo:
            ProcessReceivedMessage_ReqGetInfluenceInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqGetInfluenceRankInfo:
            ProcessReceivedMessage_ReqGetInfluenceRankInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqInfluenceTgtRwd:
            ProcessReceivedMessage_ReqInfluenceTgtRwd(__msg, pa, hostTag, remote);
            break;
        case Common.ReqBingoEventReward:
            ProcessReceivedMessage_ReqBingoEventReward(__msg, pa, hostTag, remote);
            break;
        case Common.ReqBingoNextOpen:
            ProcessReceivedMessage_ReqBingoNextOpen(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReqMoveToLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqMoveToLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqMoveToLogin, RmiName_ReqMoveToLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqMoveToLogin;
        summary.rmiName = RmiName_ReqMoveToLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqMoveToLogin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqMoveToLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqMoveToLogin;
        summary.rmiName = RmiName_ReqMoveToLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqMoveToBattle(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqMoveToBattle);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqMoveToBattle, RmiName_ReqMoveToBattle,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqMoveToBattle;
        summary.rmiName = RmiName_ReqMoveToBattle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqMoveToBattle (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqMoveToBattle);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqMoveToBattle;
        summary.rmiName = RmiName_ReqMoveToBattle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserMarkList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqUserMarkList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqUserMarkList, RmiName_ReqUserMarkList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserMarkList;
        summary.rmiName = RmiName_ReqUserMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserMarkList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserMarkList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserMarkList;
        summary.rmiName = RmiName_ReqUserMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetMark(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _userMarkTID; PN_MarshalerEx.Read(__msg,out _userMarkTID);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetMark);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_userMarkTID.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetMark, RmiName_ReqUserSetMark,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetMark;
        summary.rmiName = RmiName_ReqUserSetMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetMark (remote,ctx , _userMarkTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetMark);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetMark;
        summary.rmiName = RmiName_ReqUserSetMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserLobbyThemeList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqUserLobbyThemeList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqUserLobbyThemeList, RmiName_ReqUserLobbyThemeList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserLobbyThemeList;
        summary.rmiName = RmiName_ReqUserLobbyThemeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserLobbyThemeList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserLobbyThemeList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserLobbyThemeList;
        summary.rmiName = RmiName_ReqUserLobbyThemeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetLobbyTheme(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _lobbyThemeTID; PN_MarshalerEx.Read(__msg,out _lobbyThemeTID);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetLobbyTheme);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_lobbyThemeTID.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetLobbyTheme, RmiName_ReqUserSetLobbyTheme,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetLobbyTheme;
        summary.rmiName = RmiName_ReqUserSetLobbyTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetLobbyTheme (remote,ctx , _lobbyThemeTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetLobbyTheme);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetLobbyTheme;
        summary.rmiName = RmiName_ReqUserSetLobbyTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetMainCardFormation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _cardFrmtID; PN_MarshalerEx.Read(__msg,out _cardFrmtID);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetMainCardFormation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_cardFrmtID.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetMainCardFormation, RmiName_ReqUserSetMainCardFormation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetMainCardFormation;
        summary.rmiName = RmiName_ReqUserSetMainCardFormation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetMainCardFormation (remote,ctx , _cardFrmtID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetMainCardFormation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetMainCardFormation;
        summary.rmiName = RmiName_ReqUserSetMainCardFormation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserCardFormationFavi(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserCardFormationFavi);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserCardFormationFavi, RmiName_ReqUserCardFormationFavi,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserCardFormationFavi;
        summary.rmiName = RmiName_ReqUserCardFormationFavi;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserCardFormationFavi (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserCardFormationFavi);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserCardFormationFavi;
        summary.rmiName = RmiName_ReqUserCardFormationFavi;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetName, RmiName_ReqUserSetName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetName;
        summary.rmiName = RmiName_ReqUserSetName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetName;
        summary.rmiName = RmiName_ReqUserSetName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetNameColor(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _tid; PN_MarshalerEx.Read(__msg,out _tid);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetNameColor);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tid.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetNameColor, RmiName_ReqUserSetNameColor,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetNameColor;
        summary.rmiName = RmiName_ReqUserSetNameColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetNameColor (remote,ctx , _tid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetNameColor);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetNameColor;
        summary.rmiName = RmiName_ReqUserSetNameColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetCommentMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetCommentMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetCommentMsg, RmiName_ReqUserSetCommentMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetCommentMsg;
        summary.rmiName = RmiName_ReqUserSetCommentMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetCommentMsg (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetCommentMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetCommentMsg;
        summary.rmiName = RmiName_ReqUserSetCommentMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserSetCountryAndLangCode(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCountryLangCode _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserSetCountryAndLangCode);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserSetCountryAndLangCode, RmiName_ReqUserSetCountryAndLangCode,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserSetCountryAndLangCode;
        summary.rmiName = RmiName_ReqUserSetCountryAndLangCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserSetCountryAndLangCode (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserSetCountryAndLangCode);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserSetCountryAndLangCode;
        summary.rmiName = RmiName_ReqUserSetCountryAndLangCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserPkgShowOff(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqUserPkgShowOff);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqUserPkgShowOff, RmiName_ReqUserPkgShowOff,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserPkgShowOff;
        summary.rmiName = RmiName_ReqUserPkgShowOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserPkgShowOff (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserPkgShowOff);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserPkgShowOff;
        summary.rmiName = RmiName_ReqUserPkgShowOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFacilityUpgrade(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _facilityTID; PN_MarshalerEx.Read(__msg,out _facilityTID);	
core.PostCheckReadMessage(__msg, RmiName_ReqFacilityUpgrade);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_facilityTID.ToString()+",";
        NotifyCallFromStub(Common.ReqFacilityUpgrade, RmiName_ReqFacilityUpgrade,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFacilityUpgrade;
        summary.rmiName = RmiName_ReqFacilityUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFacilityUpgrade (remote,ctx , _facilityTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFacilityUpgrade);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFacilityUpgrade;
        summary.rmiName = RmiName_ReqFacilityUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFacilityOperation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFacilityOperationReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFacilityOperation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFacilityOperation, RmiName_ReqFacilityOperation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFacilityOperation;
        summary.rmiName = RmiName_ReqFacilityOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFacilityOperation (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFacilityOperation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFacilityOperation;
        summary.rmiName = RmiName_ReqFacilityOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFacilityOperationConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFacilityOperConfirmReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFacilityOperationConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFacilityOperationConfirm, RmiName_ReqFacilityOperationConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFacilityOperationConfirm;
        summary.rmiName = RmiName_ReqFacilityOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFacilityOperationConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFacilityOperationConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFacilityOperationConfirm;
        summary.rmiName = RmiName_ReqFacilityOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqDispatchOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqDispatchOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqDispatchOpen, RmiName_ReqDispatchOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqDispatchOpen;
        summary.rmiName = RmiName_ReqDispatchOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqDispatchOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqDispatchOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqDispatchOpen;
        summary.rmiName = RmiName_ReqDispatchOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqDispatchChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqDispatchChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqDispatchChange, RmiName_ReqDispatchChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqDispatchChange;
        summary.rmiName = RmiName_ReqDispatchChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqDispatchChange (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqDispatchChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqDispatchChange;
        summary.rmiName = RmiName_ReqDispatchChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqDispatchOperation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchOperReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqDispatchOperation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqDispatchOperation, RmiName_ReqDispatchOperation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqDispatchOperation;
        summary.rmiName = RmiName_ReqDispatchOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqDispatchOperation (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqDispatchOperation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqDispatchOperation;
        summary.rmiName = RmiName_ReqDispatchOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqDispatchOperationConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchOperConfirmReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqDispatchOperationConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqDispatchOperationConfirm, RmiName_ReqDispatchOperationConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqDispatchOperationConfirm;
        summary.rmiName = RmiName_ReqDispatchOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqDispatchOperationConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqDispatchOperationConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqDispatchOperationConfirm;
        summary.rmiName = RmiName_ReqDispatchOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSetMainRoomTheme(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Byte _roomThemeSlotNum; PN_MarshalerEx.Read(__msg,out _roomThemeSlotNum);	
core.PostCheckReadMessage(__msg, RmiName_ReqSetMainRoomTheme);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_roomThemeSlotNum.ToString()+",";
        NotifyCallFromStub(Common.ReqSetMainRoomTheme, RmiName_ReqSetMainRoomTheme,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSetMainRoomTheme;
        summary.rmiName = RmiName_ReqSetMainRoomTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSetMainRoomTheme (remote,ctx , _roomThemeSlotNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSetMainRoomTheme);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSetMainRoomTheme;
        summary.rmiName = RmiName_ReqSetMainRoomTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRoomPurchase(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _storeRoomTID; PN_MarshalerEx.Read(__msg,out _storeRoomTID);	
core.PostCheckReadMessage(__msg, RmiName_ReqRoomPurchase);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_storeRoomTID.ToString()+",";
        NotifyCallFromStub(Common.ReqRoomPurchase, RmiName_ReqRoomPurchase,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRoomPurchase;
        summary.rmiName = RmiName_ReqRoomPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRoomPurchase (remote,ctx , _storeRoomTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRoomPurchase);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRoomPurchase;
        summary.rmiName = RmiName_ReqRoomPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRoomThemeSlotDetailInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Byte _roomThemeSlotNum; PN_MarshalerEx.Read(__msg,out _roomThemeSlotNum);	
core.PostCheckReadMessage(__msg, RmiName_ReqRoomThemeSlotDetailInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_roomThemeSlotNum.ToString()+",";
        NotifyCallFromStub(Common.ReqRoomThemeSlotDetailInfo, RmiName_ReqRoomThemeSlotDetailInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRoomThemeSlotDetailInfo;
        summary.rmiName = RmiName_ReqRoomThemeSlotDetailInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRoomThemeSlotDetailInfo (remote,ctx , _roomThemeSlotNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRoomThemeSlotDetailInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRoomThemeSlotDetailInfo;
        summary.rmiName = RmiName_ReqRoomThemeSlotDetailInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRoomThemeSlotSave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRoomThemeSlotDetail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRoomThemeSlotSave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRoomThemeSlotSave, RmiName_ReqRoomThemeSlotSave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRoomThemeSlotSave;
        summary.rmiName = RmiName_ReqRoomThemeSlotSave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRoomThemeSlotSave (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRoomThemeSlotSave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRoomThemeSlotSave;
        summary.rmiName = RmiName_ReqRoomThemeSlotSave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStorePurchase(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStorePurchaseReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqStorePurchase);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqStorePurchase, RmiName_ReqStorePurchase,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStorePurchase;
        summary.rmiName = RmiName_ReqStorePurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStorePurchase (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStorePurchase);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStorePurchase;
        summary.rmiName = RmiName_ReqStorePurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqStorePurchaseInApp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStorePurchaseInAppReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqStorePurchaseInApp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqStorePurchaseInApp, RmiName_ReqStorePurchaseInApp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqStorePurchaseInApp;
        summary.rmiName = RmiName_ReqStorePurchaseInApp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqStorePurchaseInApp (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqStorePurchaseInApp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqStorePurchaseInApp;
        summary.rmiName = RmiName_ReqStorePurchaseInApp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqSteamPurchase(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoSteamPurchaseReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqSteamPurchase);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqSteamPurchase, RmiName_ReqSteamPurchase,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqSteamPurchase;
        summary.rmiName = RmiName_ReqSteamPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqSteamPurchase (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqSteamPurchase);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqSteamPurchase;
        summary.rmiName = RmiName_ReqSteamPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqUserRotationGachaOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqUserRotationGachaOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqUserRotationGachaOpen, RmiName_ReqUserRotationGachaOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqUserRotationGachaOpen;
        summary.rmiName = RmiName_ReqUserRotationGachaOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqUserRotationGachaOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqUserRotationGachaOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqUserRotationGachaOpen;
        summary.rmiName = RmiName_ReqUserRotationGachaOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqRaidStoreList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidStoreListReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqRaidStoreList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqRaidStoreList, RmiName_ReqRaidStoreList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqRaidStoreList;
        summary.rmiName = RmiName_ReqRaidStoreList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqRaidStoreList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqRaidStoreList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqRaidStoreList;
        summary.rmiName = RmiName_ReqRaidStoreList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqMailList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMailListReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqMailList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqMailList, RmiName_ReqMailList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqMailList;
        summary.rmiName = RmiName_ReqMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqMailList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqMailList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqMailList;
        summary.rmiName = RmiName_ReqMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqMailTakeProductList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMailProductTakeReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqMailTakeProductList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqMailTakeProductList, RmiName_ReqMailTakeProductList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqMailTakeProductList;
        summary.rmiName = RmiName_ReqMailTakeProductList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqMailTakeProductList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqMailTakeProductList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqMailTakeProductList;
        summary.rmiName = RmiName_ReqMailTakeProductList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCommunityInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqCommunityInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqCommunityInfoGet, RmiName_ReqCommunityInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCommunityInfoGet;
        summary.rmiName = RmiName_ReqCommunityInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCommunityInfoGet (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCommunityInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCommunityInfoGet;
        summary.rmiName = RmiName_ReqCommunityInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCommunityUserArenaInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuUserArenaInfoReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCommunityUserArenaInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCommunityUserArenaInfoGet, RmiName_ReqCommunityUserArenaInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCommunityUserArenaInfoGet;
        summary.rmiName = RmiName_ReqCommunityUserArenaInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCommunityUserArenaInfoGet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCommunityUserArenaInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCommunityUserArenaInfoGet;
        summary.rmiName = RmiName_ReqCommunityUserArenaInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqCommunityUserUseCallCnt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuUseCallCntReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqCommunityUserUseCallCnt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqCommunityUserUseCallCnt, RmiName_ReqCommunityUserUseCallCnt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqCommunityUserUseCallCnt;
        summary.rmiName = RmiName_ReqCommunityUserUseCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqCommunityUserUseCallCnt (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqCommunityUserUseCallCnt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqCommunityUserUseCallCnt;
        summary.rmiName = RmiName_ReqCommunityUserUseCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendSuggestList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuSuggestReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendSuggestList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendSuggestList, RmiName_ReqFriendSuggestList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendSuggestList;
        summary.rmiName = RmiName_ReqFriendSuggestList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendSuggestList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendSuggestList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendSuggestList;
        summary.rmiName = RmiName_ReqFriendSuggestList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendAsk(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuAskReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendAsk);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendAsk, RmiName_ReqFriendAsk,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendAsk;
        summary.rmiName = RmiName_ReqFriendAsk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendAsk (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendAsk);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendAsk;
        summary.rmiName = RmiName_ReqFriendAsk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendAskDel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuAskDel _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendAskDel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendAskDel, RmiName_ReqFriendAskDel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendAskDel;
        summary.rmiName = RmiName_ReqFriendAskDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendAskDel (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendAskDel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendAskDel;
        summary.rmiName = RmiName_ReqFriendAskDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendAnswer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuAnswer _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendAnswer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendAnswer, RmiName_ReqFriendAnswer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendAnswer;
        summary.rmiName = RmiName_ReqFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendAnswer (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendAnswer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendAnswer;
        summary.rmiName = RmiName_ReqFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuKick _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendKick, RmiName_ReqFriendKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendKick;
        summary.rmiName = RmiName_ReqFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendKick (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendKick;
        summary.rmiName = RmiName_ReqFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendPointGive(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqFriendPointGive);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqFriendPointGive, RmiName_ReqFriendPointGive,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendPointGive;
        summary.rmiName = RmiName_ReqFriendPointGive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendPointGive (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendPointGive);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendPointGive;
        summary.rmiName = RmiName_ReqFriendPointGive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendPointTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendPointTakeReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendPointTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendPointTake, RmiName_ReqFriendPointTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendPointTake;
        summary.rmiName = RmiName_ReqFriendPointTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendPointTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendPointTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendPointTake;
        summary.rmiName = RmiName_ReqFriendPointTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendRoomVisitFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendRoomFlag _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendRoomVisitFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendRoomVisitFlag, RmiName_ReqFriendRoomVisitFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendRoomVisitFlag;
        summary.rmiName = RmiName_ReqFriendRoomVisitFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendRoomVisitFlag (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendRoomVisitFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendRoomVisitFlag;
        summary.rmiName = RmiName_ReqFriendRoomVisitFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqFriendRoomInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuRoomInfoGet _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqFriendRoomInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqFriendRoomInfoGet, RmiName_ReqFriendRoomInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqFriendRoomInfoGet;
        summary.rmiName = RmiName_ReqFriendRoomInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqFriendRoomInfoGet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqFriendRoomInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqFriendRoomInfoGet;
        summary.rmiName = RmiName_ReqFriendRoomInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqInfluenceChoice(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInfluenceChoice _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqInfluenceChoice);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqInfluenceChoice, RmiName_ReqInfluenceChoice,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqInfluenceChoice;
        summary.rmiName = RmiName_ReqInfluenceChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqInfluenceChoice (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqInfluenceChoice);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqInfluenceChoice;
        summary.rmiName = RmiName_ReqInfluenceChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetInfluenceInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqGetInfluenceInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqGetInfluenceInfo, RmiName_ReqGetInfluenceInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetInfluenceInfo;
        summary.rmiName = RmiName_ReqGetInfluenceInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetInfluenceInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetInfluenceInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetInfluenceInfo;
        summary.rmiName = RmiName_ReqGetInfluenceInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqGetInfluenceRankInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInfluRankListReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqGetInfluenceRankInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqGetInfluenceRankInfo, RmiName_ReqGetInfluenceRankInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqGetInfluenceRankInfo;
        summary.rmiName = RmiName_ReqGetInfluenceRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqGetInfluenceRankInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqGetInfluenceRankInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqGetInfluenceRankInfo;
        summary.rmiName = RmiName_ReqGetInfluenceRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqInfluenceTgtRwd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdInfluenceTgtReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqInfluenceTgtRwd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqInfluenceTgtRwd, RmiName_ReqInfluenceTgtRwd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqInfluenceTgtRwd;
        summary.rmiName = RmiName_ReqInfluenceTgtRwd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqInfluenceTgtRwd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqInfluenceTgtRwd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqInfluenceTgtRwd;
        summary.rmiName = RmiName_ReqInfluenceTgtRwd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqBingoEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBingoEventRewardReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqBingoEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqBingoEventReward, RmiName_ReqBingoEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqBingoEventReward;
        summary.rmiName = RmiName_ReqBingoEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqBingoEventReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqBingoEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqBingoEventReward;
        summary.rmiName = RmiName_ReqBingoEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqBingoNextOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 group; PN_MarshalerEx.Read(__msg,out group);	
core.PostCheckReadMessage(__msg, RmiName_ReqBingoNextOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=group.ToString()+",";
        NotifyCallFromStub(Common.ReqBingoNextOpen, RmiName_ReqBingoNextOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqBingoNextOpen;
        summary.rmiName = RmiName_ReqBingoNextOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqBingoNextOpen (remote,ctx , group );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqBingoNextOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqBingoNextOpen;
        summary.rmiName = RmiName_ReqBingoNextOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqMoveToLogin="ReqMoveToLogin";
public const string RmiName_ReqMoveToBattle="ReqMoveToBattle";
public const string RmiName_ReqUserMarkList="ReqUserMarkList";
public const string RmiName_ReqUserSetMark="ReqUserSetMark";
public const string RmiName_ReqUserLobbyThemeList="ReqUserLobbyThemeList";
public const string RmiName_ReqUserSetLobbyTheme="ReqUserSetLobbyTheme";
public const string RmiName_ReqUserSetMainCardFormation="ReqUserSetMainCardFormation";
public const string RmiName_ReqUserCardFormationFavi="ReqUserCardFormationFavi";
public const string RmiName_ReqUserSetName="ReqUserSetName";
public const string RmiName_ReqUserSetNameColor="ReqUserSetNameColor";
public const string RmiName_ReqUserSetCommentMsg="ReqUserSetCommentMsg";
public const string RmiName_ReqUserSetCountryAndLangCode="ReqUserSetCountryAndLangCode";
public const string RmiName_ReqUserPkgShowOff="ReqUserPkgShowOff";
public const string RmiName_ReqFacilityUpgrade="ReqFacilityUpgrade";
public const string RmiName_ReqFacilityOperation="ReqFacilityOperation";
public const string RmiName_ReqFacilityOperationConfirm="ReqFacilityOperationConfirm";
public const string RmiName_ReqDispatchOpen="ReqDispatchOpen";
public const string RmiName_ReqDispatchChange="ReqDispatchChange";
public const string RmiName_ReqDispatchOperation="ReqDispatchOperation";
public const string RmiName_ReqDispatchOperationConfirm="ReqDispatchOperationConfirm";
public const string RmiName_ReqSetMainRoomTheme="ReqSetMainRoomTheme";
public const string RmiName_ReqRoomPurchase="ReqRoomPurchase";
public const string RmiName_ReqRoomThemeSlotDetailInfo="ReqRoomThemeSlotDetailInfo";
public const string RmiName_ReqRoomThemeSlotSave="ReqRoomThemeSlotSave";
public const string RmiName_ReqStorePurchase="ReqStorePurchase";
public const string RmiName_ReqStorePurchaseInApp="ReqStorePurchaseInApp";
public const string RmiName_ReqSteamPurchase="ReqSteamPurchase";
public const string RmiName_ReqUserRotationGachaOpen="ReqUserRotationGachaOpen";
public const string RmiName_ReqRaidStoreList="ReqRaidStoreList";
public const string RmiName_ReqMailList="ReqMailList";
public const string RmiName_ReqMailTakeProductList="ReqMailTakeProductList";
public const string RmiName_ReqCommunityInfoGet="ReqCommunityInfoGet";
public const string RmiName_ReqCommunityUserArenaInfoGet="ReqCommunityUserArenaInfoGet";
public const string RmiName_ReqCommunityUserUseCallCnt="ReqCommunityUserUseCallCnt";
public const string RmiName_ReqFriendSuggestList="ReqFriendSuggestList";
public const string RmiName_ReqFriendAsk="ReqFriendAsk";
public const string RmiName_ReqFriendAskDel="ReqFriendAskDel";
public const string RmiName_ReqFriendAnswer="ReqFriendAnswer";
public const string RmiName_ReqFriendKick="ReqFriendKick";
public const string RmiName_ReqFriendPointGive="ReqFriendPointGive";
public const string RmiName_ReqFriendPointTake="ReqFriendPointTake";
public const string RmiName_ReqFriendRoomVisitFlag="ReqFriendRoomVisitFlag";
public const string RmiName_ReqFriendRoomInfoGet="ReqFriendRoomInfoGet";
public const string RmiName_ReqInfluenceChoice="ReqInfluenceChoice";
public const string RmiName_ReqGetInfluenceInfo="ReqGetInfluenceInfo";
public const string RmiName_ReqGetInfluenceRankInfo="ReqGetInfluenceRankInfo";
public const string RmiName_ReqInfluenceTgtRwd="ReqInfluenceTgtRwd";
public const string RmiName_ReqBingoEventReward="ReqBingoEventReward";
public const string RmiName_ReqBingoNextOpen="ReqBingoNextOpen";
       
public const string RmiName_First = RmiName_ReqMoveToLogin;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqMoveToLogin="";
public const string RmiName_ReqMoveToBattle="";
public const string RmiName_ReqUserMarkList="";
public const string RmiName_ReqUserSetMark="";
public const string RmiName_ReqUserLobbyThemeList="";
public const string RmiName_ReqUserSetLobbyTheme="";
public const string RmiName_ReqUserSetMainCardFormation="";
public const string RmiName_ReqUserCardFormationFavi="";
public const string RmiName_ReqUserSetName="";
public const string RmiName_ReqUserSetNameColor="";
public const string RmiName_ReqUserSetCommentMsg="";
public const string RmiName_ReqUserSetCountryAndLangCode="";
public const string RmiName_ReqUserPkgShowOff="";
public const string RmiName_ReqFacilityUpgrade="";
public const string RmiName_ReqFacilityOperation="";
public const string RmiName_ReqFacilityOperationConfirm="";
public const string RmiName_ReqDispatchOpen="";
public const string RmiName_ReqDispatchChange="";
public const string RmiName_ReqDispatchOperation="";
public const string RmiName_ReqDispatchOperationConfirm="";
public const string RmiName_ReqSetMainRoomTheme="";
public const string RmiName_ReqRoomPurchase="";
public const string RmiName_ReqRoomThemeSlotDetailInfo="";
public const string RmiName_ReqRoomThemeSlotSave="";
public const string RmiName_ReqStorePurchase="";
public const string RmiName_ReqStorePurchaseInApp="";
public const string RmiName_ReqSteamPurchase="";
public const string RmiName_ReqUserRotationGachaOpen="";
public const string RmiName_ReqRaidStoreList="";
public const string RmiName_ReqMailList="";
public const string RmiName_ReqMailTakeProductList="";
public const string RmiName_ReqCommunityInfoGet="";
public const string RmiName_ReqCommunityUserArenaInfoGet="";
public const string RmiName_ReqCommunityUserUseCallCnt="";
public const string RmiName_ReqFriendSuggestList="";
public const string RmiName_ReqFriendAsk="";
public const string RmiName_ReqFriendAskDel="";
public const string RmiName_ReqFriendAnswer="";
public const string RmiName_ReqFriendKick="";
public const string RmiName_ReqFriendPointGive="";
public const string RmiName_ReqFriendPointTake="";
public const string RmiName_ReqFriendRoomVisitFlag="";
public const string RmiName_ReqFriendRoomInfoGet="";
public const string RmiName_ReqInfluenceChoice="";
public const string RmiName_ReqGetInfluenceInfo="";
public const string RmiName_ReqGetInfluenceRankInfo="";
public const string RmiName_ReqInfluenceTgtRwd="";
public const string RmiName_ReqBingoEventReward="";
public const string RmiName_ReqBingoNextOpen="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace LobbyS2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool AckUserMarkListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public AckUserMarkListDelegate AckUserMarkList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserSetMarkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _userMarkTID);  
		public AckUserSetMarkDelegate AckUserSetMark = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _userMarkTID)
		{ 
			return false;
		};
		public delegate bool AckUserLobbyThemeListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt);  
		public AckUserLobbyThemeListDelegate AckUserLobbyThemeList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTIDList _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserSetLobbyThemeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _lobbyThemeTID);  
		public AckUserSetLobbyThemeDelegate AckUserSetLobbyTheme = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _lobbyThemeTID)
		{ 
			return false;
		};
		public delegate bool AckUserSetMainCardFormationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _cardFrmtID);  
		public AckUserSetMainCardFormationDelegate AckUserSetMainCardFormation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _cardFrmtID)
		{ 
			return false;
		};
		public delegate bool AckUserCardFormationFaviDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardFormaFavi _pkt);  
		public AckUserCardFormationFaviDelegate AckUserCardFormationFavi = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCardFormaFavi _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserSetNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public AckUserSetNameDelegate AckUserSetName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserSetNameColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid);  
		public AckUserSetNameColorDelegate AckUserSetNameColor = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.UInt32 _tid)
		{ 
			return false;
		};
		public delegate bool AckUserSetCommentMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt);  
		public AckUserSetCommentMsgDelegate AckUserSetCommentMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStr _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserSetCountryAndLangCodeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCountryLangCode _pkt);  
		public AckUserSetCountryAndLangCodeDelegate AckUserSetCountryAndLangCode = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCountryLangCode _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserPkgShowOffDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public AckUserPkgShowOffDelegate AckUserPkgShowOff = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool AckFacilityUpgradeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityUpgrade _pkt);  
		public AckFacilityUpgradeDelegate AckFacilityUpgrade = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityUpgrade _pkt)
		{ 
			return false;
		};
		public delegate bool AckFacilityOperationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperationAck _pkt);  
		public AckFacilityOperationDelegate AckFacilityOperation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperationAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckFacilityOperationConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperConfirmAck _pkt);  
		public AckFacilityOperationConfirmDelegate AckFacilityOperationConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFacilityOperConfirmAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckDispatchOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOpen _pkt);  
		public AckDispatchOpenDelegate AckDispatchOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOpen _pkt)
		{ 
			return false;
		};
		public delegate bool AckDispatchChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchChange _pkt);  
		public AckDispatchChangeDelegate AckDispatchChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchChange _pkt)
		{ 
			return false;
		};
		public delegate bool AckDispatchOperationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperAck _pkt);  
		public AckDispatchOperationDelegate AckDispatchOperation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckDispatchOperationConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperConfirmAck _pkt);  
		public AckDispatchOperationConfirmDelegate AckDispatchOperationConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoDispatchOperConfirmAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckSetMainRoomThemeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum);  
		public AckSetMainRoomThemeDelegate AckSetMainRoomTheme = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Byte _roomThemeSlotNum)
		{ 
			return false;
		};
		public delegate bool AckRoomPurchaseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomStorePurchase _pkt);  
		public AckRoomPurchaseDelegate AckRoomPurchase = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomStorePurchase _pkt)
		{ 
			return false;
		};
		public delegate bool AckRoomThemeSlotDetailInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt);  
		public AckRoomThemeSlotDetailInfoDelegate AckRoomThemeSlotDetailInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt)
		{ 
			return false;
		};
		public delegate bool AckRoomThemeSlotSaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public AckRoomThemeSlotSaveDelegate AckRoomThemeSlotSave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool AckStorePurchaseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchase _pkt);  
		public AckStorePurchaseDelegate AckStorePurchase = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchase _pkt)
		{ 
			return false;
		};
		public delegate bool AckStorePurchaseInAppDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchase _pkt);  
		public AckStorePurchaseInAppDelegate AckStorePurchaseInApp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoStorePurchase _pkt)
		{ 
			return false;
		};
		public delegate bool AckUserRotationGachaOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRGachaOpenAck _pkt);  
		public AckUserRotationGachaOpenDelegate AckUserRotationGachaOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserRGachaOpenAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckRaidStoreListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStoreListAck _pkt);  
		public AckRaidStoreListDelegate AckRaidStoreList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRaidStoreListAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckMailListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMail _pkt);  
		public AckMailListDelegate AckMailList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMail _pkt)
		{ 
			return false;
		};
		public delegate bool AckMailTakeProductListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailProductTake _pkt);  
		public AckMailTakeProductListDelegate AckMailTakeProductList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoMailProductTake _pkt)
		{ 
			return false;
		};
		public delegate bool AckCommunityInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommunity _pkt);  
		public AckCommunityInfoGetDelegate AckCommunityInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommunity _pkt)
		{ 
			return false;
		};
		public delegate bool AckCommunityUserArenaInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUserArenaInfoAck _pkt);  
		public AckCommunityUserArenaInfoGetDelegate AckCommunityUserArenaInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUserArenaInfoAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckCommunityUserUseCallCntDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUseCallCntAck _pkt);  
		public AckCommunityUserUseCallCntDelegate AckCommunityUserUseCallCnt = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuUseCallCntAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendSuggestListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuSuggestAck _pkt);  
		public AckFriendSuggestListDelegate AckFriendSuggestList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuSuggestAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendAskDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendAsk _pkt);  
		public AckFriendAskDelegate AckFriendAsk = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendAsk _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendAskDelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public AckFriendAskDelDelegate AckFriendAskDel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool AckFriendAnswerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswer _pkt);  
		public AckFriendAnswerDelegate AckFriendAnswer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuAnswer _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKick _pkt);  
		public AckFriendKickDelegate AckFriendKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoCommuKick _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendPointGiveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointGive _pkt);  
		public AckFriendPointGiveDelegate AckFriendPointGive = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointGive _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendPointTakeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointTakeAck _pkt);  
		public AckFriendPointTakeDelegate AckFriendPointTake = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendPointTakeAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendRoomVisitFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendRoomFlag _pkt);  
		public AckFriendRoomVisitFlagDelegate AckFriendRoomVisitFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoFriendRoomFlag _pkt)
		{ 
			return false;
		};
		public delegate bool AckFriendRoomInfoGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt);  
		public AckFriendRoomInfoGetDelegate AckFriendRoomInfoGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRoomThemeSlotDetail _pkt)
		{ 
			return false;
		};
		public delegate bool AckInfluenceChoiceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluenceChoice _pkt);  
		public AckInfluenceChoiceDelegate AckInfluenceChoice = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluenceChoice _pkt)
		{ 
			return false;
		};
		public delegate bool AckGetInfluenceInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluence _pkt);  
		public AckGetInfluenceInfoDelegate AckGetInfluenceInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoInfluence _pkt)
		{ 
			return false;
		};
		public delegate bool AckGetInfluenceRankInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRankInfluence _pkt);  
		public AckGetInfluenceRankInfoDelegate AckGetInfluenceRankInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRankInfluence _pkt)
		{ 
			return false;
		};
		public delegate bool AckInfluenceTgtRwdDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluenceTgtAck _pkt);  
		public AckInfluenceTgtRwdDelegate AckInfluenceTgtRwd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoRwdInfluenceTgtAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckBingoNextOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEvtNextRoundOpen _pkt);  
		public AckBingoNextOpenDelegate AckBingoNextOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEvtNextRoundOpen _pkt)
		{ 
			return false;
		};
		public delegate bool AckBingoEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEventRewardAck _pkt);  
		public AckBingoEventRewardDelegate AckBingoEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoBingoEventRewardAck _pkt)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.AckUserMarkList:
            ProcessReceivedMessage_AckUserMarkList(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetMark:
            ProcessReceivedMessage_AckUserSetMark(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserLobbyThemeList:
            ProcessReceivedMessage_AckUserLobbyThemeList(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetLobbyTheme:
            ProcessReceivedMessage_AckUserSetLobbyTheme(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetMainCardFormation:
            ProcessReceivedMessage_AckUserSetMainCardFormation(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserCardFormationFavi:
            ProcessReceivedMessage_AckUserCardFormationFavi(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetName:
            ProcessReceivedMessage_AckUserSetName(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetNameColor:
            ProcessReceivedMessage_AckUserSetNameColor(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetCommentMsg:
            ProcessReceivedMessage_AckUserSetCommentMsg(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserSetCountryAndLangCode:
            ProcessReceivedMessage_AckUserSetCountryAndLangCode(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserPkgShowOff:
            ProcessReceivedMessage_AckUserPkgShowOff(__msg, pa, hostTag, remote);
            break;
        case Common.AckFacilityUpgrade:
            ProcessReceivedMessage_AckFacilityUpgrade(__msg, pa, hostTag, remote);
            break;
        case Common.AckFacilityOperation:
            ProcessReceivedMessage_AckFacilityOperation(__msg, pa, hostTag, remote);
            break;
        case Common.AckFacilityOperationConfirm:
            ProcessReceivedMessage_AckFacilityOperationConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.AckDispatchOpen:
            ProcessReceivedMessage_AckDispatchOpen(__msg, pa, hostTag, remote);
            break;
        case Common.AckDispatchChange:
            ProcessReceivedMessage_AckDispatchChange(__msg, pa, hostTag, remote);
            break;
        case Common.AckDispatchOperation:
            ProcessReceivedMessage_AckDispatchOperation(__msg, pa, hostTag, remote);
            break;
        case Common.AckDispatchOperationConfirm:
            ProcessReceivedMessage_AckDispatchOperationConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.AckSetMainRoomTheme:
            ProcessReceivedMessage_AckSetMainRoomTheme(__msg, pa, hostTag, remote);
            break;
        case Common.AckRoomPurchase:
            ProcessReceivedMessage_AckRoomPurchase(__msg, pa, hostTag, remote);
            break;
        case Common.AckRoomThemeSlotDetailInfo:
            ProcessReceivedMessage_AckRoomThemeSlotDetailInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckRoomThemeSlotSave:
            ProcessReceivedMessage_AckRoomThemeSlotSave(__msg, pa, hostTag, remote);
            break;
        case Common.AckStorePurchase:
            ProcessReceivedMessage_AckStorePurchase(__msg, pa, hostTag, remote);
            break;
        case Common.AckStorePurchaseInApp:
            ProcessReceivedMessage_AckStorePurchaseInApp(__msg, pa, hostTag, remote);
            break;
        case Common.AckUserRotationGachaOpen:
            ProcessReceivedMessage_AckUserRotationGachaOpen(__msg, pa, hostTag, remote);
            break;
        case Common.AckRaidStoreList:
            ProcessReceivedMessage_AckRaidStoreList(__msg, pa, hostTag, remote);
            break;
        case Common.AckMailList:
            ProcessReceivedMessage_AckMailList(__msg, pa, hostTag, remote);
            break;
        case Common.AckMailTakeProductList:
            ProcessReceivedMessage_AckMailTakeProductList(__msg, pa, hostTag, remote);
            break;
        case Common.AckCommunityInfoGet:
            ProcessReceivedMessage_AckCommunityInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.AckCommunityUserArenaInfoGet:
            ProcessReceivedMessage_AckCommunityUserArenaInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.AckCommunityUserUseCallCnt:
            ProcessReceivedMessage_AckCommunityUserUseCallCnt(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendSuggestList:
            ProcessReceivedMessage_AckFriendSuggestList(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendAsk:
            ProcessReceivedMessage_AckFriendAsk(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendAskDel:
            ProcessReceivedMessage_AckFriendAskDel(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendAnswer:
            ProcessReceivedMessage_AckFriendAnswer(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendKick:
            ProcessReceivedMessage_AckFriendKick(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendPointGive:
            ProcessReceivedMessage_AckFriendPointGive(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendPointTake:
            ProcessReceivedMessage_AckFriendPointTake(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendRoomVisitFlag:
            ProcessReceivedMessage_AckFriendRoomVisitFlag(__msg, pa, hostTag, remote);
            break;
        case Common.AckFriendRoomInfoGet:
            ProcessReceivedMessage_AckFriendRoomInfoGet(__msg, pa, hostTag, remote);
            break;
        case Common.AckInfluenceChoice:
            ProcessReceivedMessage_AckInfluenceChoice(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetInfluenceInfo:
            ProcessReceivedMessage_AckGetInfluenceInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckGetInfluenceRankInfo:
            ProcessReceivedMessage_AckGetInfluenceRankInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckInfluenceTgtRwd:
            ProcessReceivedMessage_AckInfluenceTgtRwd(__msg, pa, hostTag, remote);
            break;
        case Common.AckBingoNextOpen:
            ProcessReceivedMessage_AckBingoNextOpen(__msg, pa, hostTag, remote);
            break;
        case Common.AckBingoEventReward:
            ProcessReceivedMessage_AckBingoEventReward(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_AckUserMarkList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserMarkList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserMarkList, RmiName_AckUserMarkList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserMarkList;
        summary.rmiName = RmiName_AckUserMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserMarkList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserMarkList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserMarkList;
        summary.rmiName = RmiName_AckUserMarkList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetMark(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _userMarkTID; PN_MarshalerEx.Read(__msg,out _userMarkTID);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetMark);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_userMarkTID.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetMark, RmiName_AckUserSetMark,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetMark;
        summary.rmiName = RmiName_AckUserSetMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetMark (remote,ctx , _userMarkTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetMark);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetMark;
        summary.rmiName = RmiName_AckUserSetMark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserLobbyThemeList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTIDList _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserLobbyThemeList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserLobbyThemeList, RmiName_AckUserLobbyThemeList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserLobbyThemeList;
        summary.rmiName = RmiName_AckUserLobbyThemeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserLobbyThemeList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserLobbyThemeList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserLobbyThemeList;
        summary.rmiName = RmiName_AckUserLobbyThemeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetLobbyTheme(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _lobbyThemeTID; PN_MarshalerEx.Read(__msg,out _lobbyThemeTID);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetLobbyTheme);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_lobbyThemeTID.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetLobbyTheme, RmiName_AckUserSetLobbyTheme,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetLobbyTheme;
        summary.rmiName = RmiName_AckUserSetLobbyTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetLobbyTheme (remote,ctx , _lobbyThemeTID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetLobbyTheme);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetLobbyTheme;
        summary.rmiName = RmiName_AckUserSetLobbyTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetMainCardFormation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _cardFrmtID; PN_MarshalerEx.Read(__msg,out _cardFrmtID);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetMainCardFormation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_cardFrmtID.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetMainCardFormation, RmiName_AckUserSetMainCardFormation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetMainCardFormation;
        summary.rmiName = RmiName_AckUserSetMainCardFormation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetMainCardFormation (remote,ctx , _cardFrmtID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetMainCardFormation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetMainCardFormation;
        summary.rmiName = RmiName_AckUserSetMainCardFormation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserCardFormationFavi(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCardFormaFavi _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserCardFormationFavi);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserCardFormationFavi, RmiName_AckUserCardFormationFavi,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserCardFormationFavi;
        summary.rmiName = RmiName_AckUserCardFormationFavi;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserCardFormationFavi (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserCardFormationFavi);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserCardFormationFavi;
        summary.rmiName = RmiName_AckUserCardFormationFavi;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetName, RmiName_AckUserSetName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetName;
        summary.rmiName = RmiName_AckUserSetName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetName (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetName;
        summary.rmiName = RmiName_AckUserSetName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetNameColor(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.UInt32 _tid; PN_MarshalerEx.Read(__msg,out _tid);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetNameColor);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_tid.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetNameColor, RmiName_AckUserSetNameColor,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetNameColor;
        summary.rmiName = RmiName_AckUserSetNameColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetNameColor (remote,ctx , _tid );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetNameColor);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetNameColor;
        summary.rmiName = RmiName_AckUserSetNameColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetCommentMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStr _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetCommentMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetCommentMsg, RmiName_AckUserSetCommentMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetCommentMsg;
        summary.rmiName = RmiName_AckUserSetCommentMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetCommentMsg (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetCommentMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetCommentMsg;
        summary.rmiName = RmiName_AckUserSetCommentMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserSetCountryAndLangCode(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCountryLangCode _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserSetCountryAndLangCode);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserSetCountryAndLangCode, RmiName_AckUserSetCountryAndLangCode,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserSetCountryAndLangCode;
        summary.rmiName = RmiName_AckUserSetCountryAndLangCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserSetCountryAndLangCode (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserSetCountryAndLangCode);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserSetCountryAndLangCode;
        summary.rmiName = RmiName_AckUserSetCountryAndLangCode;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserPkgShowOff(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_AckUserPkgShowOff);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.AckUserPkgShowOff, RmiName_AckUserPkgShowOff,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserPkgShowOff;
        summary.rmiName = RmiName_AckUserPkgShowOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserPkgShowOff (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserPkgShowOff);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserPkgShowOff;
        summary.rmiName = RmiName_AckUserPkgShowOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFacilityUpgrade(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFacilityUpgrade _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFacilityUpgrade);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFacilityUpgrade, RmiName_AckFacilityUpgrade,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFacilityUpgrade;
        summary.rmiName = RmiName_AckFacilityUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFacilityUpgrade (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFacilityUpgrade);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFacilityUpgrade;
        summary.rmiName = RmiName_AckFacilityUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFacilityOperation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFacilityOperationAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFacilityOperation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFacilityOperation, RmiName_AckFacilityOperation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFacilityOperation;
        summary.rmiName = RmiName_AckFacilityOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFacilityOperation (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFacilityOperation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFacilityOperation;
        summary.rmiName = RmiName_AckFacilityOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFacilityOperationConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFacilityOperConfirmAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFacilityOperationConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFacilityOperationConfirm, RmiName_AckFacilityOperationConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFacilityOperationConfirm;
        summary.rmiName = RmiName_AckFacilityOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFacilityOperationConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFacilityOperationConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFacilityOperationConfirm;
        summary.rmiName = RmiName_AckFacilityOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckDispatchOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchOpen _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckDispatchOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckDispatchOpen, RmiName_AckDispatchOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckDispatchOpen;
        summary.rmiName = RmiName_AckDispatchOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckDispatchOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckDispatchOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckDispatchOpen;
        summary.rmiName = RmiName_AckDispatchOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckDispatchChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchChange _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckDispatchChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckDispatchChange, RmiName_AckDispatchChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckDispatchChange;
        summary.rmiName = RmiName_AckDispatchChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckDispatchChange (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckDispatchChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckDispatchChange;
        summary.rmiName = RmiName_AckDispatchChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckDispatchOperation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchOperAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckDispatchOperation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckDispatchOperation, RmiName_AckDispatchOperation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckDispatchOperation;
        summary.rmiName = RmiName_AckDispatchOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckDispatchOperation (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckDispatchOperation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckDispatchOperation;
        summary.rmiName = RmiName_AckDispatchOperation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckDispatchOperationConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoDispatchOperConfirmAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckDispatchOperationConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckDispatchOperationConfirm, RmiName_AckDispatchOperationConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckDispatchOperationConfirm;
        summary.rmiName = RmiName_AckDispatchOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckDispatchOperationConfirm (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckDispatchOperationConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckDispatchOperationConfirm;
        summary.rmiName = RmiName_AckDispatchOperationConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckSetMainRoomTheme(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Byte _roomThemeSlotNum; PN_MarshalerEx.Read(__msg,out _roomThemeSlotNum);	
core.PostCheckReadMessage(__msg, RmiName_AckSetMainRoomTheme);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_roomThemeSlotNum.ToString()+",";
        NotifyCallFromStub(Common.AckSetMainRoomTheme, RmiName_AckSetMainRoomTheme,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckSetMainRoomTheme;
        summary.rmiName = RmiName_AckSetMainRoomTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckSetMainRoomTheme (remote,ctx , _roomThemeSlotNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckSetMainRoomTheme);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckSetMainRoomTheme;
        summary.rmiName = RmiName_AckSetMainRoomTheme;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRoomPurchase(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRoomStorePurchase _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRoomPurchase);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRoomPurchase, RmiName_AckRoomPurchase,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRoomPurchase;
        summary.rmiName = RmiName_AckRoomPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRoomPurchase (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRoomPurchase);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRoomPurchase;
        summary.rmiName = RmiName_AckRoomPurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRoomThemeSlotDetailInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRoomThemeSlotDetail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRoomThemeSlotDetailInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRoomThemeSlotDetailInfo, RmiName_AckRoomThemeSlotDetailInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRoomThemeSlotDetailInfo;
        summary.rmiName = RmiName_AckRoomThemeSlotDetailInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRoomThemeSlotDetailInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRoomThemeSlotDetailInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRoomThemeSlotDetailInfo;
        summary.rmiName = RmiName_AckRoomThemeSlotDetailInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRoomThemeSlotSave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_AckRoomThemeSlotSave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.AckRoomThemeSlotSave, RmiName_AckRoomThemeSlotSave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRoomThemeSlotSave;
        summary.rmiName = RmiName_AckRoomThemeSlotSave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRoomThemeSlotSave (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRoomThemeSlotSave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRoomThemeSlotSave;
        summary.rmiName = RmiName_AckRoomThemeSlotSave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStorePurchase(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStorePurchase _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckStorePurchase);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckStorePurchase, RmiName_AckStorePurchase,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStorePurchase;
        summary.rmiName = RmiName_AckStorePurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStorePurchase (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStorePurchase);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStorePurchase;
        summary.rmiName = RmiName_AckStorePurchase;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckStorePurchaseInApp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoStorePurchase _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckStorePurchaseInApp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckStorePurchaseInApp, RmiName_AckStorePurchaseInApp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckStorePurchaseInApp;
        summary.rmiName = RmiName_AckStorePurchaseInApp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckStorePurchaseInApp (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckStorePurchaseInApp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckStorePurchaseInApp;
        summary.rmiName = RmiName_AckStorePurchaseInApp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckUserRotationGachaOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserRGachaOpenAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckUserRotationGachaOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckUserRotationGachaOpen, RmiName_AckUserRotationGachaOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckUserRotationGachaOpen;
        summary.rmiName = RmiName_AckUserRotationGachaOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckUserRotationGachaOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckUserRotationGachaOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckUserRotationGachaOpen;
        summary.rmiName = RmiName_AckUserRotationGachaOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckRaidStoreList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRaidStoreListAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckRaidStoreList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckRaidStoreList, RmiName_AckRaidStoreList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckRaidStoreList;
        summary.rmiName = RmiName_AckRaidStoreList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckRaidStoreList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckRaidStoreList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckRaidStoreList;
        summary.rmiName = RmiName_AckRaidStoreList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckMailList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckMailList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckMailList, RmiName_AckMailList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckMailList;
        summary.rmiName = RmiName_AckMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckMailList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckMailList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckMailList;
        summary.rmiName = RmiName_AckMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckMailTakeProductList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoMailProductTake _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckMailTakeProductList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckMailTakeProductList, RmiName_AckMailTakeProductList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckMailTakeProductList;
        summary.rmiName = RmiName_AckMailTakeProductList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckMailTakeProductList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckMailTakeProductList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckMailTakeProductList;
        summary.rmiName = RmiName_AckMailTakeProductList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCommunityInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommunity _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCommunityInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCommunityInfoGet, RmiName_AckCommunityInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCommunityInfoGet;
        summary.rmiName = RmiName_AckCommunityInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCommunityInfoGet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCommunityInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCommunityInfoGet;
        summary.rmiName = RmiName_AckCommunityInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCommunityUserArenaInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuUserArenaInfoAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCommunityUserArenaInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCommunityUserArenaInfoGet, RmiName_AckCommunityUserArenaInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCommunityUserArenaInfoGet;
        summary.rmiName = RmiName_AckCommunityUserArenaInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCommunityUserArenaInfoGet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCommunityUserArenaInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCommunityUserArenaInfoGet;
        summary.rmiName = RmiName_AckCommunityUserArenaInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckCommunityUserUseCallCnt(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuUseCallCntAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckCommunityUserUseCallCnt);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckCommunityUserUseCallCnt, RmiName_AckCommunityUserUseCallCnt,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckCommunityUserUseCallCnt;
        summary.rmiName = RmiName_AckCommunityUserUseCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckCommunityUserUseCallCnt (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckCommunityUserUseCallCnt);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckCommunityUserUseCallCnt;
        summary.rmiName = RmiName_AckCommunityUserUseCallCnt;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendSuggestList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuSuggestAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendSuggestList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendSuggestList, RmiName_AckFriendSuggestList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendSuggestList;
        summary.rmiName = RmiName_AckFriendSuggestList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendSuggestList (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendSuggestList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendSuggestList;
        summary.rmiName = RmiName_AckFriendSuggestList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendAsk(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendAsk _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendAsk);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendAsk, RmiName_AckFriendAsk,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendAsk;
        summary.rmiName = RmiName_AckFriendAsk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendAsk (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendAsk);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendAsk;
        summary.rmiName = RmiName_AckFriendAsk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendAskDel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_AckFriendAskDel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.AckFriendAskDel, RmiName_AckFriendAskDel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendAskDel;
        summary.rmiName = RmiName_AckFriendAskDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendAskDel (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendAskDel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendAskDel;
        summary.rmiName = RmiName_AckFriendAskDel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendAnswer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuAnswer _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendAnswer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendAnswer, RmiName_AckFriendAnswer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendAnswer;
        summary.rmiName = RmiName_AckFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendAnswer (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendAnswer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendAnswer;
        summary.rmiName = RmiName_AckFriendAnswer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoCommuKick _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendKick, RmiName_AckFriendKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendKick;
        summary.rmiName = RmiName_AckFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendKick (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendKick;
        summary.rmiName = RmiName_AckFriendKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendPointGive(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendPointGive _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendPointGive);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendPointGive, RmiName_AckFriendPointGive,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendPointGive;
        summary.rmiName = RmiName_AckFriendPointGive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendPointGive (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendPointGive);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendPointGive;
        summary.rmiName = RmiName_AckFriendPointGive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendPointTake(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendPointTakeAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendPointTake);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendPointTake, RmiName_AckFriendPointTake,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendPointTake;
        summary.rmiName = RmiName_AckFriendPointTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendPointTake (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendPointTake);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendPointTake;
        summary.rmiName = RmiName_AckFriendPointTake;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendRoomVisitFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoFriendRoomFlag _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendRoomVisitFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendRoomVisitFlag, RmiName_AckFriendRoomVisitFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendRoomVisitFlag;
        summary.rmiName = RmiName_AckFriendRoomVisitFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendRoomVisitFlag (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendRoomVisitFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendRoomVisitFlag;
        summary.rmiName = RmiName_AckFriendRoomVisitFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckFriendRoomInfoGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRoomThemeSlotDetail _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckFriendRoomInfoGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckFriendRoomInfoGet, RmiName_AckFriendRoomInfoGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckFriendRoomInfoGet;
        summary.rmiName = RmiName_AckFriendRoomInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckFriendRoomInfoGet (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckFriendRoomInfoGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckFriendRoomInfoGet;
        summary.rmiName = RmiName_AckFriendRoomInfoGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckInfluenceChoice(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInfluenceChoice _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckInfluenceChoice);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckInfluenceChoice, RmiName_AckInfluenceChoice,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckInfluenceChoice;
        summary.rmiName = RmiName_AckInfluenceChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckInfluenceChoice (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckInfluenceChoice);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckInfluenceChoice;
        summary.rmiName = RmiName_AckInfluenceChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetInfluenceInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoInfluence _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetInfluenceInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetInfluenceInfo, RmiName_AckGetInfluenceInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetInfluenceInfo;
        summary.rmiName = RmiName_AckGetInfluenceInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetInfluenceInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetInfluenceInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetInfluenceInfo;
        summary.rmiName = RmiName_AckGetInfluenceInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckGetInfluenceRankInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRankInfluence _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckGetInfluenceRankInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckGetInfluenceRankInfo, RmiName_AckGetInfluenceRankInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckGetInfluenceRankInfo;
        summary.rmiName = RmiName_AckGetInfluenceRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckGetInfluenceRankInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckGetInfluenceRankInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckGetInfluenceRankInfo;
        summary.rmiName = RmiName_AckGetInfluenceRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckInfluenceTgtRwd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoRwdInfluenceTgtAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckInfluenceTgtRwd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckInfluenceTgtRwd, RmiName_AckInfluenceTgtRwd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckInfluenceTgtRwd;
        summary.rmiName = RmiName_AckInfluenceTgtRwd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckInfluenceTgtRwd (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckInfluenceTgtRwd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckInfluenceTgtRwd;
        summary.rmiName = RmiName_AckInfluenceTgtRwd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckBingoNextOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBingoEvtNextRoundOpen _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckBingoNextOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckBingoNextOpen, RmiName_AckBingoNextOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckBingoNextOpen;
        summary.rmiName = RmiName_AckBingoNextOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckBingoNextOpen (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckBingoNextOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckBingoNextOpen;
        summary.rmiName = RmiName_AckBingoNextOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckBingoEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoBingoEventRewardAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckBingoEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckBingoEventReward, RmiName_AckBingoEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckBingoEventReward;
        summary.rmiName = RmiName_AckBingoEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckBingoEventReward (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckBingoEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckBingoEventReward;
        summary.rmiName = RmiName_AckBingoEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckUserMarkList="AckUserMarkList";
public const string RmiName_AckUserSetMark="AckUserSetMark";
public const string RmiName_AckUserLobbyThemeList="AckUserLobbyThemeList";
public const string RmiName_AckUserSetLobbyTheme="AckUserSetLobbyTheme";
public const string RmiName_AckUserSetMainCardFormation="AckUserSetMainCardFormation";
public const string RmiName_AckUserCardFormationFavi="AckUserCardFormationFavi";
public const string RmiName_AckUserSetName="AckUserSetName";
public const string RmiName_AckUserSetNameColor="AckUserSetNameColor";
public const string RmiName_AckUserSetCommentMsg="AckUserSetCommentMsg";
public const string RmiName_AckUserSetCountryAndLangCode="AckUserSetCountryAndLangCode";
public const string RmiName_AckUserPkgShowOff="AckUserPkgShowOff";
public const string RmiName_AckFacilityUpgrade="AckFacilityUpgrade";
public const string RmiName_AckFacilityOperation="AckFacilityOperation";
public const string RmiName_AckFacilityOperationConfirm="AckFacilityOperationConfirm";
public const string RmiName_AckDispatchOpen="AckDispatchOpen";
public const string RmiName_AckDispatchChange="AckDispatchChange";
public const string RmiName_AckDispatchOperation="AckDispatchOperation";
public const string RmiName_AckDispatchOperationConfirm="AckDispatchOperationConfirm";
public const string RmiName_AckSetMainRoomTheme="AckSetMainRoomTheme";
public const string RmiName_AckRoomPurchase="AckRoomPurchase";
public const string RmiName_AckRoomThemeSlotDetailInfo="AckRoomThemeSlotDetailInfo";
public const string RmiName_AckRoomThemeSlotSave="AckRoomThemeSlotSave";
public const string RmiName_AckStorePurchase="AckStorePurchase";
public const string RmiName_AckStorePurchaseInApp="AckStorePurchaseInApp";
public const string RmiName_AckUserRotationGachaOpen="AckUserRotationGachaOpen";
public const string RmiName_AckRaidStoreList="AckRaidStoreList";
public const string RmiName_AckMailList="AckMailList";
public const string RmiName_AckMailTakeProductList="AckMailTakeProductList";
public const string RmiName_AckCommunityInfoGet="AckCommunityInfoGet";
public const string RmiName_AckCommunityUserArenaInfoGet="AckCommunityUserArenaInfoGet";
public const string RmiName_AckCommunityUserUseCallCnt="AckCommunityUserUseCallCnt";
public const string RmiName_AckFriendSuggestList="AckFriendSuggestList";
public const string RmiName_AckFriendAsk="AckFriendAsk";
public const string RmiName_AckFriendAskDel="AckFriendAskDel";
public const string RmiName_AckFriendAnswer="AckFriendAnswer";
public const string RmiName_AckFriendKick="AckFriendKick";
public const string RmiName_AckFriendPointGive="AckFriendPointGive";
public const string RmiName_AckFriendPointTake="AckFriendPointTake";
public const string RmiName_AckFriendRoomVisitFlag="AckFriendRoomVisitFlag";
public const string RmiName_AckFriendRoomInfoGet="AckFriendRoomInfoGet";
public const string RmiName_AckInfluenceChoice="AckInfluenceChoice";
public const string RmiName_AckGetInfluenceInfo="AckGetInfluenceInfo";
public const string RmiName_AckGetInfluenceRankInfo="AckGetInfluenceRankInfo";
public const string RmiName_AckInfluenceTgtRwd="AckInfluenceTgtRwd";
public const string RmiName_AckBingoNextOpen="AckBingoNextOpen";
public const string RmiName_AckBingoEventReward="AckBingoEventReward";
       
public const string RmiName_First = RmiName_AckUserMarkList;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckUserMarkList="";
public const string RmiName_AckUserSetMark="";
public const string RmiName_AckUserLobbyThemeList="";
public const string RmiName_AckUserSetLobbyTheme="";
public const string RmiName_AckUserSetMainCardFormation="";
public const string RmiName_AckUserCardFormationFavi="";
public const string RmiName_AckUserSetName="";
public const string RmiName_AckUserSetNameColor="";
public const string RmiName_AckUserSetCommentMsg="";
public const string RmiName_AckUserSetCountryAndLangCode="";
public const string RmiName_AckUserPkgShowOff="";
public const string RmiName_AckFacilityUpgrade="";
public const string RmiName_AckFacilityOperation="";
public const string RmiName_AckFacilityOperationConfirm="";
public const string RmiName_AckDispatchOpen="";
public const string RmiName_AckDispatchChange="";
public const string RmiName_AckDispatchOperation="";
public const string RmiName_AckDispatchOperationConfirm="";
public const string RmiName_AckSetMainRoomTheme="";
public const string RmiName_AckRoomPurchase="";
public const string RmiName_AckRoomThemeSlotDetailInfo="";
public const string RmiName_AckRoomThemeSlotSave="";
public const string RmiName_AckStorePurchase="";
public const string RmiName_AckStorePurchaseInApp="";
public const string RmiName_AckUserRotationGachaOpen="";
public const string RmiName_AckRaidStoreList="";
public const string RmiName_AckMailList="";
public const string RmiName_AckMailTakeProductList="";
public const string RmiName_AckCommunityInfoGet="";
public const string RmiName_AckCommunityUserArenaInfoGet="";
public const string RmiName_AckCommunityUserUseCallCnt="";
public const string RmiName_AckFriendSuggestList="";
public const string RmiName_AckFriendAsk="";
public const string RmiName_AckFriendAskDel="";
public const string RmiName_AckFriendAnswer="";
public const string RmiName_AckFriendKick="";
public const string RmiName_AckFriendPointGive="";
public const string RmiName_AckFriendPointTake="";
public const string RmiName_AckFriendRoomVisitFlag="";
public const string RmiName_AckFriendRoomInfoGet="";
public const string RmiName_AckInfluenceChoice="";
public const string RmiName_AckGetInfluenceInfo="";
public const string RmiName_AckGetInfluenceRankInfo="";
public const string RmiName_AckInfluenceTgtRwd="";
public const string RmiName_AckBingoNextOpen="";
public const string RmiName_AckBingoEventReward="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

