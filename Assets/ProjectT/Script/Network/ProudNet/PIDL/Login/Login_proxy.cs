




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace LoginC2S
{
	public class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReqClientSecurityInfo(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityReq _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReqClientSecurityInfo;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReqClientSecurityInfo, Common.ReqClientSecurityInfo);
}

public bool ReqClientSecurityInfo(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityReq _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReqClientSecurityInfo;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReqClientSecurityInfo, Common.ReqClientSecurityInfo);
}
public bool ReqClientSecurityVerify(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyReq _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReqClientSecurityVerify;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReqClientSecurityVerify, Common.ReqClientSecurityVerify);
}

public bool ReqClientSecurityVerify(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyReq _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReqClientSecurityVerify;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReqClientSecurityVerify, Common.ReqClientSecurityVerify);
}
public bool ReqAccountAuthLogin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAuthLogin _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReqAccountAuthLogin;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReqAccountAuthLogin, Common.ReqAccountAuthLogin);
}

public bool ReqAccountAuthLogin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoAuthLogin _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReqAccountAuthLogin;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReqAccountAuthLogin, Common.ReqAccountAuthLogin);
}
public bool ReqMoveToLobby(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReqMoveToLobby;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReqMoveToLobby, Common.ReqMoveToLobby);
}

public bool ReqMoveToLobby(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReqMoveToLobby;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReqMoveToLobby, Common.ReqMoveToLobby);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqClientSecurityInfo="ReqClientSecurityInfo";
public const string RmiName_ReqClientSecurityVerify="ReqClientSecurityVerify";
public const string RmiName_ReqAccountAuthLogin="ReqAccountAuthLogin";
public const string RmiName_ReqMoveToLobby="ReqMoveToLobby";
       
public const string RmiName_First = RmiName_ReqClientSecurityInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqClientSecurityInfo="";
public const string RmiName_ReqClientSecurityVerify="";
public const string RmiName_ReqAccountAuthLogin="";
public const string RmiName_ReqMoveToLobby="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace LoginS2C
{
	public class Proxy:Nettention.Proud.RmiProxy
	{
public bool AckClientSecurityInfo(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityAck _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.AckClientSecurityInfo;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_AckClientSecurityInfo, Common.AckClientSecurityInfo);
}

public bool AckClientSecurityInfo(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityAck _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.AckClientSecurityInfo;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_AckClientSecurityInfo, Common.AckClientSecurityInfo);
}
public bool AckClientSecurityVerify(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyAck _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.AckClientSecurityVerify;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_AckClientSecurityVerify, Common.AckClientSecurityVerify);
}

public bool AckClientSecurityVerify(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyAck _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.AckClientSecurityVerify;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_AckClientSecurityVerify, Common.AckClientSecurityVerify);
}
public bool NotiFirstLogin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotiFirstLogin;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotiFirstLogin, Common.NotiFirstLogin);
}

public bool NotiFirstLogin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotiFirstLogin;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotiFirstLogin, Common.NotiFirstLogin);
}
public bool NotiUserLoginChangeData(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotiUserLoginChangeData;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotiUserLoginChangeData, Common.NotiUserLoginChangeData);
}

public bool NotiUserLoginChangeData(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotiUserLoginChangeData;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotiUserLoginChangeData, Common.NotiUserLoginChangeData);
}
public bool AckErrLoginUserBlock(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _blockTime)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.AckErrLoginUserBlock;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _blockTime);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_AckErrLoginUserBlock, Common.AckErrLoginUserBlock);
}

public bool AckErrLoginUserBlock(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoTime _blockTime)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.AckErrLoginUserBlock;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _blockTime);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_AckErrLoginUserBlock, Common.AckErrLoginUserBlock);
}
public bool AckLoginAndUserInfo(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoLoginCommon _pkt, PktInfoDetailUser _info)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.AckLoginAndUserInfo;
		__msg.Write(__msgid);
		PN_MarshalerEx.Write(__msg, _pkt);
		PN_MarshalerEx.Write(__msg, _info);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_AckLoginAndUserInfo, Common.AckLoginAndUserInfo);
}

public bool AckLoginAndUserInfo(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, PktInfoLoginCommon _pkt, PktInfoDetailUser _info)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.AckLoginAndUserInfo;
__msg.Write(__msgid);
PN_MarshalerEx.Write(__msg, _pkt);
PN_MarshalerEx.Write(__msg, _info);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_AckLoginAndUserInfo, Common.AckLoginAndUserInfo);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckClientSecurityInfo="AckClientSecurityInfo";
public const string RmiName_AckClientSecurityVerify="AckClientSecurityVerify";
public const string RmiName_NotiFirstLogin="NotiFirstLogin";
public const string RmiName_NotiUserLoginChangeData="NotiUserLoginChangeData";
public const string RmiName_AckErrLoginUserBlock="AckErrLoginUserBlock";
public const string RmiName_AckLoginAndUserInfo="AckLoginAndUserInfo";
       
public const string RmiName_First = RmiName_AckClientSecurityInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckClientSecurityInfo="";
public const string RmiName_AckClientSecurityVerify="";
public const string RmiName_NotiFirstLogin="";
public const string RmiName_NotiUserLoginChangeData="";
public const string RmiName_AckErrLoginUserBlock="";
public const string RmiName_AckLoginAndUserInfo="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

