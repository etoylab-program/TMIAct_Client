




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace LoginC2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReqClientSecurityInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityReq _pkt);  
		public ReqClientSecurityInfoDelegate ReqClientSecurityInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqClientSecurityVerifyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyReq _pkt);  
		public ReqClientSecurityVerifyDelegate ReqClientSecurityVerify = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyReq _pkt)
		{ 
			return false;
		};
		public delegate bool ReqAccountAuthLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAuthLogin _pkt);  
		public ReqAccountAuthLoginDelegate ReqAccountAuthLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoAuthLogin _pkt)
		{ 
			return false;
		};
		public delegate bool ReqMoveToLobbyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReqMoveToLobbyDelegate ReqMoveToLobby = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReqClientSecurityInfo:
            ProcessReceivedMessage_ReqClientSecurityInfo(__msg, pa, hostTag, remote);
            break;
        case Common.ReqClientSecurityVerify:
            ProcessReceivedMessage_ReqClientSecurityVerify(__msg, pa, hostTag, remote);
            break;
        case Common.ReqAccountAuthLogin:
            ProcessReceivedMessage_ReqAccountAuthLogin(__msg, pa, hostTag, remote);
            break;
        case Common.ReqMoveToLobby:
            ProcessReceivedMessage_ReqMoveToLobby(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReqClientSecurityInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoClientSecurityReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqClientSecurityInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqClientSecurityInfo, RmiName_ReqClientSecurityInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqClientSecurityInfo;
        summary.rmiName = RmiName_ReqClientSecurityInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqClientSecurityInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqClientSecurityInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqClientSecurityInfo;
        summary.rmiName = RmiName_ReqClientSecurityInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqClientSecurityVerify(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoClientSecurityVerifyReq _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqClientSecurityVerify);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqClientSecurityVerify, RmiName_ReqClientSecurityVerify,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqClientSecurityVerify;
        summary.rmiName = RmiName_ReqClientSecurityVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqClientSecurityVerify (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqClientSecurityVerify);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqClientSecurityVerify;
        summary.rmiName = RmiName_ReqClientSecurityVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqAccountAuthLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoAuthLogin _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_ReqAccountAuthLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.ReqAccountAuthLogin, RmiName_ReqAccountAuthLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqAccountAuthLogin;
        summary.rmiName = RmiName_ReqAccountAuthLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqAccountAuthLogin (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqAccountAuthLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqAccountAuthLogin;
        summary.rmiName = RmiName_ReqAccountAuthLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReqMoveToLobby(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReqMoveToLobby);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReqMoveToLobby, RmiName_ReqMoveToLobby,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReqMoveToLobby;
        summary.rmiName = RmiName_ReqMoveToLobby;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReqMoveToLobby (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReqMoveToLobby);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReqMoveToLobby;
        summary.rmiName = RmiName_ReqMoveToLobby;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqClientSecurityInfo="ReqClientSecurityInfo";
public const string RmiName_ReqClientSecurityVerify="ReqClientSecurityVerify";
public const string RmiName_ReqAccountAuthLogin="ReqAccountAuthLogin";
public const string RmiName_ReqMoveToLobby="ReqMoveToLobby";
       
public const string RmiName_First = RmiName_ReqClientSecurityInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReqClientSecurityInfo="";
public const string RmiName_ReqClientSecurityVerify="";
public const string RmiName_ReqAccountAuthLogin="";
public const string RmiName_ReqMoveToLobby="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace LoginS2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool AckClientSecurityInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityAck _pkt);  
		public AckClientSecurityInfoDelegate AckClientSecurityInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityAck _pkt)
		{ 
			return false;
		};
		public delegate bool AckClientSecurityVerifyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyAck _pkt);  
		public AckClientSecurityVerifyDelegate AckClientSecurityVerify = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoClientSecurityVerifyAck _pkt)
		{ 
			return false;
		};
		public delegate bool NotiFirstLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt);  
		public NotiFirstLoginDelegate NotiFirstLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
		{ 
			return false;
		};
		public delegate bool NotiUserLoginChangeDataDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt);  
		public NotiUserLoginChangeDataDelegate NotiUserLoginChangeData = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoUserDataChange _pkt)
		{ 
			return false;
		};
		public delegate bool AckErrLoginUserBlockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _blockTime);  
		public AckErrLoginUserBlockDelegate AckErrLoginUserBlock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoTime _blockTime)
		{ 
			return false;
		};
		public delegate bool AckLoginAndUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoLoginCommon _pkt, PktInfoDetailUser _info);  
		public AckLoginAndUserInfoDelegate AckLoginAndUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, PktInfoLoginCommon _pkt, PktInfoDetailUser _info)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.AckClientSecurityInfo:
            ProcessReceivedMessage_AckClientSecurityInfo(__msg, pa, hostTag, remote);
            break;
        case Common.AckClientSecurityVerify:
            ProcessReceivedMessage_AckClientSecurityVerify(__msg, pa, hostTag, remote);
            break;
        case Common.NotiFirstLogin:
            ProcessReceivedMessage_NotiFirstLogin(__msg, pa, hostTag, remote);
            break;
        case Common.NotiUserLoginChangeData:
            ProcessReceivedMessage_NotiUserLoginChangeData(__msg, pa, hostTag, remote);
            break;
        case Common.AckErrLoginUserBlock:
            ProcessReceivedMessage_AckErrLoginUserBlock(__msg, pa, hostTag, remote);
            break;
        case Common.AckLoginAndUserInfo:
            ProcessReceivedMessage_AckLoginAndUserInfo(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_AckClientSecurityInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoClientSecurityAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckClientSecurityInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckClientSecurityInfo, RmiName_AckClientSecurityInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckClientSecurityInfo;
        summary.rmiName = RmiName_AckClientSecurityInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckClientSecurityInfo (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckClientSecurityInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckClientSecurityInfo;
        summary.rmiName = RmiName_AckClientSecurityInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckClientSecurityVerify(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoClientSecurityVerifyAck _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_AckClientSecurityVerify);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.AckClientSecurityVerify, RmiName_AckClientSecurityVerify,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckClientSecurityVerify;
        summary.rmiName = RmiName_AckClientSecurityVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckClientSecurityVerify (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckClientSecurityVerify);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckClientSecurityVerify;
        summary.rmiName = RmiName_AckClientSecurityVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiFirstLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserDataChange _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiFirstLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiFirstLogin, RmiName_NotiFirstLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiFirstLogin;
        summary.rmiName = RmiName_NotiFirstLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiFirstLogin (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiFirstLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiFirstLogin;
        summary.rmiName = RmiName_NotiFirstLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotiUserLoginChangeData(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoUserDataChange _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
core.PostCheckReadMessage(__msg, RmiName_NotiUserLoginChangeData);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
        NotifyCallFromStub(Common.NotiUserLoginChangeData, RmiName_NotiUserLoginChangeData,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotiUserLoginChangeData;
        summary.rmiName = RmiName_NotiUserLoginChangeData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotiUserLoginChangeData (remote,ctx , _pkt );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotiUserLoginChangeData);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotiUserLoginChangeData;
        summary.rmiName = RmiName_NotiUserLoginChangeData;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckErrLoginUserBlock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoTime _blockTime; PN_MarshalerEx.Read(__msg,out _blockTime);	
core.PostCheckReadMessage(__msg, RmiName_AckErrLoginUserBlock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_blockTime.ToString()+",";
        NotifyCallFromStub(Common.AckErrLoginUserBlock, RmiName_AckErrLoginUserBlock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckErrLoginUserBlock;
        summary.rmiName = RmiName_AckErrLoginUserBlock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckErrLoginUserBlock (remote,ctx , _blockTime );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckErrLoginUserBlock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckErrLoginUserBlock;
        summary.rmiName = RmiName_AckErrLoginUserBlock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AckLoginAndUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        PktInfoLoginCommon _pkt; PN_MarshalerEx.Read(__msg,out _pkt);	
PktInfoDetailUser _info; PN_MarshalerEx.Read(__msg,out _info);	
core.PostCheckReadMessage(__msg, RmiName_AckLoginAndUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_pkt.ToString()+",";
parameterString+=_info.ToString()+",";
        NotifyCallFromStub(Common.AckLoginAndUserInfo, RmiName_AckLoginAndUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AckLoginAndUserInfo;
        summary.rmiName = RmiName_AckLoginAndUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AckLoginAndUserInfo (remote,ctx , _pkt, _info );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AckLoginAndUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AckLoginAndUserInfo;
        summary.rmiName = RmiName_AckLoginAndUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckClientSecurityInfo="AckClientSecurityInfo";
public const string RmiName_AckClientSecurityVerify="AckClientSecurityVerify";
public const string RmiName_NotiFirstLogin="NotiFirstLogin";
public const string RmiName_NotiUserLoginChangeData="NotiUserLoginChangeData";
public const string RmiName_AckErrLoginUserBlock="AckErrLoginUserBlock";
public const string RmiName_AckLoginAndUserInfo="AckLoginAndUserInfo";
       
public const string RmiName_First = RmiName_AckClientSecurityInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_AckClientSecurityInfo="";
public const string RmiName_AckClientSecurityVerify="";
public const string RmiName_NotiFirstLogin="";
public const string RmiName_NotiUserLoginChangeData="";
public const string RmiName_AckErrLoginUserBlock="";
public const string RmiName_AckLoginAndUserInfo="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

